WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:24.516 --> 00:00:31.546 A:middle
[ Applause ]

00:00:32.046 --> 00:00:32.506 A:middle
&gt;&gt; KATIE SKINNER: Hi, everyone.

00:00:32.836 --> 00:00:35.556 A:middle
My name's Katie Skinner,
and along with Jason Novak,

00:00:36.126 --> 00:00:37.916 A:middle
we are going to be
talking about privacy

00:00:37.916 --> 00:00:39.376 A:middle
in your app this afternoon.

00:00:40.386 --> 00:00:43.506 A:middle
We are both members of Product
Security and Privacy at Apple.

00:00:44.556 --> 00:00:47.586 A:middle
That means we work with
teams all across Apple

00:00:47.986 --> 00:00:50.386 A:middle
to build privacy into
our apps and services.

00:00:50.386 --> 00:00:55.266 A:middle
A few of the teams that I work
closely with are Apple Pay,

00:00:55.596 --> 00:00:58.356 A:middle
Siri, Proactive Assistant,
Health,

00:00:59.356 --> 00:01:01.206 A:middle
and our newest OS, watchOS.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.356 --> 00:01:01.206 A:middle
and our newest OS, watchOS.

00:01:02.286 --> 00:01:04.206 A:middle
First I am going to
talk a little bit

00:01:04.206 --> 00:01:09.806 A:middle
about why privacy matters at
Apple and how we think about it.

00:01:10.416 --> 00:01:14.246 A:middle
At Apple, we see
privacy as a human right.

00:01:15.486 --> 00:01:18.206 A:middle
That's a guiding principle
that we take every day

00:01:18.206 --> 00:01:23.576 A:middle
into how we design our apps,
our services, and new versions

00:01:23.576 --> 00:01:26.366 A:middle
of iOS, OS X, and watchOS.

00:01:28.196 --> 00:01:30.406 A:middle
Users want their
privacy respected

00:01:30.406 --> 00:01:33.846 A:middle
when they use our
products, and all developers,

00:01:33.916 --> 00:01:36.246 A:middle
everyone in this room,
shares that responsibility.

00:01:37.286 --> 00:01:38.496 A:middle
So when you are building
your apps,

00:01:39.016 --> 00:01:45.346 A:middle
be mindful of user privacy, and
build privacy into your apps.

00:01:45.896 --> 00:01:50.246 A:middle
Not only at Apple are we focused
on building great products,

00:01:50.626 --> 00:01:54.716 A:middle
we also are focused on
building great tools for you,

00:01:55.466 --> 00:01:58.616 A:middle
the developer community,
to make it easy for you

00:01:58.616 --> 00:02:01.376 A:middle
to respect user privacy
and build privacy

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.616 --> 00:02:01.376 A:middle
to respect user privacy
and build privacy

00:02:01.486 --> 00:02:02.916 A:middle
into your apps and services.

00:02:03.716 --> 00:02:07.686 A:middle
At the end of the day,
all of our success relies

00:02:07.686 --> 00:02:09.246 A:middle
on our relationship
with our users.

00:02:10.876 --> 00:02:13.906 A:middle
And trust is key to
maintaining that relationship.

00:02:15.636 --> 00:02:18.716 A:middle
We've all read stories in
the press about breaches,

00:02:19.726 --> 00:02:24.056 A:middle
about misuse of user data,
and nobody in this room wants

00:02:24.056 --> 00:02:27.486 A:middle
to be the next one in the news.

00:02:27.636 --> 00:02:31.066 A:middle
Our platform is a place
where users have excited

00:02:31.066 --> 00:02:33.106 A:middle
about new experiences, excited

00:02:33.106 --> 00:02:35.696 A:middle
about downloading
new applications.

00:02:36.506 --> 00:02:41.256 A:middle
And it's all about keeping
our app ecosystem healthy

00:02:41.446 --> 00:02:42.096 A:middle
and thriving.

00:02:42.096 --> 00:02:46.226 A:middle
And the trustworthiness of
all of you is part of that.

00:02:47.646 --> 00:02:52.266 A:middle
So be trustworthy
with our users.

00:02:52.916 --> 00:02:56.516 A:middle
Now, users trust us with
lots of sensitive data.

00:02:57.996 --> 00:03:00.236 A:middle
And we need to be good
stewards of their data.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.996 --> 00:03:00.236 A:middle
And we need to be good
stewards of their data.

00:03:01.356 --> 00:03:06.666 A:middle
And architecting for privacy is
the place to start to do that.

00:03:06.826 --> 00:03:09.836 A:middle
Now, all data should
have a retention policy.

00:03:10.786 --> 00:03:12.986 A:middle
Now, how do you come up
with that retention policy?

00:03:13.486 --> 00:03:16.326 A:middle
The place to start is how
you will use that data.

00:03:17.766 --> 00:03:20.706 A:middle
Now, if you are no
longer using that data,

00:03:21.416 --> 00:03:23.626 A:middle
it's no longer serving
a user need,

00:03:24.236 --> 00:03:27.546 A:middle
then you should delete
that data.

00:03:27.706 --> 00:03:30.746 A:middle
All data that you are
storing and the more data

00:03:30.746 --> 00:03:34.706 A:middle
that you store makes you a
richer target for attackers,

00:03:35.296 --> 00:03:36.566 A:middle
a more valuable target.

00:03:37.686 --> 00:03:40.646 A:middle
So only collect the
data that you need.

00:03:41.306 --> 00:03:45.606 A:middle
I believe that all data
collected carries risk,

00:03:46.606 --> 00:03:51.226 A:middle
so you need to balance the
value that you provide to users

00:03:52.056 --> 00:03:55.856 A:middle
with the risks inherent in
collecting and storing data.

00:03:56.546 --> 00:03:59.836 A:middle
Now, you can mitigate this risk

00:03:59.836 --> 00:04:02.886 A:middle
by applying data
minimization techniques.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.836 --> 00:04:02.886 A:middle
by applying data
minimization techniques.

00:04:04.376 --> 00:04:08.856 A:middle
To learn more about the list of
techniques and to see examples

00:04:08.856 --> 00:04:15.216 A:middle
on how to apply them, go and
watch User Privacy in iOS

00:04:15.666 --> 00:04:18.226 A:middle
and OS X from last year's WWDC.

00:04:19.435 --> 00:04:24.756 A:middle
Aggregation, de-resolution,
these are all ways

00:04:24.756 --> 00:04:27.596 A:middle
to reduce the risk for
the data that you retain.

00:04:28.956 --> 00:04:30.506 A:middle
But which techniques
should you apply?

00:04:32.096 --> 00:04:35.676 A:middle
The place to start is what
is the use of the data?

00:04:36.066 --> 00:04:36.966 A:middle
How are you going to use it?

00:04:37.946 --> 00:04:39.966 A:middle
What questions are
you going to answer?

00:04:40.796 --> 00:04:42.816 A:middle
What decisions is
this data driving?

00:04:44.236 --> 00:04:46.876 A:middle
And if you can't come up with
an answer to this question,

00:04:46.876 --> 00:04:48.336 A:middle
you can't think of anything,

00:04:48.776 --> 00:04:52.336 A:middle
then you shouldn't be
retaining this data at all.

00:04:53.186 --> 00:04:57.096 A:middle
Apply the last technique
on the list, minimization,

00:04:57.516 --> 00:04:59.956 A:middle
and don't collect or
transfer the data at all.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:01.636 --> 00:05:05.886 A:middle
Now, for the data that
you decide is actionable,

00:05:06.696 --> 00:05:09.996 A:middle
all data sent off device
should be protected in transit.

00:05:11.366 --> 00:05:14.216 A:middle
Later Jason will talk about
App Transport Security,

00:05:14.496 --> 00:05:17.576 A:middle
which is a new way in
iOS 9 to make it easier

00:05:18.006 --> 00:05:21.356 A:middle
to communicate securely
with your services.

00:05:23.036 --> 00:05:26.576 A:middle
To reduce the risk, avoid
transferring data off device

00:05:26.576 --> 00:05:29.356 A:middle
when possible, especially
think twice

00:05:29.696 --> 00:05:31.356 A:middle
about sensitive data categories.

00:05:32.096 --> 00:05:33.836 A:middle
This includes things
like health data.

00:05:34.946 --> 00:05:39.116 A:middle
For example, during a cycling
workout, there's information

00:05:39.116 --> 00:05:42.446 A:middle
like the user's heart rate,
the distance traveled,

00:05:42.706 --> 00:05:45.516 A:middle
maybe the user's height and
weight, calibration data,

00:05:46.136 --> 00:05:49.666 A:middle
and all of that is processed
on the paired devices

00:05:50.266 --> 00:05:52.726 A:middle
to show what calories were
burned during that workout.

00:05:53.776 --> 00:05:56.436 A:middle
None of that data is sent
to server for processing.

00:05:57.106 --> 00:06:02.266 A:middle
Now, data needs to be
protected not only in transit

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.106 --> 00:06:02.266 A:middle
Now, data needs to be
protected not only in transit

00:06:02.476 --> 00:06:03.846 A:middle
but also when persisted.

00:06:05.056 --> 00:06:08.966 A:middle
First think about does the
data need to be stored at all?

00:06:10.126 --> 00:06:10.986 A:middle
Can it be transient?

00:06:11.566 --> 00:06:13.576 A:middle
Can it be stored only in memory?

00:06:14.186 --> 00:06:17.416 A:middle
Or does it need to
be written to disk?

00:06:17.416 --> 00:06:19.976 A:middle
On iOS and watchOS, take
advantage of data protection,

00:06:20.026 --> 00:06:22.276 A:middle
which I will be talking
about more later.

00:06:23.596 --> 00:06:25.396 A:middle
If you are storing
your data server-side,

00:06:25.486 --> 00:06:27.326 A:middle
make sure you encrypt
your data at rest.

00:06:28.446 --> 00:06:32.176 A:middle
With CloudKit, we make
it simple to do this.

00:06:32.386 --> 00:06:35.546 A:middle
Think about what identifiers are
sent and stored with your data.

00:06:36.166 --> 00:06:38.946 A:middle
Jason's going to talk
in depth later about how

00:06:38.946 --> 00:06:40.736 A:middle
to choose an appropriate
identifier.

00:06:43.156 --> 00:06:45.906 A:middle
Now, you want to be
clear with your users

00:06:45.986 --> 00:06:48.596 A:middle
about what you are doing
with your data, their data,

00:06:48.866 --> 00:06:51.096 A:middle
how you are using it, if you are
sharing it with third parties,

00:06:51.096 --> 00:06:53.166 A:middle
and this is all part
of transparency.

00:06:53.646 --> 00:06:55.886 A:middle
Making sure users
understand what's happening,

00:06:56.916 --> 00:06:58.696 A:middle
avoiding any user surprise.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.576 --> 00:07:05.066 A:middle
Now, one way to do this
is to be clear to users

00:07:05.066 --> 00:07:07.826 A:middle
about what data is being
collected or stored.

00:07:08.246 --> 00:07:10.196 A:middle
Give users a way to
inspect their data.

00:07:11.826 --> 00:07:14.606 A:middle
Also, when you're
collecting the data

00:07:14.606 --> 00:07:18.686 A:middle
or when you give users a
choice, it's at that point

00:07:18.686 --> 00:07:20.656 A:middle
that you really want to
give them the information

00:07:21.106 --> 00:07:22.206 A:middle
to make a good choice.

00:07:22.866 --> 00:07:25.016 A:middle
You can do that with
things like purpose strings.

00:07:25.596 --> 00:07:26.896 A:middle
When users are deciding
if they want

00:07:26.896 --> 00:07:28.866 A:middle
to grant you access to,
maybe, their photos.

00:07:30.256 --> 00:07:32.036 A:middle
Also, you want to
give users control.

00:07:32.876 --> 00:07:35.266 A:middle
Give them a way to
remake their decision.

00:07:35.426 --> 00:07:38.396 A:middle
If they decide later that
they want a different decision

00:07:38.396 --> 00:07:39.026 A:middle
for themselves.

00:07:39.866 --> 00:07:41.416 A:middle
Also, give them a chance

00:07:41.416 --> 00:07:44.566 A:middle
to reset information you
store or even delete.

00:07:44.936 --> 00:07:50.896 A:middle
Now I am going to talk about
some updates to our platforms

00:07:50.896 --> 00:07:52.746 A:middle
to improve user privacy.

00:07:52.746 --> 00:07:58.136 A:middle
I am going to talk about
changes in iOS, OS X,

00:07:58.136 --> 00:08:01.996 A:middle
and some of the foundational
bits for watchOS.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.136 --> 00:08:01.996 A:middle
and some of the foundational
bits for watchOS.

00:08:03.456 --> 00:08:06.576 A:middle
So first on iOS, we are going
to go back to last year.

00:08:07.526 --> 00:08:11.226 A:middle
Last year, we began using
privately assigned MAC addresses

00:08:11.556 --> 00:08:13.456 A:middle
for certain types
of Wi-Fi scans.

00:08:14.656 --> 00:08:17.336 A:middle
In iOS 9, we've increased
the number of scans

00:08:17.606 --> 00:08:19.766 A:middle
that use privately
assigned MAC addresses.

00:08:20.596 --> 00:08:24.296 A:middle
Note if your functionality
is based on working

00:08:24.296 --> 00:08:27.276 A:middle
with an external piece of
hardware, make sure to test

00:08:27.276 --> 00:08:30.016 A:middle
on iOS 9 because you cannot rely

00:08:30.016 --> 00:08:32.525 A:middle
on the MAC address
before authentication.

00:08:33.155 --> 00:08:40.025 A:middle
Now, simply put, we think
what apps are installed

00:08:40.025 --> 00:08:42.086 A:middle
on a user's device
are their business.

00:08:43.856 --> 00:08:48.436 A:middle
Users use their devices for lots
of things, and they have lots

00:08:48.436 --> 00:08:50.576 A:middle
of reasons for what kinds of
apps they want to install,

00:08:51.396 --> 00:08:54.346 A:middle
from health to financial
to home.

00:08:55.566 --> 00:08:58.316 A:middle
Now, what apps a
user has installed

00:08:58.716 --> 00:09:01.496 A:middle
and what can be gleaned from
them can be very sensitive.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.716 --> 00:09:01.496 A:middle
and what can be gleaned from
them can be very sensitive.

00:09:01.496 --> 00:09:06.066 A:middle
Trying to detect what
apps a user has installed,

00:09:06.686 --> 00:09:10.706 A:middle
either to identify them
or to glean information,

00:09:10.946 --> 00:09:13.616 A:middle
is contrary to the
iOS security model.

00:09:15.396 --> 00:09:19.846 A:middle
Ultimately, the iOS security
model the apps are isolated.

00:09:20.916 --> 00:09:23.536 A:middle
They live within their own
sandbox, protecting them

00:09:23.796 --> 00:09:25.236 A:middle
from other apps and processes.

00:09:25.696 --> 00:09:29.976 A:middle
Trying to determine what
apps a user has installed

00:09:29.976 --> 00:09:33.816 A:middle
in their device is a subversion
of the iOS security model.

00:09:36.006 --> 00:09:38.536 A:middle
Now, along those
lines, the behavior

00:09:38.536 --> 00:09:40.426 A:middle
of canOpenURL is
changing this year.

00:09:41.406 --> 00:09:47.376 A:middle
The purpose of canOpenURL
is to determine

00:09:47.426 --> 00:09:49.986 A:middle
if an app can open a
given URL resource.

00:09:51.006 --> 00:09:53.986 A:middle
This can be used to
support functionality,

00:09:54.066 --> 00:09:57.666 A:middle
like revealing new
things that a user can do

00:09:58.456 --> 00:10:02.886 A:middle
if an app is installed
in the device.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.456 --> 00:10:02.886 A:middle
if an app is installed
in the device.

00:10:04.266 --> 00:10:07.736 A:middle
One of the things you should be
moving towards are extensions

00:10:08.436 --> 00:10:09.616 A:middle
and universal links.

00:10:09.916 --> 00:10:12.026 A:middle
They both support a lot
of the same functionality,

00:10:12.116 --> 00:10:14.396 A:middle
and we encourage
you to move to that.

00:10:14.396 --> 00:10:18.046 A:middle
But if you continue to use URL
schemes when you build your app

00:10:18.046 --> 00:10:21.806 A:middle
for iOS 9 and you want to call
URL schemes, you will now need

00:10:21.896 --> 00:10:24.216 A:middle
to declare them in
your apps Info.plist.

00:10:24.216 --> 00:10:28.686 A:middle
There is new key,
LSApplicationQueriesSchemes,

00:10:29.376 --> 00:10:31.676 A:middle
and here you will
need to add the list

00:10:31.676 --> 00:10:35.426 A:middle
of schemes you want
to are canOpenURL on.

00:10:35.616 --> 00:10:40.706 A:middle
Now you don't need to change
handle calling canOpenURL.

00:10:41.086 --> 00:10:43.056 A:middle
The actual API is not changing.

00:10:43.816 --> 00:10:51.276 A:middle
But when you call canOpenURL, it
will check your app's Info.plist

00:10:51.276 --> 00:10:54.086 A:middle
and see if the scheme you
are calling is declared.

00:10:55.236 --> 00:10:58.876 A:middle
So let's say you declared it.

00:10:59.036 --> 00:11:05.246 A:middle
When you call canOpenURL on
that scheme, it will return true

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.036 --> 00:11:05.246 A:middle
When you call canOpenURL on
that scheme, it will return true

00:11:05.696 --> 00:11:08.286 A:middle
if there is an app installed
that does support the scheme.

00:11:09.316 --> 00:11:15.046 A:middle
Now, if there is not an app
installed, it will return no.

00:11:16.226 --> 00:11:18.746 A:middle
So what if you didn't
declare the URL scheme.

00:11:19.066 --> 00:11:22.136 A:middle
No matter if there is an
app or there is not an app

00:11:22.346 --> 00:11:25.086 A:middle
that supports it, you will
always be returned no.

00:11:25.866 --> 00:11:35.376 A:middle
So for apps that are linked
before iOS 9 and are running

00:11:35.456 --> 00:11:39.566 A:middle
on iOS 9, they will be given
50 distinct URL schemes.

00:11:41.116 --> 00:11:43.406 A:middle
When you call the
subsequent 51st scheme,

00:11:43.436 --> 00:11:45.506 A:middle
you will be returned
the value no.

00:11:46.676 --> 00:11:49.676 A:middle
These 50 URL schemes
are not restarted

00:11:49.706 --> 00:11:54.276 A:middle
when the user restarts
the device.

00:11:54.416 --> 00:11:55.946 A:middle
One alternate that I mention

00:11:56.196 --> 00:11:58.256 A:middle
that is new this year
is universal links.

00:11:58.886 --> 00:12:01.226 A:middle
The great thing about
universal links is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.886 --> 00:12:01.226 A:middle
The great thing about
universal links is

00:12:01.226 --> 00:12:03.036 A:middle
if the user has the
app installed,

00:12:03.206 --> 00:12:04.186 A:middle
the link will open there.

00:12:05.016 --> 00:12:06.756 A:middle
But then there's
also a fallback.

00:12:07.306 --> 00:12:09.696 A:middle
If the app is not
installed, it will open

00:12:09.696 --> 00:12:11.036 A:middle
in the webpage of that app.

00:12:12.356 --> 00:12:15.326 A:middle
There's also changes
coming to sysctl this year.

00:12:16.036 --> 00:12:20.336 A:middle
Sysctl is a low-level
API used for querying

00:12:20.596 --> 00:12:22.236 A:middle
and setting system information.

00:12:23.356 --> 00:12:28.126 A:middle
It's designed to allow processes
with appropriate privileges

00:12:29.756 --> 00:12:34.596 A:middle
to view information,
but as I said before,

00:12:34.956 --> 00:12:38.766 A:middle
apps on iOS are not privileged
to see other apps' information.

00:12:39.576 --> 00:12:43.136 A:middle
So there is a change to
the iOS sandbox this year,

00:12:43.726 --> 00:12:51.356 A:middle
and now there will no longer
be able to call kern.proc,

00:12:51.776 --> 00:12:56.086 A:middle
kern.procargs, kern.procargs2
and see data

00:12:56.546 --> 00:12:58.766 A:middle
from any other processes
then one's self.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.456 --> 00:13:05.816 A:middle
This year, on both iOS and OS X,

00:13:06.056 --> 00:13:09.336 A:middle
we will have a new extension
point for content filtering.

00:13:10.476 --> 00:13:14.206 A:middle
Your block list -- the block
list will apply to both Safari

00:13:15.026 --> 00:13:18.546 A:middle
and any apps that use
SafariViewController.

00:13:20.496 --> 00:13:23.176 A:middle
You should go and test
with popular extensions

00:13:23.176 --> 00:13:24.936 A:middle
to understand the
impact this will have

00:13:25.216 --> 00:13:27.726 A:middle
on your application
or your webpage.

00:13:30.276 --> 00:13:33.746 A:middle
You should always be prepared
for part of your content to fail

00:13:33.746 --> 00:13:35.896 A:middle
to load and handle
it appropriately.

00:13:37.996 --> 00:13:43.416 A:middle
Next, on OS X, we are
changing the cookie policy.

00:13:44.116 --> 00:13:48.076 A:middle
As of Yosemite, where
cookies could be shared

00:13:48.076 --> 00:13:50.296 A:middle
across all applications
and processes,

00:13:51.076 --> 00:13:53.896 A:middle
now, cookies are local.

00:13:54.706 --> 00:13:56.216 A:middle
They are local to
a single process,

00:13:56.216 --> 00:13:57.386 A:middle
and they are not shared.

00:13:58.166 --> 00:14:02.406 A:middle
Note: If you have shipped your
application in the App Store,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.166 --> 00:14:02.406 A:middle
Note: If you have shipped your
application in the App Store,

00:14:03.116 --> 00:14:04.306 A:middle
there's no change for you.

00:14:05.326 --> 00:14:06.526 A:middle
You are already in this state.

00:14:07.546 --> 00:14:10.726 A:middle
If you use Web Clips
or Dashboard widgets,

00:14:10.936 --> 00:14:14.286 A:middle
please test on OS X El Capitan.

00:14:15.306 --> 00:14:20.486 A:middle
Now I am going to talk a little
bit about our newest platform.

00:14:21.946 --> 00:14:27.396 A:middle
Over many years, we've seen
iOS and OS X evolve and grow.

00:14:28.376 --> 00:14:32.306 A:middle
It's that experience that drove
us to focus on making sure

00:14:32.306 --> 00:14:35.366 A:middle
from the start that we laid
the appropriate groundwork

00:14:36.126 --> 00:14:40.396 A:middle
for privacy and security
on this newest platform.

00:14:40.396 --> 00:14:42.236 A:middle
We leveraged existing
technologies,

00:14:42.486 --> 00:14:45.346 A:middle
like data protection,
our just-in-time alerts,

00:14:46.216 --> 00:14:49.216 A:middle
and we think that these
devices work closely together.

00:14:50.526 --> 00:14:52.436 A:middle
The user has a single
relationship

00:14:52.626 --> 00:14:55.616 A:middle
with the two devices,
and so that's why lots

00:14:55.616 --> 00:14:56.946 A:middle
of the settings are
shared across.

00:14:58.126 --> 00:15:00.966 A:middle
This also includes
your privacy settings

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.126 --> 00:15:00.966 A:middle
This also includes
your privacy settings

00:15:01.976 --> 00:15:03.386 A:middle
for native WatchKit apps.

00:15:03.846 --> 00:15:07.596 A:middle
So whether the user is
interacting with your app

00:15:07.596 --> 00:15:12.206 A:middle
on iOS, as a Glance, as a
third-party complication,

00:15:13.076 --> 00:15:15.826 A:middle
the same privacy settings apply.

00:15:17.036 --> 00:15:19.686 A:middle
We believe that the user has
a single trust relationship

00:15:19.686 --> 00:15:21.076 A:middle
with you as an app developer.

00:15:22.076 --> 00:15:23.876 A:middle
They don't think
differently about, oh,

00:15:23.876 --> 00:15:26.616 A:middle
can they access my
photos on the Glance.

00:15:26.956 --> 00:15:28.676 A:middle
They have one trust
relationship.

00:15:29.146 --> 00:15:31.706 A:middle
They trust you to access
that data and protect

00:15:31.706 --> 00:15:33.496 A:middle
that data or they don't.

00:15:35.876 --> 00:15:39.486 A:middle
So we think that this
is important to focus

00:15:39.936 --> 00:15:43.336 A:middle
on making sure that you
embed and think about privacy

00:15:43.336 --> 00:15:47.386 A:middle
from the beginning because your
Glance may become the place

00:15:47.386 --> 00:15:52.976 A:middle
where users interact with
your app the most often.

00:15:53.036 --> 00:15:56.996 A:middle
Also, in watchOS 2,
Keychain is now on Watch.

00:15:57.286 --> 00:16:01.346 A:middle
Now I am going to hand it
over to Jason, who is going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.286 --> 00:16:01.346 A:middle
Now I am going to hand it
over to Jason, who is going

00:16:01.346 --> 00:16:03.396 A:middle
to talk more about how
to choose an identifier.

00:16:04.516 --> 00:16:10.546 A:middle
[ Applause ]

00:16:11.046 --> 00:16:11.626 A:middle
&gt;&gt; JASON NOVAK: Thanks, Katie.

00:16:11.716 --> 00:16:13.356 A:middle
Now I am going to
talk a little bit

00:16:13.356 --> 00:16:15.856 A:middle
about identifiers
on iOS and watchOS.

00:16:16.176 --> 00:16:18.186 A:middle
This is a topic that
we've covered before

00:16:18.186 --> 00:16:19.636 A:middle
in previous presentations,

00:16:19.636 --> 00:16:22.716 A:middle
and you should review
last year's WWDC talk

00:16:22.746 --> 00:16:24.296 A:middle
to get a more in-depth
look into.

00:16:24.296 --> 00:16:26.596 A:middle
But I thought it was
important to go over some

00:16:26.596 --> 00:16:27.646 A:middle
of the lessons we learned

00:16:27.726 --> 00:16:30.906 A:middle
from iOS before discussing
how we brought identifiers

00:16:30.906 --> 00:16:31.686 A:middle
to watchOS.

00:16:33.116 --> 00:16:34.506 A:middle
So identifiers are powerful.

00:16:34.916 --> 00:16:36.916 A:middle
They are powerful because
in and of themselves,

00:16:36.916 --> 00:16:39.536 A:middle
they can reveal something about
a user if you use something

00:16:39.536 --> 00:16:41.876 A:middle
like a user's name,
phone number,

00:16:41.996 --> 00:16:43.876 A:middle
or email address
to identify a user.

00:16:45.076 --> 00:16:47.336 A:middle
You can build a more
privacy-friendly identifier

00:16:47.476 --> 00:16:51.456 A:middle
by using things like randomly
generated numbers or a UUID

00:16:51.456 --> 00:16:53.536 A:middle
if you need a structured
random number.

00:16:54.506 --> 00:16:57.906 A:middle
While a random number or UUID
doesn't identify a person,

00:16:58.106 --> 00:16:59.666 A:middle
depending what you
log against it,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.236 --> 00:17:01.996 A:middle
how frequently you
rotate identifiers,

00:17:02.036 --> 00:17:03.676 A:middle
and what controls a user has,

00:17:03.846 --> 00:17:06.326 A:middle
over time the identifier
can be de-anonymized

00:17:06.326 --> 00:17:08.955 A:middle
as you can log a lot of
different kinds of data

00:17:09.326 --> 00:17:12.496 A:middle
that may be identifying to a
person, like app activities,

00:17:13.026 --> 00:17:16.636 A:middle
search queries, messages,
or location,

00:17:16.636 --> 00:17:19.096 A:middle
depending upon what
your app is doing.

00:17:20.046 --> 00:17:22.536 A:middle
And what this means is that
all identifiers carry risk.

00:17:23.046 --> 00:17:24.996 A:middle
Even though an identifier
itself may be anonymous,

00:17:25.425 --> 00:17:27.056 A:middle
if the data you hold
against it isn't,

00:17:27.616 --> 00:17:30.116 A:middle
then if there is a data
breach, you still have to deal

00:17:30.116 --> 00:17:31.706 A:middle
with a harm to customers'
privacy,

00:17:31.706 --> 00:17:34.096 A:middle
and the ensuing reputational
damage

00:17:34.406 --> 00:17:35.836 A:middle
as you'll lose customer trust.

00:17:36.506 --> 00:17:38.836 A:middle
When I say data breach, that may
cause you to think about hackers

00:17:38.836 --> 00:17:42.206 A:middle
or other nefarious forces,
but it may be as simple

00:17:42.206 --> 00:17:45.036 A:middle
as an unencrypted laptop
stolen out of the back of a car

00:17:45.206 --> 00:17:47.376 A:middle
or backup tapes falling
off the back of a truck.

00:17:48.716 --> 00:17:51.676 A:middle
As a result of the power
identifiers, Apple spent a lot

00:17:51.676 --> 00:17:53.656 A:middle
of time thinking about
how identifiers operate

00:17:54.006 --> 00:17:55.096 A:middle
and some best practices.

00:17:56.566 --> 00:17:59.156 A:middle
So first, before you
use an identifier,

00:17:59.156 --> 00:18:01.286 A:middle
ask yourself: Do you need one?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.156 --> 00:18:01.286 A:middle
ask yourself: Do you need one?

00:18:01.706 --> 00:18:03.886 A:middle
Can you structure your
data collection in some way

00:18:04.086 --> 00:18:07.296 A:middle
that you have a database
or dictionary of values

00:18:07.296 --> 00:18:11.526 A:middle
that you are storing server side
that the client sends up a value

00:18:11.986 --> 00:18:15.726 A:middle
to your server and then you just
increment a counter server side?

00:18:16.336 --> 00:18:18.886 A:middle
If you determine that you
really do need an identifier,

00:18:19.236 --> 00:18:20.796 A:middle
think about what
you are identifying

00:18:20.986 --> 00:18:22.886 A:middle
and for how long you
need to identify it for.

00:18:23.636 --> 00:18:25.706 A:middle
Are you identifying a
session and just trying

00:18:25.706 --> 00:18:29.196 A:middle
to correlate activities across
a single launch of your app?

00:18:29.316 --> 00:18:31.806 A:middle
Are you trying -- and can you
rotate the identifier every time

00:18:31.806 --> 00:18:33.096 A:middle
the app opens or closes?

00:18:33.936 --> 00:18:36.276 A:middle
Are you looking at temporal
activity and you need

00:18:36.276 --> 00:18:39.836 A:middle
to rotate the identifier
every 5, 10, 15 minutes?

00:18:40.866 --> 00:18:42.646 A:middle
We know that rotating
identifiers has a lot

00:18:42.646 --> 00:18:46.316 A:middle
of privacy-preserving power
as it prevents the correlation

00:18:46.316 --> 00:18:47.886 A:middle
of data over time,
and we will walk

00:18:47.886 --> 00:18:50.776 A:middle
through an example
of that later.

00:18:50.866 --> 00:18:54.296 A:middle
If you are identifying a user,
how are you making it clear

00:18:54.296 --> 00:18:56.656 A:middle
to the user that you are
identifying them as opposed

00:18:56.656 --> 00:18:58.366 A:middle
to an installation on device?

00:18:59.196 --> 00:19:02.126 A:middle
Are you having them create
an account with your service?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.196 --> 00:19:02.126 A:middle
Are you having them create
an account with your service?

00:19:02.256 --> 00:19:03.616 A:middle
Are you having them log in?

00:19:04.216 --> 00:19:06.986 A:middle
Are you using words in the UI
that make it very clear to them

00:19:06.986 --> 00:19:08.806 A:middle
that this is about
their experience?

00:19:09.876 --> 00:19:12.026 A:middle
And after you thought about
how you are explaining this

00:19:12.026 --> 00:19:14.166 A:middle
to users, have you
really thought

00:19:14.166 --> 00:19:16.786 A:middle
about the risk you are
taking on in collecting data

00:19:16.786 --> 00:19:19.556 A:middle
that is associated with
an individual's identity?

00:19:21.506 --> 00:19:24.176 A:middle
Finally, if you are
trying to collect data

00:19:24.336 --> 00:19:26.926 A:middle
about an installation of
your app on a device divorced

00:19:26.926 --> 00:19:28.776 A:middle
from these other notions
of users or sessions,

00:19:29.356 --> 00:19:31.446 A:middle
have you designed your
metrics to support the cases

00:19:31.446 --> 00:19:34.086 A:middle
that we know occur with
a user and their device,

00:19:34.146 --> 00:19:37.016 A:middle
such as uninstalling an
app or installing an app

00:19:37.016 --> 00:19:40.706 A:middle
on a secondary device or backing
up and restoring across devices

00:19:41.116 --> 00:19:45.546 A:middle
and how the privacy preservation
of a user that occurs there

00:19:45.546 --> 00:19:47.856 A:middle
in terms of the identifiers
being reset

00:19:47.856 --> 00:19:49.966 A:middle
or persisting affect
your metrics?

00:19:52.506 --> 00:19:55.066 A:middle
Finally, you should consider
how you scope your identifiers.

00:19:55.396 --> 00:19:57.016 A:middle
It's easy to construct a world

00:19:57.016 --> 00:19:59.616 A:middle
where a persistent
identifier is used to track all

00:19:59.616 --> 00:20:01.856 A:middle
of the user's activities
across properties,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.616 --> 00:20:01.856 A:middle
of the user's activities
across properties,

00:20:02.506 --> 00:20:04.776 A:middle
but then a user's
privacy is minimized.

00:20:05.066 --> 00:20:07.026 A:middle
Lots of data is collected
against a single identity

00:20:07.026 --> 00:20:09.636 A:middle
that may never change that
has different contexts,

00:20:09.636 --> 00:20:12.446 A:middle
different meanings in
different contexts.

00:20:12.896 --> 00:20:15.676 A:middle
Moreover, users may not want to
be tracked across all properties

00:20:15.676 --> 00:20:16.796 A:middle
under a single identity.

00:20:17.286 --> 00:20:18.946 A:middle
Contemplate scoping
your identifiers

00:20:18.946 --> 00:20:20.656 A:middle
so that you have
different identifiers

00:20:20.656 --> 00:20:23.346 A:middle
for different purposes with
different data associated

00:20:23.346 --> 00:20:25.086 A:middle
with them with different
retention periods.

00:20:26.036 --> 00:20:28.376 A:middle
Now I am going to walk
through an example

00:20:28.376 --> 00:20:31.686 A:middle
of a specific architecture
of identifiers

00:20:31.686 --> 00:20:32.986 A:middle
that increases your privacy

00:20:33.046 --> 00:20:34.596 A:middle
and decrease the
risk you might face.

00:20:35.016 --> 00:20:37.976 A:middle
It's easy to design a search
service that logs all data

00:20:37.976 --> 00:20:40.716 A:middle
to a user identifier, but
then if this data is breached,

00:20:41.126 --> 00:20:43.116 A:middle
then even if the
identifier is anonymous,

00:20:43.766 --> 00:20:45.776 A:middle
it allows for the ready
re-identification of a user,

00:20:46.076 --> 00:20:48.336 A:middle
as among other things,
users search for themselves,

00:20:48.836 --> 00:20:50.236 A:middle
and this scenario may result

00:20:50.236 --> 00:20:51.836 A:middle
in a significant
loss of user trust.

00:20:52.566 --> 00:20:55.316 A:middle
For example, in this case,
the identifier is anonymous.

00:20:55.316 --> 00:20:58.886 A:middle
It's 123. But we can see a
fairly clear set of facts.

00:20:58.886 --> 00:21:02.226 A:middle
User 123 is thinking about
getting engaged -- probably --

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.886 --> 00:21:02.226 A:middle
User 123 is thinking about
getting engaged -- probably --

00:21:02.586 --> 00:21:03.816 A:middle
probably this past Saturday.

00:21:03.816 --> 00:21:07.306 A:middle
They are probably not from San
Francisco as they are looking

00:21:07.306 --> 00:21:08.626 A:middle
for a flight from San Francisco.

00:21:08.626 --> 00:21:10.586 A:middle
They are probably going to WWDC.

00:21:10.586 --> 00:21:14.056 A:middle
And they may be John Appleseed,

00:21:14.246 --> 00:21:15.946 A:middle
they may be interested
in John Appleseed.

00:21:16.206 --> 00:21:16.796 A:middle
We don't know.

00:21:16.796 --> 00:21:19.136 A:middle
But given more data, we
could probably figure

00:21:19.136 --> 00:21:21.226 A:middle
out if this was a
vanity search or not.

00:21:21.646 --> 00:21:25.156 A:middle
On the other hand, if your
search service uses rotating

00:21:25.156 --> 00:21:28.496 A:middle
identifiers, then even if
data is released, the exposure

00:21:28.496 --> 00:21:30.426 A:middle
for a given user is minimized

00:21:30.426 --> 00:21:32.396 A:middle
as the identifier
rotates over time.

00:21:32.876 --> 00:21:35.826 A:middle
In this case, if the identifier
rotated every 15 minutes,

00:21:36.296 --> 00:21:39.236 A:middle
we can't necessarily say
that user 123 is the same

00:21:39.236 --> 00:21:42.076 A:middle
as 456, is the same as 789.

00:21:43.206 --> 00:21:47.036 A:middle
So now I am going to talk
about persistent identifiers

00:21:47.036 --> 00:21:49.436 A:middle
for a moment, and because of
the risk that they present

00:21:49.436 --> 00:21:51.166 A:middle
to user privacy in
terms of the ability

00:21:51.166 --> 00:21:54.566 A:middle
to permit long-term tracking of
users, they are not available

00:21:54.566 --> 00:21:56.806 A:middle
on iOS and watchOS by design.

00:21:57.536 --> 00:22:00.706 A:middle
Apple tries to surprise
and delight its customers,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.536 --> 00:22:00.706 A:middle
Apple tries to surprise
and delight its customers,

00:22:00.906 --> 00:22:02.736 A:middle
and customers aren't delighted
when they are being tracked

00:22:02.736 --> 00:22:03.496 A:middle
without their knowledge.

00:22:04.026 --> 00:22:05.846 A:middle
It's not in line with
users' expectations

00:22:06.006 --> 00:22:08.636 A:middle
that they are being tracked by
an app under the same identity,

00:22:09.216 --> 00:22:11.586 A:middle
even after they have uninstalled
the app and reinstalled it

00:22:11.586 --> 00:22:13.146 A:middle
or if they've done
something more destructive

00:22:13.746 --> 00:22:14.766 A:middle
like erase their device.

00:22:16.556 --> 00:22:19.316 A:middle
And finally, because persistent
identifiers are persistent,

00:22:19.796 --> 00:22:21.356 A:middle
users don't have
control over them,

00:22:21.956 --> 00:22:24.566 A:middle
and as Katie was saying
earlier, we think of control

00:22:24.566 --> 00:22:26.586 A:middle
as a very important
part for user privacy.

00:22:27.206 --> 00:22:31.836 A:middle
To try and balance the needs
of developers to identify data

00:22:32.516 --> 00:22:35.606 A:middle
and with the privacy of
users, we've developed a set

00:22:35.606 --> 00:22:37.356 A:middle
of purpose scoped
identifiers on iOS

00:22:37.896 --> 00:22:40.646 A:middle
so that developers can collect
the data they need and use it

00:22:40.646 --> 00:22:42.896 A:middle
in the analytics and
advertising context while

00:22:42.896 --> 00:22:46.586 A:middle
at the same time users have
control to reset the identifiers

00:22:46.816 --> 00:22:49.696 A:middle
and break the relationship
between their current activities

00:22:49.916 --> 00:22:52.846 A:middle
and whatever data has been
historically collected

00:22:52.846 --> 00:22:53.306 A:middle
about them.

00:22:53.886 --> 00:22:55.866 A:middle
At the app level, we enable this

00:22:56.086 --> 00:22:59.076 A:middle
by resetting the vendor
identifier or the IDFV

00:22:59.506 --> 00:23:03.666 A:middle
after a user has uninstalled
all apps from a given team ID.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.506 --> 00:23:03.666 A:middle
after a user has uninstalled
all apps from a given team ID.

00:23:04.286 --> 00:23:06.806 A:middle
And on the advertising context,
we give users the ability

00:23:06.806 --> 00:23:10.186 A:middle
to reset their advertising
identifier by going to Settings,

00:23:10.266 --> 00:23:11.756 A:middle
Privacy, Advertising,

00:23:12.126 --> 00:23:14.516 A:middle
and tapping the Reset
Advertisement Identifier.

00:23:15.056 --> 00:23:18.616 A:middle
As a result a user can reset
the identifier on their device

00:23:18.886 --> 00:23:21.836 A:middle
without erasing all data on
it and they break the link

00:23:21.836 --> 00:23:25.336 A:middle
with whatever data has been
historically collected.

00:23:25.746 --> 00:23:29.076 A:middle
With watchOS 1, the vendor ID

00:23:29.076 --> 00:23:32.236 A:middle
and the advertising ID
were actually on the iPhone

00:23:32.866 --> 00:23:35.166 A:middle
as the WatchKit extension
itself ran on the iPhone.

00:23:35.786 --> 00:23:39.086 A:middle
With watchOS 2, you will
need to sync the vendor ID

00:23:39.086 --> 00:23:41.136 A:middle
and advertising ID
from the iPhone

00:23:41.566 --> 00:23:42.966 A:middle
to the Watch and use it there.

00:23:43.036 --> 00:23:45.836 A:middle
And you will need to
maintain the vendor ID

00:23:45.836 --> 00:23:47.106 A:middle
and advertising ID up-to-date.

00:23:47.326 --> 00:23:50.656 A:middle
So now I am going to go
over some best practices.

00:23:51.786 --> 00:23:53.386 A:middle
Determine if you need
an identifier at all.

00:23:53.936 --> 00:23:56.576 A:middle
Can you just send up a value and
increment a server-side counter?

00:23:57.126 --> 00:24:00.316 A:middle
Collecting data against an
identifier brings responsibility

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.126 --> 00:24:00.316 A:middle
Collecting data against an
identifier brings responsibility

00:24:00.376 --> 00:24:01.316 A:middle
as it brings risk.

00:24:01.486 --> 00:24:03.886 A:middle
And if you can collect just a
value in increment encounter,

00:24:03.886 --> 00:24:06.126 A:middle
you have significantly
increased user privacy

00:24:06.326 --> 00:24:08.016 A:middle
and derisked your
data collection.

00:24:09.326 --> 00:24:11.486 A:middle
Use a properly purposed
scope identifier.

00:24:11.986 --> 00:24:14.946 A:middle
Determine if you need to
identify a session, a user,

00:24:15.306 --> 00:24:18.046 A:middle
or a device and use an
identifier of the proper scope

00:24:18.106 --> 00:24:19.186 A:middle
for your app's purpose.

00:24:20.976 --> 00:24:23.826 A:middle
iOS and watchOS offer
identifiers for you,

00:24:23.996 --> 00:24:25.536 A:middle
so use them instead
of building your own.

00:24:26.326 --> 00:24:28.046 A:middle
Trying to build a
persistent identifier

00:24:28.046 --> 00:24:31.446 A:middle
that survives device reset
and other destructive actions

00:24:31.446 --> 00:24:33.256 A:middle
like removing your app is bad

00:24:33.256 --> 00:24:35.336 A:middle
for user privacy and
bad for your app.

00:24:35.816 --> 00:24:39.526 A:middle
If you are using private APIs to
build a persistent identifier,

00:24:39.746 --> 00:24:41.626 A:middle
you are in violation
of the App Store terms,

00:24:41.746 --> 00:24:43.006 A:middle
and there will be consequences.

00:24:44.546 --> 00:24:47.926 A:middle
Finally, follow the
guidelines for the identifiers

00:24:47.926 --> 00:24:49.196 A:middle
that are provided, and one

00:24:49.196 --> 00:24:52.326 A:middle
of the most important
guidelines you can follow is

00:24:52.326 --> 00:24:55.146 A:middle
to check the value of Limit Ad
Tracking before you call the

00:24:55.146 --> 00:24:58.866 A:middle
advertisingIdentifier and to
always get the current value

00:24:58.866 --> 00:25:00.066 A:middle
of the advertisingIdentifier.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.866 --> 00:25:00.066 A:middle
of the advertisingIdentifier.

00:25:01.046 --> 00:25:03.586 A:middle
A user can reset the value
of the advertisingIdentifier

00:25:03.586 --> 00:25:07.296 A:middle
at any time, in addition
to enabling ad tracking.

00:25:07.536 --> 00:25:10.596 A:middle
Which also causes a reset of
the advertisingIdentifier.

00:25:11.246 --> 00:25:12.856 A:middle
Because of this, you
should always be sure

00:25:12.856 --> 00:25:17.176 A:middle
that you have the current value,
and you should never cache it.

00:25:17.696 --> 00:25:19.426 A:middle
Finally, we are going to talk
a little bit about reporting.

00:25:19.956 --> 00:25:22.386 A:middle
We know that many of you
have reporting obligations

00:25:22.636 --> 00:25:24.546 A:middle
to your partners, but
we think it's important

00:25:24.546 --> 00:25:27.246 A:middle
to maintain user privacy when
reporting to third parties.

00:25:27.996 --> 00:25:29.796 A:middle
We thought a lot about
how to report on users,

00:25:30.136 --> 00:25:30.956 A:middle
and you can see a lot

00:25:30.956 --> 00:25:33.346 A:middle
of our learnings
embedded in App Analytics.

00:25:33.736 --> 00:25:36.856 A:middle
And there are sort of
three big ideas here

00:25:36.856 --> 00:25:38.286 A:middle
that you can implement
when reporting.

00:25:38.796 --> 00:25:40.906 A:middle
Report insights about
your users.

00:25:40.906 --> 00:25:42.176 A:middle
Report aggregates.

00:25:42.526 --> 00:25:43.366 A:middle
And set a threshold.

00:25:44.176 --> 00:25:45.706 A:middle
What do I mean by
report insights?

00:25:46.516 --> 00:25:49.736 A:middle
Instead of if a partner
wants to know

00:25:50.296 --> 00:25:54.006 A:middle
who uses your app frequently
and say give us all data

00:25:54.006 --> 00:25:56.696 A:middle
about your app's usage so
that they can calculate that,

00:25:57.166 --> 00:26:00.686 A:middle
instead, agree upon a
definition of common usage,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.166 --> 00:26:00.686 A:middle
instead, agree upon a
definition of common usage,

00:26:01.146 --> 00:26:03.906 A:middle
run that calculation,
and on your data,

00:26:04.406 --> 00:26:06.376 A:middle
and provide the results of
that calculation instead

00:26:06.376 --> 00:26:07.386 A:middle
of giving over the raw data.

00:26:08.566 --> 00:26:11.696 A:middle
The next step to protecting user
privacy would be to aggregate.

00:26:12.086 --> 00:26:14.776 A:middle
Instead of saying which
users are frequent users,

00:26:15.066 --> 00:26:17.296 A:middle
say how many frequent users
you have, what percentage

00:26:17.296 --> 00:26:18.896 A:middle
of your user base
are frequent users.

00:26:19.636 --> 00:26:22.186 A:middle
And finally, require
thresholds in reporting.

00:26:22.736 --> 00:26:25.036 A:middle
If you are going to report
that you have one frequent user

00:26:25.316 --> 00:26:27.396 A:middle
and you have one user of
your app and you are going

00:26:27.396 --> 00:26:29.396 A:middle
to provide some information
about them

00:26:29.396 --> 00:26:31.496 A:middle
from an audience
standpoint, like zip code,

00:26:32.066 --> 00:26:34.026 A:middle
you have effectively
de-anonymized your user.

00:26:34.196 --> 00:26:36.986 A:middle
Before you provide
personal information be sure

00:26:36.986 --> 00:26:39.266 A:middle
to have a threshold, so that
you're not de-anonymizing a

00:26:39.266 --> 00:26:40.526 A:middle
person, and they're in a group.

00:26:40.526 --> 00:26:44.816 A:middle
I am now going to explain some
best practices on how to prompt

00:26:44.816 --> 00:26:46.616 A:middle
for user data and
then extend those

00:26:46.616 --> 00:26:51.896 A:middle
to the Watch Just a refresher,
on iOS and OS X, when you want

00:26:51.896 --> 00:26:53.416 A:middle
to access data classes,

00:26:53.846 --> 00:26:56.306 A:middle
the operating system doesn't
give access to that data

00:26:56.726 --> 00:26:59.386 A:middle
until the user makes a
decision as to whether or not

00:26:59.886 --> 00:27:01.496 A:middle
to give your app
access to that data.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.886 --> 00:27:01.496 A:middle
to give your app
access to that data.

00:27:02.836 --> 00:27:06.426 A:middle
So that it's clear to users why
an app needs this data and so

00:27:06.426 --> 00:27:08.806 A:middle
that you can be transparent
with users about your collection

00:27:08.806 --> 00:27:11.526 A:middle
and use, we provide you
with a place in the prompt

00:27:11.526 --> 00:27:12.776 A:middle
where you can provide
an explanation.

00:27:13.286 --> 00:27:14.846 A:middle
This is called a purpose string.

00:27:15.196 --> 00:27:17.546 A:middle
You can set them for the
various protected data classes

00:27:17.616 --> 00:27:19.956 A:middle
in your apps and
Info.plist, and we think

00:27:19.956 --> 00:27:23.456 A:middle
that if users understand why
you are asking for their data,

00:27:23.716 --> 00:27:26.146 A:middle
they are more likely to make the
choice that's right for them.

00:27:27.216 --> 00:27:31.896 A:middle
As Katie said earlier, given the
limited real estate available

00:27:31.896 --> 00:27:35.126 A:middle
on the watch and our perspective
on transparency and consent

00:27:35.126 --> 00:27:37.286 A:middle
to control, a lot of
thought went into how apps

00:27:37.286 --> 00:27:38.766 A:middle
on the watch could
access user data.

00:27:39.866 --> 00:27:43.116 A:middle
First, just like
on iOS and OS X,

00:27:43.606 --> 00:27:46.296 A:middle
apps on watchOS can't
access a user's data

00:27:46.586 --> 00:27:48.006 A:middle
until the user has
approved that.

00:27:49.546 --> 00:27:53.506 A:middle
Unlike on iOS or OS X, on
watchOS, a user can't accept

00:27:53.506 --> 00:27:56.546 A:middle
or deny a just-in-time
prompt on the device itself.

00:27:57.246 --> 00:27:59.016 A:middle
Rather, they are
directed to their iPhone.

00:27:59.376 --> 00:28:03.366 A:middle
As Katie was saying, we think of
the iPhone and the paired Watch

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.376 --> 00:28:03.366 A:middle
As Katie was saying, we think of
the iPhone and the paired Watch

00:28:03.736 --> 00:28:06.876 A:middle
as a tightly coupled experience,
and the privacy decisions

00:28:06.876 --> 00:28:09.596 A:middle
that users make on one platform
affects them on the other.

00:28:10.206 --> 00:28:11.956 A:middle
Given the limited real
estate on the watch,

00:28:12.086 --> 00:28:14.066 A:middle
we thought that it made more
sense to present the choice

00:28:14.106 --> 00:28:17.676 A:middle
on the iPhone, where the
user will see the prompt

00:28:17.676 --> 00:28:20.266 A:middle
on the larger screen,
including the purpose string,

00:28:20.266 --> 00:28:22.426 A:middle
explaining why your iPhone app

00:28:22.426 --> 00:28:24.566 A:middle
and Watch app want
access to that data.

00:28:25.716 --> 00:28:27.906 A:middle
Unlike in iOS where you
get a yes or no answer,

00:28:28.356 --> 00:28:30.256 A:middle
you can prompt, get dismissed,

00:28:30.366 --> 00:28:32.676 A:middle
or otherwise not have the user
make a choice when you prompt

00:28:32.676 --> 00:28:35.796 A:middle
from the watch, and as a result
be left in an unset state.

00:28:36.526 --> 00:28:39.516 A:middle
In this unset state, you will
be able to prompt again later.

00:28:40.296 --> 00:28:43.126 A:middle
Just to give a concrete
example of that unset state,

00:28:43.546 --> 00:28:46.296 A:middle
a user could go on a run with
their Watch but not their Phone,

00:28:46.906 --> 00:28:48.186 A:middle
launch your app on the Watch.

00:28:48.946 --> 00:28:49.966 A:middle
Your app could prompt.

00:28:50.476 --> 00:28:51.666 A:middle
The prompt would be dismissed.

00:28:52.016 --> 00:28:53.856 A:middle
And your app would
have to continue to run

00:28:54.136 --> 00:28:55.336 A:middle
without access to that data.

00:28:56.326 --> 00:29:01.836 A:middle
But at a later point in time,
your app could prompt again.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.326 --> 00:29:01.836 A:middle
But at a later point in time,
your app could prompt again.

00:29:02.376 --> 00:29:04.656 A:middle
Now, as Katie said
earlier, the settings,

00:29:04.656 --> 00:29:06.536 A:middle
including your privacy settings,

00:29:07.066 --> 00:29:09.196 A:middle
are shared between the
Watch and the iPhone.

00:29:10.116 --> 00:29:11.906 A:middle
And we think that users
have a single relationship

00:29:11.906 --> 00:29:14.736 A:middle
with your app, a single
relationship with the iPhone

00:29:14.736 --> 00:29:16.296 A:middle
and the Watch, so as a result,

00:29:16.296 --> 00:29:17.986 A:middle
we've combined these
single relationships

00:29:17.986 --> 00:29:20.296 A:middle
into a single relationship
of settings for the iPhone,

00:29:20.296 --> 00:29:21.196 A:middle
the watch, and your app.

00:29:21.196 --> 00:29:23.336 A:middle
And this is something

00:29:23.336 --> 00:29:24.706 A:middle
that exists elsewhere
in our platforms.

00:29:24.886 --> 00:29:27.926 A:middle
On iOS, if a user makes a
privacy decision for your app,

00:29:28.306 --> 00:29:30.506 A:middle
then all facets of your app
have access to that data.

00:29:31.156 --> 00:29:32.666 A:middle
If you prompt for a
location in your app,

00:29:33.166 --> 00:29:36.906 A:middle
your extensions can use
it, and if the first time

00:29:36.906 --> 00:29:39.646 A:middle
that a user encounters
a prompt for your app is

00:29:39.646 --> 00:29:42.646 A:middle
in the extension, your app will
also have access to that data.

00:29:42.646 --> 00:29:48.916 A:middle
On the Watch, the decisions that
a user makes carries over to all

00:29:48.986 --> 00:29:52.646 A:middle
of your Watch app, the
app itself, your Glance,

00:29:53.196 --> 00:29:54.156 A:middle
and your Complication.

00:29:55.216 --> 00:29:57.636 A:middle
When a user gives permission
for one aspect of your app,

00:29:57.636 --> 00:30:01.436 A:middle
they give permission for
all aspects of your app.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.636 --> 00:30:01.436 A:middle
they give permission for
all aspects of your app.

00:30:01.636 --> 00:30:04.166 A:middle
Now that you know what data is
available on iOS, OS X, watchOS,

00:30:04.166 --> 00:30:07.986 A:middle
and how to prompt for them,
we think it's also important

00:30:07.986 --> 00:30:10.716 A:middle
to consider how to protect user
data once a user has given you

00:30:10.716 --> 00:30:14.636 A:middle
access to it with a
new set of OS releases.

00:30:15.026 --> 00:30:16.776 A:middle
We have new security
features you should leverage

00:30:16.776 --> 00:30:17.376 A:middle
and be aware of.

00:30:18.016 --> 00:30:20.526 A:middle
The first of these is
App Transport Security.

00:30:20.976 --> 00:30:23.046 A:middle
To secure user communications
by default,

00:30:23.466 --> 00:30:25.376 A:middle
we introduced App
Transport Security

00:30:25.746 --> 00:30:27.896 A:middle
to iOS 9 and OS X El Capitan.

00:30:27.966 --> 00:30:30.326 A:middle
By default, your communication

00:30:30.326 --> 00:30:32.296 A:middle
through higher level
APIs will need

00:30:32.296 --> 00:30:34.686 A:middle
to be encrypted using
TLS version 1.2

00:30:34.686 --> 00:30:35.656 A:middle
with forward secrecy.

00:30:36.166 --> 00:30:39.166 A:middle
If you try to make connection

00:30:39.166 --> 00:30:40.736 A:middle
that doesn't follow
this requirement,

00:30:41.166 --> 00:30:42.266 A:middle
an error will be thrown.

00:30:43.866 --> 00:30:46.556 A:middle
If your app does need to make a
request to an insecure domain,

00:30:46.556 --> 00:30:49.766 A:middle
you have to specify this domain
in your app's Info.plist.

00:30:50.376 --> 00:30:52.646 A:middle
This will be gone into more
detail in the Networking

00:30:52.646 --> 00:30:57.596 A:middle
with NSURLSession tomorrow at 9
a.m. in Pacific Heights as well

00:30:57.596 --> 00:30:59.316 A:middle
as in the security talk
later this afternoon.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.526 --> 00:31:03.006 A:middle
If you do want to
declare an exception

00:31:03.006 --> 00:31:05.636 A:middle
to App Transport Security, you
need to declare the exception

00:31:05.636 --> 00:31:08.176 A:middle
in your app's Info.plist
and then optionally set one

00:31:08.176 --> 00:31:09.066 A:middle
or more of these keys.

00:31:10.726 --> 00:31:15.056 A:middle
Now I am going to talk
about rewards cards.

00:31:15.926 --> 00:31:18.136 A:middle
With iOS 9, rewards cards
can now be presented

00:31:18.136 --> 00:31:19.596 A:middle
with Contact list transactions.

00:31:20.046 --> 00:31:22.646 A:middle
We know that some rewards cards
use a person's phone number,

00:31:22.646 --> 00:31:24.946 A:middle
email address, or other
personally identifiable data

00:31:25.406 --> 00:31:27.206 A:middle
as the identifier for
the rewards cards.

00:31:27.816 --> 00:31:30.126 A:middle
So to protect user
privacy in the presentation

00:31:30.126 --> 00:31:32.096 A:middle
of rewards cards and
Contact list transactions,

00:31:33.046 --> 00:31:35.976 A:middle
we provided developers with an
easy way to encrypt this data

00:31:36.246 --> 00:31:38.346 A:middle
when it goes over the Contact
list transaction channel.

00:31:39.346 --> 00:31:42.236 A:middle
All you have to do is
modify your pass.json

00:31:42.236 --> 00:31:45.646 A:middle
with this new nfc dictionary
where you specify the message,

00:31:45.646 --> 00:31:49.116 A:middle
the identifier, and your
public encryption key.

00:31:49.586 --> 00:31:52.846 A:middle
From there, iOS takes care of
the encryption of the message

00:31:52.846 --> 00:31:54.846 A:middle
for you when the
rewards card is presented

00:31:54.846 --> 00:31:56.826 A:middle
in the contactless payment.

00:31:57.576 --> 00:32:01.616 A:middle
With the App Search, App
history, and App links in iOS 9,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.576 --> 00:32:01.616 A:middle
With the App Search, App
history, and App links in iOS 9,

00:32:01.736 --> 00:32:02.876 A:middle
it now means you
can now store data

00:32:03.016 --> 00:32:05.786 A:middle
about your app outside
of your app.

00:32:05.786 --> 00:32:07.896 A:middle
As a result, you have
to be a good steward

00:32:07.896 --> 00:32:10.326 A:middle
and protect the data
for your users both

00:32:10.326 --> 00:32:11.596 A:middle
when it is inside your app

00:32:12.046 --> 00:32:14.536 A:middle
and when it is stored
outside of your app.

00:32:15.726 --> 00:32:17.146 A:middle
There's a great talk
about this on Wednesday

00:32:17.146 --> 00:32:19.006 A:middle
at 11 a.m. Please go check
this out as they will go

00:32:19.006 --> 00:32:21.316 A:middle
into much greater depth
than I can, but I am going

00:32:21.316 --> 00:32:24.736 A:middle
to talk briefly about two ways
an app can have data indexed

00:32:24.926 --> 00:32:26.406 A:middle
and the privacy impacts of them.

00:32:28.026 --> 00:32:31.076 A:middle
The first is NSUserActivity,
which is an API introduced

00:32:31.076 --> 00:32:32.526 A:middle
in iOS 8 to support Handoff.

00:32:32.976 --> 00:32:36.666 A:middle
In iOS 9, we extended it so
you can use NSUserActivity

00:32:36.766 --> 00:32:39.596 A:middle
to create views of your app this
can be indexed and then searched

00:32:39.596 --> 00:32:40.906 A:middle
for by user to return to.

00:32:41.656 --> 00:32:44.746 A:middle
For example, in your Recipe
app, when a user looks

00:32:44.746 --> 00:32:47.426 A:middle
at a poutine recipe, you
can create a NSUserActivity

00:32:47.426 --> 00:32:49.296 A:middle
for that view and
have it indexed.

00:32:49.986 --> 00:32:53.376 A:middle
Then when the user searches for
poutine on their phone later,

00:32:53.626 --> 00:32:54.946 A:middle
one of the results
will be a link

00:32:54.996 --> 00:32:56.666 A:middle
to the recipe they
were looking at before.

00:32:57.126 --> 00:33:00.156 A:middle
Think of it as handing off to
yourself in the future instead

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.126 --> 00:33:00.156 A:middle
Think of it as handing off to
yourself in the future instead

00:33:00.156 --> 00:33:01.526 A:middle
of on to another machine.

00:33:02.316 --> 00:33:05.846 A:middle
We thought about how to
make search privacy friendly

00:33:05.846 --> 00:33:08.856 A:middle
from the ground up, and
part of how we did so was

00:33:08.856 --> 00:33:11.186 A:middle
to have the default
be not to index data.

00:33:12.266 --> 00:33:12.716 A:middle
That's right.

00:33:13.046 --> 00:33:15.926 A:middle
By default, NSUserActivity
continues to be for Handoff.

00:33:16.406 --> 00:33:18.246 A:middle
If you want to make a
view that's searchable,

00:33:18.656 --> 00:33:21.146 A:middle
you have to set the
eligibleForSearch property

00:33:21.196 --> 00:33:25.076 A:middle
to true, and if you want to make
that view publicly indexable --

00:33:25.076 --> 00:33:26.236 A:middle
and we will get into
that later --

00:33:27.236 --> 00:33:27.886 A:middle
you have to make

00:33:27.886 --> 00:33:32.246 A:middle
that eligibleForPublicIndexing
property set to true as well.

00:33:33.416 --> 00:33:35.136 A:middle
The other property
that you should set

00:33:35.136 --> 00:33:37.836 A:middle
when you are making data
indexable is the expirationDate,

00:33:38.086 --> 00:33:39.606 A:middle
since as Katie discussed
earlier,

00:33:40.146 --> 00:33:43.096 A:middle
part of protecting user
privacy is protecting their data

00:33:43.096 --> 00:33:45.456 A:middle
by deleting it when it's no
longer relevant to the user.

00:33:46.366 --> 00:33:50.766 A:middle
So now I am going
to talk a little bit

00:33:50.766 --> 00:33:52.556 A:middle
about NSUserActivity
and public indexing.

00:33:53.566 --> 00:33:56.196 A:middle
NSUserActivity are a
great light-weight way

00:33:56.226 --> 00:33:57.686 A:middle
to make your apps searchable.

00:33:58.196 --> 00:34:01.786 A:middle
We made indexing privacy
friendly by not indexing it

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.196 --> 00:34:01.786 A:middle
We made indexing privacy
friendly by not indexing it

00:34:01.786 --> 00:34:05.076 A:middle
by default and leaving it to
developers to determine whether

00:34:05.076 --> 00:34:06.636 A:middle
or not to index a specific view.

00:34:08.666 --> 00:34:11.186 A:middle
But we understand that
some developers have apps

00:34:11.226 --> 00:34:13.505 A:middle
that contain public
content that they want

00:34:13.505 --> 00:34:15.286 A:middle
to be searchable on all devices.

00:34:16.386 --> 00:34:19.116 A:middle
To enable this, we
came up with a way

00:34:19.116 --> 00:34:22.156 A:middle
to protect user privacy while
also indexing additional data.

00:34:23.596 --> 00:34:26.485 A:middle
When you make a view
eligible for search

00:34:26.936 --> 00:34:28.976 A:middle
and then mark it eligible
for public indexing

00:34:29.346 --> 00:34:31.416 A:middle
if it contains only
publicly available data,

00:34:32.516 --> 00:34:36.166 A:middle
then when a user searches for
that view and engages with it,

00:34:36.166 --> 00:34:37.896 A:middle
a hash of that view
is sent to Apple.

00:34:39.576 --> 00:34:42.726 A:middle
After multiple devices,
hash this view

00:34:42.726 --> 00:34:44.226 A:middle
and send the hash to Apple.

00:34:45.255 --> 00:34:47.876 A:middle
Eventually, when the
threshold is exceeded,

00:34:48.886 --> 00:34:51.235 A:middle
the actual view will
be sent to Apple,

00:34:51.946 --> 00:34:54.886 A:middle
and this is so that views
accidentally marked public

00:34:54.996 --> 00:34:58.236 A:middle
aren't unintentionally sent up.

00:34:59.026 --> 00:35:00.356 A:middle
That's NSUserActivity.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.026 --> 00:35:00.356 A:middle
That's NSUserActivity.

00:35:00.356 --> 00:35:02.306 A:middle
I am going to talk a little
bit about CoreSpotlight now.

00:35:03.036 --> 00:35:05.706 A:middle
CoreSpotlight now is a new
API in iOS 9 that you can use

00:35:05.706 --> 00:35:08.296 A:middle
to make user content
in your app searchable,

00:35:08.596 --> 00:35:10.976 A:middle
things like Mail,
Contacts, Calendars.

00:35:11.396 --> 00:35:13.586 A:middle
This is derivative
data, and you need

00:35:13.586 --> 00:35:16.596 A:middle
to protect it the same way you
protect underlying data yourself

00:35:16.596 --> 00:35:17.066 A:middle
in your app.

00:35:17.646 --> 00:35:20.836 A:middle
The first up here is a set data
protection class on it just

00:35:20.836 --> 00:35:23.686 A:middle
as you do data in your app.

00:35:23.686 --> 00:35:27.186 A:middle
The next is to practice
data management

00:35:27.186 --> 00:35:28.806 A:middle
with the derivative
data in the index.

00:35:29.216 --> 00:35:31.856 A:middle
You can store -- first you
should store relevant user data

00:35:32.236 --> 00:35:33.676 A:middle
-- for instance,
does anyone need

00:35:33.676 --> 00:35:35.586 A:middle
to see drafts or
deleted documents?

00:35:36.576 --> 00:35:39.766 A:middle
When a user updates
documents in your app,

00:35:39.856 --> 00:35:42.186 A:middle
you should update the copy of
those documents in the index.

00:35:43.026 --> 00:35:44.796 A:middle
When a user deletes a
document in your app,

00:35:44.896 --> 00:35:46.766 A:middle
you should delete the
document in your index.

00:35:46.766 --> 00:35:49.286 A:middle
Because users have multiple ways
of deleting documents in apps,

00:35:49.286 --> 00:35:51.026 A:middle
like deleting all
files of a type

00:35:51.236 --> 00:35:54.046 A:middle
or of a folder we have made it
easy to delete multiple items

00:35:54.046 --> 00:35:57.166 A:middle
at once or to delete
all items from search.

00:35:58.426 --> 00:35:59.776 A:middle
That's a brief overview of some

00:35:59.776 --> 00:36:03.036 A:middle
of the new privacy
protecting features in iOS 9.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.776 --> 00:36:03.036 A:middle
of the new privacy
protecting features in iOS 9.

00:36:03.156 --> 00:36:05.226 A:middle
I am now going to hand it over
to Katie to talk about some

00:36:05.226 --> 00:36:07.656 A:middle
of the existing technologies
you should be adopting

00:36:07.656 --> 00:36:08.356 A:middle
if you haven't already.

00:36:10.516 --> 00:36:14.946 A:middle
[ Applause ]

00:36:15.446 --> 00:36:16.166 A:middle
&gt;&gt; KATIE SKINNER: Thanks, Jason.

00:36:16.396 --> 00:36:19.426 A:middle
I want to highlight a few
of the existing technologies

00:36:19.426 --> 00:36:22.226 A:middle
that we have that makes it
easy to protect user data

00:36:22.616 --> 00:36:24.296 A:middle
without having to do work

00:36:24.296 --> 00:36:26.486 A:middle
like writing crypto
primitives yourself.

00:36:26.486 --> 00:36:31.546 A:middle
Touch ID is a great
way to protect your app

00:36:31.546 --> 00:36:33.166 A:middle
or protect data within your app.

00:36:34.226 --> 00:36:38.166 A:middle
You can use Apple Pay in app to
make it so you don't have to go

00:36:38.166 --> 00:36:40.396 A:middle
through the process of creating

00:36:40.396 --> 00:36:43.006 A:middle
and accepting user data
and credit card data.

00:36:43.006 --> 00:36:46.076 A:middle
Now I am going to dive
a little bit deeper

00:36:46.336 --> 00:36:48.726 A:middle
on privacy policies
and data protection.

00:36:49.616 --> 00:36:53.526 A:middle
In addition to protecting
your user's data technically,

00:36:54.056 --> 00:36:56.486 A:middle
it's important to explain
to users how you are going

00:36:56.486 --> 00:36:58.776 A:middle
to use their data
and if you are going

00:36:58.776 --> 00:36:59.906 A:middle
to share it with a third party.

00:36:59.906 --> 00:37:04.126 A:middle
We actually require privacy
policies for certain types

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.906 --> 00:37:04.126 A:middle
We actually require privacy
policies for certain types

00:37:04.126 --> 00:37:07.226 A:middle
of applications, including
apps that link to HealthKit.

00:37:08.236 --> 00:37:11.346 A:middle
We make it easy for you to
include a privacy policy.

00:37:12.166 --> 00:37:14.526 A:middle
On iTunes Connect, you
just put in the URL,

00:37:14.846 --> 00:37:18.216 A:middle
and then it will show up
on all of our App Stores.

00:37:18.316 --> 00:37:21.866 A:middle
It gives users a chance to read
your privacy policy before they

00:37:21.866 --> 00:37:23.006 A:middle
make a purchase decision.

00:37:23.546 --> 00:37:27.006 A:middle
You can use iOS's built-in
data protection classes

00:37:27.166 --> 00:37:29.456 A:middle
to encrypt your data to
keys that are derived

00:37:29.456 --> 00:37:30.556 A:middle
from the user's passcode.

00:37:31.576 --> 00:37:33.316 A:middle
This is incredibly
powerful encryption,

00:37:33.316 --> 00:37:36.386 A:middle
and you can easily
leverage it without having

00:37:36.386 --> 00:37:38.106 A:middle
to write any crypto
code yourself.

00:37:39.906 --> 00:37:44.996 A:middle
Now, every iOS, data
protection is implemented

00:37:44.996 --> 00:37:47.986 A:middle
by managing a hierarchy of keys.

00:37:49.006 --> 00:37:51.406 A:middle
It builds on the hardware
encryption that's built

00:37:51.406 --> 00:37:53.826 A:middle
into every iOS and
watchOS device.

00:37:54.956 --> 00:37:57.856 A:middle
Data protection is
controlled on a per-file basis,

00:37:58.246 --> 00:38:00.116 A:middle
so each file is assigned
to a class.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.246 --> 00:38:00.116 A:middle
so each file is assigned
to a class.

00:38:01.346 --> 00:38:05.286 A:middle
Accessibility is determined
whether the class keys have

00:38:05.286 --> 00:38:06.126 A:middle
been unlocked.

00:38:06.856 --> 00:38:10.136 A:middle
So there are four data
classes, and I am going

00:38:10.136 --> 00:38:11.276 A:middle
to go through each one.

00:38:11.876 --> 00:38:13.616 A:middle
But the one that you
may be most aware

00:38:13.616 --> 00:38:17.986 A:middle
of is NSFileProtectionComplete
UntilFirstAuthentication.

00:38:18.066 --> 00:38:21.866 A:middle
As of iOS 7, all
third-party app data

00:38:21.866 --> 00:38:24.416 A:middle
by default is this data class.

00:38:25.316 --> 00:38:29.306 A:middle
Now, your apps can't
run until after boot,

00:38:29.306 --> 00:38:31.426 A:middle
until after the user
puts in their passcode.

00:38:32.166 --> 00:38:35.126 A:middle
So all of your data should
at least be this protection.

00:38:36.176 --> 00:38:39.526 A:middle
We know that some developers
are using no protection,

00:38:39.746 --> 00:38:43.446 A:middle
but there's no reason,
no value for doing that.

00:38:45.456 --> 00:38:46.696 A:middle
So I'm going to quickly go

00:38:46.786 --> 00:38:48.856 A:middle
through the different data
classes in the behavior.

00:38:48.856 --> 00:38:50.846 A:middle
As you can see, with
no protection,

00:38:51.256 --> 00:38:53.336 A:middle
even if the user enters
the passcode or not,

00:38:53.816 --> 00:38:55.786 A:middle
the data is always unlocked.

00:38:55.786 --> 00:38:56.906 A:middle
It's always accessible.

00:38:57.876 --> 00:39:01.786 A:middle
Lastly -- so next, protected
until first authentication,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.876 --> 00:39:01.786 A:middle
Lastly -- so next, protected
until first authentication,

00:39:02.206 --> 00:39:05.496 A:middle
this is your default class.

00:39:06.596 --> 00:39:09.006 A:middle
Now, it's not accessible
on boot,

00:39:09.526 --> 00:39:11.776 A:middle
but as soon as a user
enters their passcode,

00:39:12.096 --> 00:39:14.726 A:middle
the data is accessible, and
then it's still accessible

00:39:14.726 --> 00:39:16.086 A:middle
when the device is locked.

00:39:16.586 --> 00:39:20.216 A:middle
Next is protected until open.

00:39:20.586 --> 00:39:23.376 A:middle
This is designed for
data that comes in

00:39:23.376 --> 00:39:25.686 A:middle
and is sensitive while
the device is locked.

00:39:26.466 --> 00:39:29.996 A:middle
So there's two types of
access, reading and writing.

00:39:30.606 --> 00:39:34.086 A:middle
So the device boots,
and there's no access.

00:39:34.446 --> 00:39:35.816 A:middle
The user enters their passcode.

00:39:36.236 --> 00:39:37.996 A:middle
Now you can both read and write.

00:39:38.856 --> 00:39:40.046 A:middle
The device locks again.

00:39:40.666 --> 00:39:43.736 A:middle
You are unable to read, but
you can still write data.

00:39:45.206 --> 00:39:46.986 A:middle
Lastly, complete protection.

00:39:47.296 --> 00:39:49.516 A:middle
Now, this is for most
sensitive kinds of data,

00:39:49.906 --> 00:39:52.386 A:middle
including health data,
financial information.

00:39:53.616 --> 00:39:56.946 A:middle
When the device boots,
the data is unaccessible.

00:39:57.936 --> 00:40:01.226 A:middle
When the user enters their
passcode, the data is available.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:57.936 --> 00:40:01.226 A:middle
When the user enters their
passcode, the data is available.

00:40:02.016 --> 00:40:05.036 A:middle
The device locks, the data
is no longer available.

00:40:06.616 --> 00:40:09.446 A:middle
This is a great chart to
look at later to think

00:40:09.446 --> 00:40:12.006 A:middle
about which data protection
class you should be using.

00:40:12.846 --> 00:40:15.786 A:middle
And lastly, make sure you test
with data protection enabled.

00:40:16.166 --> 00:40:19.416 A:middle
You can check this by going to
Settings, Touch ID &amp; Passcode,

00:40:19.806 --> 00:40:20.856 A:middle
scrolling down to the bottom,

00:40:20.926 --> 00:40:22.646 A:middle
and see if data protection
is enabled.

00:40:22.646 --> 00:40:28.256 A:middle
Now, we've talked about a
lot of things, and you need

00:40:28.256 --> 00:40:32.256 A:middle
to make sure that you take your
apps and test on iOS and OS X.

00:40:32.846 --> 00:40:34.926 A:middle
You want to understand the
impact to these changes

00:40:35.196 --> 00:40:38.206 A:middle
and make sure you are still
providing a great experience

00:40:38.206 --> 00:40:38.886 A:middle
for your users.

00:40:39.646 --> 00:40:40.826 A:middle
Prompt with purpose.

00:40:42.266 --> 00:40:45.016 A:middle
Make sure to minimize data
and keep it up to date.

00:40:46.186 --> 00:40:48.196 A:middle
Leverage some of the
platform technologies

00:40:48.196 --> 00:40:49.226 A:middle
that we talked about today.

00:40:50.176 --> 00:40:54.356 A:middle
And lastly, user privacy is
our shared responsibility.

00:40:55.196 --> 00:40:58.616 A:middle
We have to do this
together, so both us and you.

00:40:59.186 --> 00:41:00.506 A:middle
It's our responsibility

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.186 --> 00:41:00.506 A:middle
It's our responsibility

00:41:00.506 --> 00:41:03.006 A:middle
to protect the privacy
rights of our users.

00:41:04.046 --> 00:41:05.056 A:middle
Thank you very much.

00:41:06.516 --> 00:41:19.050 A:middle
[ Applause ]

