WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:25.176 --> 00:00:26.316 A:middle
&gt;&gt; ROGER PANTOS: Good
morning, everyone.

00:00:27.416 --> 00:00:31.096 A:middle
Welcome to this year's
Worldwide Developers Conference.

00:00:31.526 --> 00:00:33.846 A:middle
This is your first real session.

00:00:34.596 --> 00:00:35.826 A:middle
So, welcome.

00:00:37.146 --> 00:00:39.106 A:middle
Today -- thank you.

00:00:39.766 --> 00:00:44.416 A:middle
Today we are going to be talking
about a pretty exciting addition

00:00:44.666 --> 00:00:46.366 A:middle
to HTTP Live Streaming.

00:00:47.666 --> 00:00:49.746 A:middle
You know, we are always looking

00:00:49.826 --> 00:00:53.536 A:middle
at whatever it is that's
preventing you guys

00:00:53.536 --> 00:00:57.606 A:middle
from using HLS to deploy your
content the way you want to,

00:00:58.296 --> 00:01:03.396 A:middle
and content protection, which
is to say allowing your users

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.296 --> 00:01:03.396 A:middle
and content protection, which
is to say allowing your users

00:01:03.396 --> 00:01:05.706 A:middle
to watch your content,
listen to your content

00:01:06.416 --> 00:01:08.626 A:middle
without making unauthorized
use of it,

00:01:09.186 --> 00:01:12.616 A:middle
has always been a really
difficult problem that a lot

00:01:12.616 --> 00:01:14.306 A:middle
of you have had to
sort of contend with.

00:01:15.076 --> 00:01:17.286 A:middle
And, as the bit rates
get higher,

00:01:17.286 --> 00:01:18.736 A:middle
and the resolutions get higher,

00:01:18.906 --> 00:01:20.626 A:middle
those demands are only
going to get louder.

00:01:21.496 --> 00:01:25.736 A:middle
And that's why I am
extremely pleased, finally,

00:01:26.086 --> 00:01:30.376 A:middle
to be able to announce
today FairPlay Streaming.

00:01:31.706 --> 00:01:33.266 A:middle
So what is it?

00:01:34.386 --> 00:01:40.166 A:middle
First and foremost, it is
our best content protection

00:01:40.166 --> 00:01:44.216 A:middle
technology, packaged in a
way that allows you to use it

00:01:44.216 --> 00:01:46.136 A:middle
to protect your HLS content.

00:01:47.146 --> 00:01:47.946 A:middle
Now, it is not new.

00:01:48.816 --> 00:01:53.276 A:middle
We have been working for the
past three years with some

00:01:53.276 --> 00:01:55.076 A:middle
of our major content partners

00:01:55.856 --> 00:01:57.846 A:middle
to help them deploy
FairPlay Streaming

00:01:57.846 --> 00:01:59.546 A:middle
in their apps and on Apple TV.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.176 --> 00:02:04.486 A:middle
And at this point, it has
been used to protect a lot

00:02:04.486 --> 00:02:08.515 A:middle
of content, including some
of the most popular movies

00:02:08.515 --> 00:02:10.606 A:middle
and television shows
in the world.

00:02:15.826 --> 00:02:21.406 A:middle
Now, you can use it on iOS,
on Apple TV, and on OS X.

00:02:22.906 --> 00:02:26.516 A:middle
Of course, on our mobile
devices, battery life is king.

00:02:27.086 --> 00:02:30.216 A:middle
And so, when we designed
FairPlay Streaming,

00:02:31.186 --> 00:02:34.026 A:middle
every choice we made
was predicated

00:02:34.026 --> 00:02:35.506 A:middle
on giving you good battery life.

00:02:35.746 --> 00:02:38.756 A:middle
The codecs we chose,
the encryption we chose,

00:02:39.096 --> 00:02:41.926 A:middle
how we implemented it, even the
hardware we took advantage of.

00:02:42.326 --> 00:02:43.716 A:middle
And, so, you get great security,

00:02:43.716 --> 00:02:45.626 A:middle
but you also get
great battery life.

00:02:46.046 --> 00:02:50.176 A:middle
And it is also integrated
with AirPlay, seamlessly.

00:02:50.866 --> 00:02:52.806 A:middle
And, so, with full protection.

00:02:54.156 --> 00:02:57.946 A:middle
Now, you may be saying, okay,
well, that sounds pretty good,

00:02:58.416 --> 00:02:59.556 A:middle
but I've got a lot of content.

00:02:59.686 --> 00:03:03.116 A:middle
I mean, is Apple -- how is
Apple going to make me pay

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.686 --> 00:03:03.116 A:middle
I mean, is Apple -- how is
Apple going to make me pay

00:03:03.116 --> 00:03:04.306 A:middle
for this FairPlay
Streaming thing?

00:03:04.306 --> 00:03:05.906 A:middle
Is going to be like
a per movie charge,

00:03:05.906 --> 00:03:07.456 A:middle
per playback, as a flat rate?

00:03:08.726 --> 00:03:10.176 A:middle
We went back and forth on that,

00:03:10.416 --> 00:03:12.316 A:middle
and we eventually did
settle on a flat rate.

00:03:13.806 --> 00:03:19.256 A:middle
Zero. If you guys are paying
your 99-dollar a year developer

00:03:19.256 --> 00:03:22.526 A:middle
fee to us, you will not need
to pay Apple a penny more

00:03:22.756 --> 00:03:24.836 A:middle
to use FairPlay Streaming
as much as you want.

00:03:26.256 --> 00:03:30.996 A:middle
So, now, at this point,
any marketing folks

00:03:30.996 --> 00:03:33.146 A:middle
in the audience are like:
Oh, that sounds awesome!

00:03:33.466 --> 00:03:35.576 A:middle
And the engineer sitting
next to you is like: No,

00:03:35.576 --> 00:03:36.476 A:middle
no, really, what is it?

00:03:36.856 --> 00:03:41.136 A:middle
Okay. So, it is really
very simple.

00:03:41.906 --> 00:03:46.476 A:middle
What we did is, we attacked the
most essential building block

00:03:46.476 --> 00:03:48.976 A:middle
of a DRM system, which
is key protection.

00:03:49.976 --> 00:03:52.196 A:middle
And so FairPlay Streaming
is essentially

00:03:52.366 --> 00:03:55.346 A:middle
and really only a secure
key delivery system.

00:03:55.666 --> 00:03:59.006 A:middle
It's a way to transfer the keys
from your server on the Internet

00:03:59.476 --> 00:04:03.896 A:middle
to the device, and use it on
that device without allowing it

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.476 --> 00:04:03.896 A:middle
to the device, and use it on
that device without allowing it

00:04:03.896 --> 00:04:07.636 A:middle
to be obtained by an attacker so
they can decrypt your content.

00:04:08.826 --> 00:04:12.906 A:middle
We designed it to be easy to
use and also easy to adopt.

00:04:13.476 --> 00:04:15.886 A:middle
We recognized that a
lot of you, particularly

00:04:15.886 --> 00:04:20.416 A:middle
if you are streaming premium
content or subscription content,

00:04:20.416 --> 00:04:22.956 A:middle
you are already talking to
some kind of secure back end.

00:04:23.666 --> 00:04:26.306 A:middle
And so we designed
FairPlay Streaming

00:04:26.306 --> 00:04:29.156 A:middle
so that the delivery
part is agnostic,

00:04:29.156 --> 00:04:30.066 A:middle
the protocol you're using.

00:04:30.066 --> 00:04:31.796 A:middle
If you have got a
secure connection,

00:04:32.166 --> 00:04:34.836 A:middle
you can adopt FairPlay
Streaming extremely easily.

00:04:35.296 --> 00:04:36.766 A:middle
And if you don't, you
can just use HTTPS.

00:04:36.766 --> 00:04:37.856 A:middle
It's a great choice.

00:04:39.346 --> 00:04:42.676 A:middle
Finally, a lot of folks have
asked me about HDCP in the past.

00:04:43.256 --> 00:04:45.596 A:middle
With FairPlay Streaming
is the answer to this.

00:04:46.996 --> 00:04:49.726 A:middle
If your device is
connected to a television

00:04:49.886 --> 00:04:54.746 A:middle
or another external
input, it must be HDMI,

00:04:54.746 --> 00:04:56.776 A:middle
and HDCP must be active

00:04:57.176 --> 00:05:00.386 A:middle
or any FairPlay Streaming
content playback will fail,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.176 --> 00:05:00.386 A:middle
or any FairPlay Streaming
content playback will fail,

00:05:01.226 --> 00:05:02.006 A:middle
no exceptions.

00:05:04.216 --> 00:05:09.166 A:middle
Now, when we designed it,
we knew that there's a lot

00:05:09.166 --> 00:05:11.706 A:middle
of difference, business
rules and logic,

00:05:11.706 --> 00:05:13.286 A:middle
and everybody has
their own flavor.

00:05:13.286 --> 00:05:15.396 A:middle
And so we didn't want to
build a big, complicated thing

00:05:15.746 --> 00:05:17.286 A:middle
and force you into our box.

00:05:17.776 --> 00:05:21.256 A:middle
So we built just the
key delivery mechanism.

00:05:21.706 --> 00:05:25.326 A:middle
We didn't build a big rights
expression language evaluator

00:05:25.326 --> 00:05:27.576 A:middle
or create a long
list of policies

00:05:27.576 --> 00:05:28.696 A:middle
that you need to adhere to.

00:05:29.366 --> 00:05:33.726 A:middle
And that means that if your
business logic requires those

00:05:33.726 --> 00:05:34.886 A:middle
things, you are in control.

00:05:34.886 --> 00:05:35.946 A:middle
You are still the gate keeper.

00:05:36.486 --> 00:05:39.346 A:middle
So, once you give the media
stack a FairPlay Streaming key,

00:05:39.346 --> 00:05:39.876 A:middle
we will play it.

00:05:39.876 --> 00:05:40.856 A:middle
No questions asked.

00:05:40.856 --> 00:05:42.386 A:middle
We will protect the key,
we'll go and play it.

00:05:43.086 --> 00:05:46.156 A:middle
And so, if you need to do
some policy enforcement

00:05:46.246 --> 00:05:50.746 A:middle
or user authentication or
per device slot management,

00:05:51.136 --> 00:05:53.986 A:middle
then you can do that on
top of FairPlay Streaming.

00:05:54.436 --> 00:05:57.226 A:middle
And so again, it goes into
being easy to integrate.

00:05:58.486 --> 00:06:00.696 A:middle
So now let's talk about
some concrete steps.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.486 --> 00:06:00.696 A:middle
So now let's talk about
some concrete steps.

00:06:00.696 --> 00:06:03.086 A:middle
That's kind of what
FairPlay Streaming gives you.

00:06:03.446 --> 00:06:06.216 A:middle
Let's talk about the steps that
you need to do to adopt it.

00:06:07.466 --> 00:06:09.006 A:middle
Basically there are three steps.

00:06:09.606 --> 00:06:12.626 A:middle
The first one and
probably the largest one is

00:06:12.626 --> 00:06:15.706 A:middle
because FairPlay Streaming is
an online key delivery protocol,

00:06:16.346 --> 00:06:18.166 A:middle
you must be online
to get your key,

00:06:18.166 --> 00:06:20.306 A:middle
and once the playback
stops, the key goes poof.

00:06:21.236 --> 00:06:25.266 A:middle
You need to integrate what
we call a key security module

00:06:25.336 --> 00:06:26.376 A:middle
into your key server.

00:06:27.416 --> 00:06:29.946 A:middle
And so that's the biggest
step, and we'll go into a lot

00:06:29.946 --> 00:06:31.026 A:middle
of detail about that
in a second.

00:06:31.686 --> 00:06:34.026 A:middle
But the second thing is, then
you need to add a little bit

00:06:34.026 --> 00:06:35.466 A:middle
of code to your application,

00:06:36.036 --> 00:06:39.106 A:middle
called an AV asset
resource loader delegate.

00:06:39.766 --> 00:06:41.506 A:middle
And that code is going
to be responsible

00:06:41.546 --> 00:06:44.116 A:middle
for relaying the key
requests from AV foundation

00:06:44.456 --> 00:06:47.436 A:middle
to your back end, and then
returning the response

00:06:47.436 --> 00:06:49.606 A:middle
from your back end
back to AV foundation.

00:06:50.306 --> 00:06:52.586 A:middle
Then finally what you need to
do is, prepare your content.

00:06:52.586 --> 00:06:54.026 A:middle
And that means you
need to encrypt it,

00:06:54.026 --> 00:06:57.776 A:middle
using the AES Sample encryption.

00:06:58.086 --> 00:07:01.516 A:middle
This is the format
that we introduced, oh,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.086 --> 00:07:01.516 A:middle
This is the format
that we introduced, oh,

00:07:01.676 --> 00:07:03.286 A:middle
three years ago, coincidentally.

00:07:03.786 --> 00:07:07.916 A:middle
And so, rather than the
traditional bulk entire segment

00:07:07.916 --> 00:07:10.806 A:middle
encryption that HLS
is using originally,

00:07:11.086 --> 00:07:15.336 A:middle
this just encrypts small slices
of each sample and it ensures

00:07:15.556 --> 00:07:17.346 A:middle
that we can drive the decryption

00:07:17.556 --> 00:07:19.116 A:middle
down to the lowest
level of the system.

00:07:20.136 --> 00:07:23.096 A:middle
And so you need to pick a
content key, store that away

00:07:23.096 --> 00:07:25.466 A:middle
in your back end database,
encrypt your content,

00:07:25.756 --> 00:07:29.356 A:middle
and then put a reference to that
key into your playlist so that

00:07:29.356 --> 00:07:31.726 A:middle
when you your little bit
of code receives a request

00:07:31.726 --> 00:07:33.856 A:middle
for that key it knows which
one to ask your back end for.

00:07:34.016 --> 00:07:37.756 A:middle
And so what I would like
to do next is have us go

00:07:37.756 --> 00:07:40.936 A:middle
into greater detail on
all three of those steps.

00:07:41.316 --> 00:07:45.476 A:middle
And to do that, I would like to
introduce a colleague of mine

00:07:45.476 --> 00:07:48.526 A:middle
who works on the FairPlay
team, Gianpaolo Fasoli.

00:07:48.586 --> 00:07:48.936 A:middle
Welcome.

00:07:50.516 --> 00:07:55.686 A:middle
[Applause]

00:07:56.186 --> 00:07:56.856 A:middle
&gt;&gt; GIANPAOLO FASOLI:
Thank you, Roger.

00:07:57.906 --> 00:07:58.836 A:middle
Good morning, everyone.

00:07:58.836 --> 00:08:00.276 A:middle
My name's Gianpaolo Fasoli,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.836 --> 00:08:00.276 A:middle
My name's Gianpaolo Fasoli,

00:08:00.276 --> 00:08:02.796 A:middle
and I am a FairPlay
Streaming Engineer at Apple.

00:08:03.686 --> 00:08:06.826 A:middle
So, with Roger's overview in
mind, I'd like to talk to you

00:08:06.826 --> 00:08:09.326 A:middle
about what it takes to design
a FairPlay Streaming system.

00:08:09.326 --> 00:08:13.536 A:middle
And the first thing I'm going
to talk about is the purpose

00:08:13.536 --> 00:08:15.346 A:middle
and the importance
of what we refer

00:08:15.346 --> 00:08:17.716 A:middle
to as the FairPlay
Streaming credentials.

00:08:17.716 --> 00:08:21.026 A:middle
Next up, I'm going to
identify the actors

00:08:21.026 --> 00:08:23.276 A:middle
in the system and
the data flows.

00:08:23.276 --> 00:08:26.546 A:middle
Then I'm going to talk
about what Apple provides

00:08:26.546 --> 00:08:28.246 A:middle
in the things that you are
going to build and in the things

00:08:28.246 --> 00:08:30.266 A:middle
that you are going to build,
we're going to start by talking

00:08:30.266 --> 00:08:31.586 A:middle
about the server side and how

00:08:31.586 --> 00:08:35.436 A:middle
to integrate the key security
module that Roger was talking

00:08:35.436 --> 00:08:36.686 A:middle
about into your key server.

00:08:37.206 --> 00:08:39.596 A:middle
We're going to talk about
how to test that integration.

00:08:39.596 --> 00:08:43.116 A:middle
We're going to move on to
the client side and how

00:08:43.116 --> 00:08:45.566 A:middle
to integrate FairPlay
Streaming into your application,

00:08:45.566 --> 00:08:47.666 A:middle
and then we're also
going to be talking

00:08:47.666 --> 00:08:49.666 A:middle
about the updates you
are going to be making

00:08:49.666 --> 00:08:54.156 A:middle
to your content authoring
workflow, in order to encrypt

00:08:54.156 --> 00:08:56.106 A:middle
that content and
verify the changes

00:08:56.106 --> 00:08:57.336 A:middle
that you are making
to your workflow.

00:08:59.236 --> 00:09:02.916 A:middle
So when we talk about
FairPlay Streaming credentials,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.236 --> 00:09:02.916 A:middle
So when we talk about
FairPlay Streaming credentials,

00:09:03.006 --> 00:09:06.016 A:middle
the reason we have those is

00:09:06.016 --> 00:09:09.226 A:middle
so that we can differentiate
your FairPlay Streaming

00:09:09.226 --> 00:09:12.516 A:middle
deployment from other FPS
deployments out there.

00:09:13.066 --> 00:09:16.236 A:middle
And the reason they are required
is because you need them

00:09:16.236 --> 00:09:19.046 A:middle
so that your customers can
actually play their content

00:09:19.236 --> 00:09:20.496 A:middle
on the customer devices.

00:09:21.466 --> 00:09:24.196 A:middle
For those reasons,
it is critical

00:09:24.196 --> 00:09:27.966 A:middle
that you protect those FairPlay
Streaming credential assets

00:09:28.196 --> 00:09:30.276 A:middle
at all times, when they are
deployed in your server,

00:09:30.276 --> 00:09:31.516 A:middle
and when they're
used in your server.

00:09:32.316 --> 00:09:33.686 A:middle
Make sure they are protected.

00:09:34.636 --> 00:09:39.216 A:middle
So now moving on to the diagram,
we've got the server components

00:09:39.216 --> 00:09:42.326 A:middle
on the left-hand side,
namely your key server

00:09:42.326 --> 00:09:45.806 A:middle
that has the FairPlay Streaming
key security module integrated

00:09:45.806 --> 00:09:49.596 A:middle
in it; the key database that
contains the content key values

00:09:49.596 --> 00:09:51.456 A:middle
that were used to
encrypt your streams.

00:09:51.726 --> 00:09:54.746 A:middle
And then on the right-hand side
we've got the client actors,

00:09:54.746 --> 00:09:56.026 A:middle
namely your application,

00:09:56.406 --> 00:09:58.676 A:middle
the AVFoundation Delegate
Roger was talking about,

00:09:58.946 --> 00:10:01.986 A:middle
and AVFoundation that's provided
us part of the operating system

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.946 --> 00:10:01.986 A:middle
and AVFoundation that's provided
us part of the operating system

00:10:01.986 --> 00:10:04.376 A:middle
with our iOS or Mac OS X.

00:10:04.946 --> 00:10:06.196 A:middle
So lLet's talk about
what happens

00:10:06.196 --> 00:10:09.176 A:middle
when the user hits play
in your application.

00:10:09.226 --> 00:10:10.556 A:middle
First thing that's
going to happen is,

00:10:10.996 --> 00:10:13.566 A:middle
your application is going
to invoke AVFoundation

00:10:13.566 --> 00:10:16.686 A:middle
and provide it with the m3u8
URL to the encrypted content.

00:10:17.186 --> 00:10:20.256 A:middle
AVFoundation is going to pull
that playlist from the Internet,

00:10:20.356 --> 00:10:22.586 A:middle
it's going to parse
it, and when it notices

00:10:22.586 --> 00:10:24.566 A:middle
that the content is encrypted,
it is going to call back

00:10:24.566 --> 00:10:26.166 A:middle
into your delegate, telling it

00:10:26.166 --> 00:10:28.026 A:middle
that it needs a key
to play the content.

00:10:28.506 --> 00:10:31.166 A:middle
The delegate is going to
handle that by calling

00:10:31.306 --> 00:10:34.846 A:middle
into AVFoundation and asking
it to create what we refer

00:10:34.846 --> 00:10:37.086 A:middle
to as the Server
Playback Context.

00:10:37.976 --> 00:10:40.866 A:middle
In FPS parlance we
use SPC for short.

00:10:40.916 --> 00:10:43.896 A:middle
And what that is,
is a key request

00:10:43.896 --> 00:10:47.406 A:middle
that your delegate then is
going to post to your key server

00:10:47.406 --> 00:10:50.666 A:middle
in order for the key
server to do its job

00:10:50.666 --> 00:10:51.806 A:middle
and deliver the content key.

00:10:52.216 --> 00:10:56.296 A:middle
What is important to note here
is that the SPC is created

00:10:56.296 --> 00:11:01.046 A:middle
in a FairPlay Streaming
delivery context on the client.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:56.296 --> 00:11:01.046 A:middle
in a FairPlay Streaming
delivery context on the client.

00:11:01.496 --> 00:11:05.676 A:middle
And that is a session-specific
context that only

00:11:05.676 --> 00:11:07.806 A:middle
that device was able to create,

00:11:07.806 --> 00:11:09.776 A:middle
for which that device
will only be able

00:11:09.776 --> 00:11:11.986 A:middle
to process the response
from the server.

00:11:11.986 --> 00:11:13.806 A:middle
It is tied to the device
and to that session.

00:11:14.676 --> 00:11:18.926 A:middle
So then your server is going
to make use of the KSM to crack

00:11:19.006 --> 00:11:22.536 A:middle
that SPC queue request open,
validate it from a format point

00:11:22.536 --> 00:11:24.346 A:middle
of view and from a
cryptographic point of view,

00:11:24.716 --> 00:11:26.566 A:middle
and look up the corresponding
content key

00:11:26.566 --> 00:11:27.896 A:middle
in the key server database.

00:11:28.586 --> 00:11:30.906 A:middle
It's going to then wrap
that content key value

00:11:30.966 --> 00:11:34.836 A:middle
into what we refer to as
a content key context,

00:11:35.156 --> 00:11:38.666 A:middle
or CKC for short,
and the last step

00:11:38.666 --> 00:11:40.486 A:middle
that your app delegate
is going to perform,

00:11:40.486 --> 00:11:43.516 A:middle
is provide that CKC
back to AVFoundation.

00:11:44.456 --> 00:11:46.836 A:middle
So, at this point the device
has everything it needs

00:11:46.836 --> 00:11:48.936 A:middle
to decrypt and play the content.

00:11:49.636 --> 00:11:52.906 A:middle
So now that we've covered
the actors and the data flows

00:11:52.906 --> 00:11:54.186 A:middle
in a FairPlay Streaming system,

00:11:54.186 --> 00:11:55.666 A:middle
let's talk about
what Apple provides.

00:11:56.586 --> 00:11:58.796 A:middle
We provide AVFoundation,
of course.

00:11:58.856 --> 00:12:03.076 A:middle
And part of AVFoundation in
iOS and Mac OS is the API

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.856 --> 00:12:03.076 A:middle
And part of AVFoundation in
iOS and Mac OS is the API

00:12:03.076 --> 00:12:05.736 A:middle
that you are going to be using
to implement the delegate.

00:12:06.536 --> 00:12:09.546 A:middle
Another thing we provide is
the FairPlay Streaming SDK

00:12:09.996 --> 00:12:11.426 A:middle
on developer.apple.com.

00:12:11.936 --> 00:12:13.886 A:middle
And that SDK contains a
certain number of things.

00:12:13.886 --> 00:12:17.026 A:middle
First of all, it contains
a protocol specification

00:12:17.196 --> 00:12:20.316 A:middle
that has all the
details on how the SPC

00:12:20.456 --> 00:12:22.726 A:middle
and the CKC messages
are formatted,

00:12:23.096 --> 00:12:25.076 A:middle
and which cryptographic
primitives you are going to use

00:12:25.076 --> 00:12:27.766 A:middle
to process the incoming
key requests

00:12:27.766 --> 00:12:29.796 A:middle
and also generate
the key response.

00:12:30.656 --> 00:12:34.996 A:middle
It contains a key security
module server reference

00:12:34.996 --> 00:12:36.746 A:middle
implementation in NCC.

00:12:37.826 --> 00:12:41.046 A:middle
It contains a full suite
of server test vectors

00:12:41.046 --> 00:12:42.636 A:middle
and validation tools
that you can use

00:12:42.636 --> 00:12:43.676 A:middle
for your server development.

00:12:44.406 --> 00:12:47.346 A:middle
It contains some
client-side example content.

00:12:48.466 --> 00:12:55.486 A:middle
And the last bit it contains is
a set of client example code.

00:12:56.366 --> 00:13:00.136 A:middle
So the responsibilities of your
key server are going to be,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:56.366 --> 00:13:00.136 A:middle
So the responsibilities of your
key server are going to be,

00:13:00.136 --> 00:13:02.836 A:middle
as Roger pointed out, first
of all, the decryption

00:13:02.836 --> 00:13:05.036 A:middle
and the validation of
the SPC key request.

00:13:05.616 --> 00:13:07.966 A:middle
Then it is going to look
up the content key based

00:13:07.966 --> 00:13:10.466 A:middle
on the asset identifier that
the customer wants to play,

00:13:10.526 --> 00:13:13.336 A:middle
and then it is going to
produce the CKC response.

00:13:13.336 --> 00:13:15.326 A:middle
It's the first and third
operation that are going

00:13:15.326 --> 00:13:17.056 A:middle
to be taking place in your KSM.

00:13:17.056 --> 00:13:21.386 A:middle
And the way you go about
implementing that is two fold.

00:13:21.386 --> 00:13:23.896 A:middle
You can either decide
to implement the logic

00:13:23.896 --> 00:13:26.576 A:middle
from scratch using the protocol
specification that's provided

00:13:26.576 --> 00:13:27.716 A:middle
in the FPS SDK.

00:13:28.546 --> 00:13:33.506 A:middle
Or you can just take the
C reference implementation

00:13:33.506 --> 00:13:37.006 A:middle
and customize it either by
using your language of choice

00:13:37.006 --> 00:13:40.646 A:middle
or by integrating it directly
into your existing key server.

00:13:41.226 --> 00:13:43.376 A:middle
So now that that's integrated,

00:13:43.376 --> 00:13:45.716 A:middle
let's talk about how you
are going to test the KSM.

00:13:46.906 --> 00:13:48.756 A:middle
Well, the first thing we
recommend you do is obviously

00:13:48.756 --> 00:13:51.266 A:middle
use the supplied test vectors
that are part of the SDK

00:13:51.976 --> 00:13:53.846 A:middle
to validate the correctness
of the responses

00:13:53.846 --> 00:13:55.256 A:middle
that your KSM is
going to produce.

00:13:55.256 --> 00:13:56.396 A:middle
And the way you go about doing

00:13:56.396 --> 00:14:01.066 A:middle
that is using the
supplied SPC test vectors,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.396 --> 00:14:01.066 A:middle
that is using the
supplied SPC test vectors,

00:14:01.386 --> 00:14:04.156 A:middle
feed them to your
KSM implementation,

00:14:04.546 --> 00:14:08.036 A:middle
and then run the output
CKC that your KSM produced

00:14:08.426 --> 00:14:11.246 A:middle
through the validation tool to
make sure they are correct both

00:14:11.246 --> 00:14:13.006 A:middle
from a cryptographic
point of view

00:14:13.276 --> 00:14:14.566 A:middle
and from a format point of view.

00:14:15.216 --> 00:14:17.686 A:middle
It is important to note that
the test vectors we provide

00:14:17.686 --> 00:14:20.836 A:middle
in the SDK are based on
development credentials.

00:14:20.836 --> 00:14:24.396 A:middle
And they are there exclusively
for your development effort.

00:14:24.396 --> 00:14:26.856 A:middle
They cannot be used
to deploy a solution

00:14:26.856 --> 00:14:28.636 A:middle
to live customer devices.

00:14:28.636 --> 00:14:31.706 A:middle
To do that you're going to
need production FairPlay

00:14:31.706 --> 00:14:32.626 A:middle
Streaming credentials.

00:14:33.156 --> 00:14:35.096 A:middle
So now that we've talked
about the server side,

00:14:35.436 --> 00:14:36.646 A:middle
let's talk about
the client side.

00:14:36.646 --> 00:14:38.406 A:middle
What does it take to
integrate FairPlay Streaming

00:14:38.406 --> 00:14:39.366 A:middle
into your application?

00:14:39.366 --> 00:14:40.336 A:middle
Well, the first thing
you're going to want

00:14:40.336 --> 00:14:43.996 A:middle
to do is register an AV asset
resource loader delegate

00:14:44.266 --> 00:14:46.316 A:middle
with AVAsset, and
the responsibilities

00:14:46.316 --> 00:14:48.446 A:middle
of that delegate are three fold.

00:14:48.446 --> 00:14:50.496 A:middle
The first thing it's going to
be doing is generating the SPC.

00:14:50.496 --> 00:14:53.646 A:middle
And you do that by
implementing these two steps.

00:14:53.646 --> 00:14:56.026 A:middle
You're first going to handle
'should wait for loading

00:14:56.026 --> 00:14:58.456 A:middle
of requested resource'
for the key requests.

00:14:59.086 --> 00:15:00.336 A:middle
And then second of
all you're going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.086 --> 00:15:00.336 A:middle
And then second of
all you're going

00:15:00.336 --> 00:15:03.686 A:middle
to call 'AVAsset resource
loading request streaming

00:15:03.686 --> 00:15:07.326 A:middle
content key request data
for app' to produce the SPC.

00:15:07.326 --> 00:15:10.436 A:middle
Once you've got that SPC
in hand, you're going

00:15:10.436 --> 00:15:11.896 A:middle
to send it to your key server.

00:15:12.366 --> 00:15:14.326 A:middle
And when your key server
responds, you're going

00:15:14.326 --> 00:15:15.556 A:middle
to provide the CKC response

00:15:15.556 --> 00:15:17.566 A:middle
to 'AVAsset resource
loading request.'

00:15:18.456 --> 00:15:20.146 A:middle
So we've got the
server side implemented;

00:15:20.146 --> 00:15:21.476 A:middle
we've got the client
side implemented.

00:15:21.476 --> 00:15:23.836 A:middle
Let's talk about
the workflow updates

00:15:23.836 --> 00:15:25.016 A:middle
in your content authoring.

00:15:25.676 --> 00:15:28.066 A:middle
What are you going to have
to do to encrypt the content?

00:15:28.066 --> 00:15:30.546 A:middle
Well, the first thing you should
do is go pull the HLS Sample

00:15:30.546 --> 00:15:33.376 A:middle
Encryption specifications
from developer.apple.com,

00:15:33.716 --> 00:15:36.536 A:middle
and that will provide you with
all the details you need to know

00:15:36.536 --> 00:15:39.716 A:middle
about encrypting the bit stream
itself, whether audio or video.

00:15:39.716 --> 00:15:43.116 A:middle
Once you have got that bit
stream encrypted you're going

00:15:43.116 --> 00:15:45.686 A:middle
to have to update the
m3u8 playlist to signal,

00:15:45.686 --> 00:15:47.996 A:middle
first of all, what type of
encryption mode you use.

00:15:48.056 --> 00:15:50.486 A:middle
And that, you do that by
setting the method tag

00:15:50.966 --> 00:15:53.426 A:middle
in the m3u8 playlist
to Sample-AES.

00:15:54.636 --> 00:15:57.906 A:middle
Another signal you want to
send to the client is the fact

00:15:57.906 --> 00:16:00.066 A:middle
that you want to use FairPlay
Streaming for the key delivery.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.906 --> 00:16:00.066 A:middle
that you want to use FairPlay
Streaming for the key delivery.

00:16:00.066 --> 00:16:02.786 A:middle
And the way you do that is
an update to another tag

00:16:03.206 --> 00:16:05.456 A:middle
in the m3u8 playlist,
that's the key format tag,

00:16:05.496 --> 00:16:07.726 A:middle
you want it to set it to
com.apple.streamingkeydelivery.

00:16:10.256 --> 00:16:12.956 A:middle
The fact that we've deployed it
for over three years now means

00:16:12.956 --> 00:16:15.236 A:middle
that there's quite some
third-party support

00:16:15.236 --> 00:16:16.916 A:middle
in the encoders out
there right now.

00:16:16.916 --> 00:16:19.966 A:middle
And you can choose to go with
one of those as an alternative

00:16:19.966 --> 00:16:22.356 A:middle
to making updates to
the workflow yourself.

00:16:23.426 --> 00:16:26.086 A:middle
Once you have got your workflow
updated, here is how you go

00:16:26.086 --> 00:16:29.406 A:middle
about checking the correctness
of that encryption workflow.

00:16:30.496 --> 00:16:33.896 A:middle
You can do basically
two comparisons.

00:16:34.076 --> 00:16:36.616 A:middle
But they both start
in the same way.

00:16:36.616 --> 00:16:39.636 A:middle
You start by taking a
clear text piece of content

00:16:40.006 --> 00:16:43.956 A:middle
from the sample SDK and run
that through your new workflow.

00:16:43.956 --> 00:16:46.236 A:middle
And then you can
compare it either

00:16:46.236 --> 00:16:52.666 A:middle
to the same encrypted asset in
the SDK, or you can compare it

00:16:52.666 --> 00:16:55.576 A:middle
to an encrypted version
of that asset that you run

00:16:55.656 --> 00:16:57.346 A:middle
through the HLS media
file segmenter.

00:16:57.666 --> 00:16:59.466 A:middle
The reason why the second
point is interesting is

00:16:59.466 --> 00:17:01.536 A:middle
because you can do it with
your own content as well rather

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.466 --> 00:17:01.536 A:middle
because you can do it with
your own content as well rather

00:17:01.536 --> 00:17:02.486 A:middle
than the sample content.

00:17:03.866 --> 00:17:05.496 A:middle
So now that we've talked
about what it takes

00:17:05.496 --> 00:17:08.185 A:middle
to develop the client
side and the server side,

00:17:08.185 --> 00:17:11.246 A:middle
and updates to your
workflow, that leads us

00:17:11.246 --> 00:17:12.626 A:middle
to functional local playback.

00:17:12.626 --> 00:17:13.616 A:middle
I would like to now talk to you

00:17:13.616 --> 00:17:15.646 A:middle
about FairPlay Streaming
support in AirPlay.

00:17:15.705 --> 00:17:19.296 A:middle
And the support we have
for FairPlay Streaming

00:17:19.296 --> 00:17:23.445 A:middle
and AirPlay is through
the AirPlay video path.

00:17:23.806 --> 00:17:26.776 A:middle
And what that means is
that when you transition

00:17:26.776 --> 00:17:29.806 A:middle
from local playback in your
application to the Apple TV,

00:17:29.806 --> 00:17:32.786 A:middle
it is actually the Apple
TV that is pulling the bits

00:17:32.786 --> 00:17:34.406 A:middle
from the Internet, right?

00:17:34.496 --> 00:17:36.766 A:middle
It is not the sender
device anymore.

00:17:37.916 --> 00:17:40.636 A:middle
And the good news here is that
no new additional code needs

00:17:40.636 --> 00:17:42.456 A:middle
to be written either
in your application

00:17:42.456 --> 00:17:43.376 A:middle
or on the server side.

00:17:43.376 --> 00:17:48.726 A:middle
The KSM supports processing
increment key requests,

00:17:49.176 --> 00:17:51.176 A:middle
both whether they are
coming from an Apple TV

00:17:51.176 --> 00:17:53.186 A:middle
or from an iOS device.

00:17:53.826 --> 00:17:58.626 A:middle
To be clear, the SPC is still
generated on the Apple TV

00:17:59.146 --> 00:18:01.806 A:middle
and the CKC response that your
key server is producing will

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.146 --> 00:18:01.806 A:middle
and the CKC response that your
key server is producing will

00:18:01.806 --> 00:18:03.886 A:middle
also be processed
on the Apple TV.

00:18:05.146 --> 00:18:07.076 A:middle
However, your app
is still responsible

00:18:07.076 --> 00:18:08.376 A:middle
for relaying the messages

00:18:08.376 --> 00:18:10.736 A:middle
between the Apple TV
and the key server.

00:18:10.736 --> 00:18:12.676 A:middle
So the sending device
has to be present.

00:18:13.316 --> 00:18:17.396 A:middle
This gives us the same level
of security as local playback

00:18:17.446 --> 00:18:21.516 A:middle
because the SPC and CKC
messages both originate and end

00:18:21.676 --> 00:18:23.896 A:middle
on the device that is
actually playing the content,

00:18:24.006 --> 00:18:26.226 A:middle
the Apple TV, in this
case, in the AirPlay case.

00:18:28.016 --> 00:18:30.136 A:middle
One important point
to note is the fact

00:18:30.186 --> 00:18:32.626 A:middle
that FairPlay Streaming
content will not be rendered

00:18:32.626 --> 00:18:33.856 A:middle
in AirPlay Mirroring mode.

00:18:34.286 --> 00:18:36.996 A:middle
That also applies to
screen shots and recordings

00:18:37.316 --> 00:18:39.086 A:middle
for FairPlay Streaming
content that's played

00:18:39.086 --> 00:18:39.986 A:middle
on your local device.

00:18:40.916 --> 00:18:43.026 A:middle
So now that we've
spoken about how

00:18:43.026 --> 00:18:47.646 A:middle
to consume the content locally
on your app or through AirPlay,

00:18:48.136 --> 00:18:50.346 A:middle
I'm proud to announce this year

00:18:50.346 --> 00:18:52.926 A:middle
that we are adding FairPlay
Streaming support to El Capitan.

00:18:54.656 --> 00:18:56.996 A:middle
And the way we go about,
the way you would go

00:18:56.996 --> 00:18:59.876 A:middle
about integrating this
into your website is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.236 --> 00:19:03.216 A:middle
through the encrypted media
extensions that are part

00:19:03.216 --> 00:19:07.136 A:middle
of HTML5, that's a
W3C specification

00:19:07.136 --> 00:19:08.726 A:middle
that you can download
on their website.

00:19:09.396 --> 00:19:13.246 A:middle
The way you go about
integrating with EME is

00:19:13.306 --> 00:19:15.786 A:middle
by writing your key
delivery code in JavaScript

00:19:15.916 --> 00:19:18.866 A:middle
on your website, and
we provide an example

00:19:18.866 --> 00:19:21.146 A:middle
of such an implementation
in the SDK.

00:19:21.146 --> 00:19:22.676 A:middle
It is more of a snippet.

00:19:24.096 --> 00:19:29.006 A:middle
The good news here is
that both on the KSM side

00:19:29.126 --> 00:19:32.666 A:middle
and on the AirPlay side there
is no new code that is needed.

00:19:32.666 --> 00:19:34.486 A:middle
It will work out of the box

00:19:34.906 --> 00:19:37.386 A:middle
and everything is fully
supported once you have got your

00:19:37.386 --> 00:19:38.196 A:middle
JavaScript written.

00:19:38.196 --> 00:19:39.986 A:middle
So now let's talk about the
JavaScript you are going

00:19:39.986 --> 00:19:41.956 A:middle
to be writing to add support

00:19:41.956 --> 00:19:43.636 A:middle
for FairPlay Streaming
in your Webpage.

00:19:43.636 --> 00:19:46.756 A:middle
The first thing you're going
to do is set the m3u8 URL

00:19:47.066 --> 00:19:51.106 A:middle
as a source attribute of the
HTML5 video tag as you would

00:19:51.816 --> 00:19:53.426 A:middle
for a non-encrypted
piece of content.

00:19:54.406 --> 00:19:56.066 A:middle
Then you are going to
add an event listener

00:19:56.066 --> 00:20:00.636 A:middle
for the Web kit need key
call to the video element.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:56.066 --> 00:20:00.636 A:middle
for the Web kit need key
call to the video element.

00:20:01.536 --> 00:20:03.926 A:middle
That event listener
when triggered is going

00:20:03.926 --> 00:20:06.466 A:middle
to set the EME content
decryption module

00:20:06.466 --> 00:20:07.636 A:middle
to FairPlay Streaming.

00:20:07.636 --> 00:20:11.136 A:middle
It is also going to create
a key session on video/MP4

00:20:11.206 --> 00:20:13.466 A:middle
to relay the messages
between the key system

00:20:13.466 --> 00:20:14.526 A:middle
and your key server.

00:20:15.126 --> 00:20:16.726 A:middle
And you're going to
add an event handler

00:20:16.726 --> 00:20:19.276 A:middle
for web kit key message
to that key session.

00:20:19.776 --> 00:20:22.236 A:middle
That event handler is going to
be the one that's responsible

00:20:22.236 --> 00:20:25.056 A:middle
for sending the SPC key
request to your key server

00:20:25.416 --> 00:20:28.476 A:middle
and then processing
the CKC response

00:20:28.796 --> 00:20:30.046 A:middle
by updating the key session.

00:20:31.126 --> 00:20:33.916 A:middle
In terms of the data flow,
we've got very similar actors

00:20:33.916 --> 00:20:34.776 A:middle
on the left-hand side.

00:20:34.776 --> 00:20:36.766 A:middle
We have the same ones
on the right-hand side.

00:20:36.766 --> 00:20:39.776 A:middle
We have got Safari now
that Apple provides,

00:20:39.776 --> 00:20:41.226 A:middle
along with the EME stack.

00:20:41.706 --> 00:20:45.026 A:middle
Within Safari we have got
your site, and the new piece

00:20:45.026 --> 00:20:46.766 A:middle
of JavaScript code that
you are going to be writing

00:20:47.116 --> 00:20:50.076 A:middle
to support FairPlay
Streaming content playback

00:20:50.076 --> 00:20:50.696 A:middle
in your website.

00:20:51.326 --> 00:20:54.146 A:middle
Let's talk about what happens

00:20:54.146 --> 00:20:56.116 A:middle
when the user hits
play in Safari.

00:20:56.116 --> 00:20:57.416 A:middle
So, the user hits play.

00:20:57.416 --> 00:20:59.496 A:middle
The first thing that is going
to happen is, obviously,

00:20:59.496 --> 00:21:03.376 A:middle
the m3u8 is going to hit
the EME and AVFoundation

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.496 --> 00:21:03.376 A:middle
the m3u8 is going to hit
the EME and AVFoundation

00:21:03.516 --> 00:21:06.006 A:middle
in the operating system,
and EME is going to notice

00:21:06.046 --> 00:21:09.006 A:middle
that the content is encrypted,
which is going to cause it

00:21:09.186 --> 00:21:12.786 A:middle
to trigger the Web
kit need key message

00:21:12.786 --> 00:21:14.366 A:middle
that your event listener
is going to receive.

00:21:16.396 --> 00:21:18.556 A:middle
Then your event listener is
going to create the key session

00:21:18.556 --> 00:21:21.086 A:middle
and is going to wait for
the Web kit key message,

00:21:21.186 --> 00:21:23.176 A:middle
which in turn is going
to trigger the handler,

00:21:23.826 --> 00:21:26.666 A:middle
and that handler is
going to receive the SPC,

00:21:26.726 --> 00:21:29.526 A:middle
send it over to your key server,
which is going to process it

00:21:29.526 --> 00:21:31.076 A:middle
as usual, pull the content key

00:21:31.146 --> 00:21:34.746 A:middle
and then create the content key
response, send that CKC back

00:21:34.816 --> 00:21:37.576 A:middle
to your JavaScript, which
will provide it back

00:21:37.616 --> 00:21:39.906 A:middle
down to the EME layer
for playback.

00:21:41.126 --> 00:21:45.746 A:middle
As Roger described, we've had
this solution deployed now

00:21:45.746 --> 00:21:49.986 A:middle
for over three years, and over
the years we've learned a few

00:21:49.986 --> 00:21:53.676 A:middle
tips and tricks on how to
troubleshoot integrating issues

00:21:53.916 --> 00:21:55.726 A:middle
with FairPlay Streaming.

00:21:56.256 --> 00:21:58.876 A:middle
And the typical issue
you may be facing,

00:21:59.596 --> 00:22:02.186 A:middle
if unfortunately something goes
wrong with your integration,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.596 --> 00:22:02.186 A:middle
if unfortunately something goes
wrong with your integration,

00:22:02.466 --> 00:22:03.666 A:middle
is that content doesn't play.

00:22:04.366 --> 00:22:08.086 A:middle
So how do you go about
debugging that situation?

00:22:08.276 --> 00:22:11.286 A:middle
Well, one thing we
recommend you do is --

00:22:11.286 --> 00:22:13.486 A:middle
and this is for debug purposes
only, we don't recommend

00:22:13.486 --> 00:22:14.946 A:middle
that you do this in a
production environment, but --

00:22:15.366 --> 00:22:19.196 A:middle
set your key format tag in
the m3u8 playlist to identity,

00:22:19.806 --> 00:22:22.126 A:middle
instead of
com.apple.streamingkeydelivery.

00:22:22.506 --> 00:22:25.956 A:middle
What this does is, it allows
the same content to get

00:22:25.956 --> 00:22:28.536 A:middle
to your client, but
instead of decrypting it

00:22:28.536 --> 00:22:29.916 A:middle
with FairPlay Streaming,
it decrypts it

00:22:29.916 --> 00:22:31.716 A:middle
with a clear text AES key.

00:22:32.596 --> 00:22:36.016 A:middle
And what we end up is either
in one of two situations.

00:22:36.016 --> 00:22:37.446 A:middle
Your content is still
not playing,

00:22:37.766 --> 00:22:41.686 A:middle
in which case this is probably
facing a content authoring

00:22:41.686 --> 00:22:43.976 A:middle
issue, and those
issues typically fall

00:22:43.976 --> 00:22:45.156 A:middle
into one of four buckets.

00:22:45.776 --> 00:22:49.226 A:middle
Either your sample of
encryption has an issue and in

00:22:49.226 --> 00:22:50.206 A:middle
that case I'd refer you

00:22:50.206 --> 00:22:53.226 A:middle
to the HLS Sample
encryption specification.

00:22:53.556 --> 00:22:56.126 A:middle
It could be an issue with
your PAT/PMT audio set up.

00:22:56.406 --> 00:22:59.636 A:middle
Those are steps that you need
to perform on audio streams

00:22:59.636 --> 00:23:01.216 A:middle
that are encoded,
that are encrypted

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.636 --> 00:23:01.216 A:middle
that are encoded,
that are encrypted

00:23:01.216 --> 00:23:02.246 A:middle
with FairPlay Streaming.

00:23:02.246 --> 00:23:04.706 A:middle
There are a few metadata
updates that need to happen.

00:23:05.776 --> 00:23:07.336 A:middle
It may be the case that
you are not using one

00:23:07.336 --> 00:23:08.396 A:middle
of the supported codecs.

00:23:08.396 --> 00:23:10.676 A:middle
And as Roger mentioned earlier,
what we support right now

00:23:10.676 --> 00:23:15.066 A:middle
in FairPlay Streaming is
H.264, AAC, and encrypted AC3.

00:23:15.726 --> 00:23:18.406 A:middle
Last but not least, it may be
you are rotating your content

00:23:18.466 --> 00:23:21.866 A:middle
key on something that
isn't an HLS segment.

00:23:22.316 --> 00:23:26.106 A:middle
So we recommend that you rotate
your keys either on HLS segments

00:23:26.186 --> 00:23:28.736 A:middle
at the most granular level
or you can also decide

00:23:28.736 --> 00:23:32.386 A:middle
to change your content key
value on a bit rate switch.

00:23:33.336 --> 00:23:37.096 A:middle
If your content is playing after
you update the key format tag

00:23:37.166 --> 00:23:40.196 A:middle
to identity, you are probably
facing a key delivery issue.

00:23:40.706 --> 00:23:43.696 A:middle
And in that case, what you
want to do is you want to trace

00:23:43.796 --> 00:23:45.306 A:middle
through the data
flow that we went

00:23:45.896 --> 00:23:48.366 A:middle
through in the earlier
diagrams, and make sure

00:23:48.396 --> 00:23:50.546 A:middle
that the SPC is properly
generated by the client,

00:23:50.546 --> 00:23:53.396 A:middle
that it's sent to your server,
that your server can process

00:23:53.456 --> 00:23:55.236 A:middle
that key request
without any failures,

00:23:55.416 --> 00:23:57.776 A:middle
that your server is looking up
the right key in the database,

00:23:58.156 --> 00:24:02.206 A:middle
that your server is also capable
of packaging the content key

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.156 --> 00:24:02.206 A:middle
that your server is also capable
of packaging the content key

00:24:02.206 --> 00:24:05.196 A:middle
into content key response,
and that the client is able

00:24:05.196 --> 00:24:06.876 A:middle
to process that without
any errors.

00:24:08.026 --> 00:24:11.706 A:middle
So, now that we went
over all the various ways

00:24:11.936 --> 00:24:15.296 A:middle
of consuming FairPlay Streaming
content in the Apple ecosystem,

00:24:15.296 --> 00:24:17.246 A:middle
I would like to hand it back to
Roger to wrap the session up.

00:24:17.246 --> 00:24:17.976 A:middle
Thank you very much
for your time.

00:24:18.516 --> 00:24:25.256 A:middle
[Applause]

00:24:25.756 --> 00:24:26.966 A:middle
&gt;&gt; ROGER PANTOS:
Thanks very much, GP.

00:24:27.486 --> 00:24:29.246 A:middle
So, let's do a quick recap here.

00:24:30.086 --> 00:24:34.936 A:middle
FairPlay Streaming for HTTP
Live Streaming, it provides you

00:24:34.936 --> 00:24:38.956 A:middle
with industrial strength
tools to protect your content

00:24:39.316 --> 00:24:40.826 A:middle
with HTTP live streaming.

00:24:40.826 --> 00:24:44.566 A:middle
You have got it available
on iOS,

00:24:44.656 --> 00:24:49.156 A:middle
on Apple TV, and now on OS X.

00:24:49.156 --> 00:24:52.416 A:middle
iOS, it's available since iOS
6, so there's a fair amount

00:24:52.416 --> 00:24:56.806 A:middle
of backward compatibility,
and also on Apple TV.

00:24:57.236 --> 00:25:00.176 A:middle
OS X is a little bit newer, and
so you can come down and talk

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.236 --> 00:25:00.176 A:middle
OS X is a little bit newer, and
so you can come down and talk

00:25:00.176 --> 00:25:02.796 A:middle
to us in the labs, and we
will give you the entire scoop

00:25:02.796 --> 00:25:03.796 A:middle
on where you can use it.

00:25:03.946 --> 00:25:07.356 A:middle
It has been deeply
integrated into the OS.

00:25:07.436 --> 00:25:10.676 A:middle
That means that it is down
as low as we can get it,

00:25:10.756 --> 00:25:12.126 A:middle
as secure as we can make it.

00:25:12.436 --> 00:25:14.896 A:middle
It is as power efficient
as we can do.

00:25:15.206 --> 00:25:16.866 A:middle
And so it gives you
great battery life

00:25:16.866 --> 00:25:18.086 A:middle
as well as great security.

00:25:19.036 --> 00:25:22.996 A:middle
And it also supports all
of our ecosystem features

00:25:23.346 --> 00:25:28.946 A:middle
such as AirPlay, such as HDCP,
HTML5, and we will continue

00:25:28.946 --> 00:25:32.566 A:middle
to do so as we roll out
new features going forward.

00:25:34.256 --> 00:25:38.346 A:middle
So, what's next?

00:25:38.346 --> 00:25:41.886 A:middle
First stop is our new
FairPlay Streaming portal

00:25:42.116 --> 00:25:44.046 A:middle
on developer.apple.com.

00:25:44.086 --> 00:25:46.186 A:middle
It's live now, so you
can go there, you know,

00:25:46.646 --> 00:25:48.466 A:middle
you can go there right now.

00:25:48.466 --> 00:25:51.476 A:middle
And you can, from there
you can download the SDK.

00:25:51.476 --> 00:25:53.976 A:middle
You can look at the
overview document

00:25:53.976 --> 00:25:57.196 A:middle
that gives you a little bit
of a deeper insight into some

00:25:57.196 --> 00:25:58.756 A:middle
of the details of
FairPlay Streaming.

00:25:59.246 --> 00:26:01.706 A:middle
And you can also,
through that site,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.246 --> 00:26:01.706 A:middle
And you can also,
through that site,

00:26:01.706 --> 00:26:04.696 A:middle
apply for your production
developer credentials

00:26:04.696 --> 00:26:08.786 A:middle
that are necessary for you to
do your round trip playback

00:26:09.116 --> 00:26:12.536 A:middle
to an actual iOS
device or Safari.

00:26:13.416 --> 00:26:18.846 A:middle
And the next thing, and I
should also mention, actually,

00:26:18.846 --> 00:26:22.156 A:middle
that on that site, on
that landing page there,

00:26:22.506 --> 00:26:27.776 A:middle
there may be some of you who
don't have an existing back end

00:26:28.146 --> 00:26:31.246 A:middle
or are a little bit
intimidated by the idea

00:26:31.246 --> 00:26:34.246 A:middle
of integrating FairPlay
Streaming into that back end.

00:26:34.616 --> 00:26:38.566 A:middle
So on that landing page
we have a little list

00:26:38.856 --> 00:26:42.846 A:middle
of integration partners we've
worked with, folks like Irdeto,

00:26:42.846 --> 00:26:49.796 A:middle
folks like Adobe, who have
set up some support for folks

00:26:49.796 --> 00:26:52.276 A:middle
who wish to use FairPlay
Streaming

00:26:52.516 --> 00:26:54.096 A:middle
to protect their HLS content.

00:26:54.176 --> 00:26:57.026 A:middle
And so I would recommend
checking

00:26:57.026 --> 00:26:58.116 A:middle
out those folks as well.

00:26:58.116 --> 00:26:59.936 A:middle
If you feel like you
need a little bit

00:26:59.936 --> 00:27:01.736 A:middle
of help getting FairPlay
Streaming up

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.936 --> 00:27:01.736 A:middle
of help getting FairPlay
Streaming up

00:27:01.736 --> 00:27:03.886 A:middle
and running for your content.

00:27:04.536 --> 00:27:06.486 A:middle
It is, it's, I think
it's pretty easy to do,

00:27:06.486 --> 00:27:08.796 A:middle
but not everyone is
in that business.

00:27:08.796 --> 00:27:10.886 A:middle
And so there's help for
you there if you need it.

00:27:11.606 --> 00:27:18.276 A:middle
Also, if you would like to
get HLS and FPS working,

00:27:18.616 --> 00:27:21.846 A:middle
and it feels a little bit
like there're still questions

00:27:21.846 --> 00:27:23.426 A:middle
or you've tried it and
you've got some problems,

00:27:23.776 --> 00:27:25.356 A:middle
if you are not at WWDC,

00:27:25.976 --> 00:27:29.946 A:middle
then your best first stop
is our developer forums.

00:27:30.106 --> 00:27:32.236 A:middle
And we've actually
set up, I believe it's

00:27:32.236 --> 00:27:34.486 A:middle
in the beta section
right now, but we've set

00:27:34.486 --> 00:27:37.816 A:middle
up a new forum specifically
for FairPlay Streaming.

00:27:38.226 --> 00:27:41.226 A:middle
And so check that out.

00:27:41.346 --> 00:27:43.146 A:middle
If you are running
into a problem

00:27:43.146 --> 00:27:45.466 A:middle
or you have got a question,
there's pretty good odds

00:27:45.526 --> 00:27:48.846 A:middle
that somebody else has had the
same question, same problem,

00:27:49.106 --> 00:27:50.526 A:middle
and you might just be
able to find the answer

00:27:50.526 --> 00:27:52.786 A:middle
by looking in the forums.

00:27:52.846 --> 00:27:54.536 A:middle
Failing that, there
is, of course,

00:27:54.536 --> 00:27:56.476 A:middle
your friendly neighborhood
developer tech support

00:27:56.786 --> 00:27:59.786 A:middle
representative who will be happy
to assist you for a small fee.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.436 --> 00:28:02.516 A:middle
I think that's it.

00:28:03.886 --> 00:28:05.046 A:middle
Thank you again for coming.

00:28:05.366 --> 00:28:06.806 A:middle
And have a great show!

00:28:07.508 --> 00:28:09.508 A:middle
[Applause]

