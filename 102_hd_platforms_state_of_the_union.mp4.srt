WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:16.696 --> 00:00:17.666 A:middle
&gt;&gt; Ladies and gentlemen,

00:00:18.056 --> 00:00:23.176 A:middle
please welcome Vice President
OS X Platform, Andreas Wendker.

00:00:25.476 --> 00:00:30.936 A:middle
[ Cheers and applause ]

00:00:31.436 --> 00:00:32.125 A:middle
&gt;&gt; ANDREAS WENDKER:
Good afternoon.

00:00:33.066 --> 00:00:35.466 A:middle
Welcome to WWDC 2015.

00:00:35.986 --> 00:00:39.646 A:middle
This is another exciting year
to be an Apple developer.

00:00:39.646 --> 00:00:41.686 A:middle
With the addition of
the new watchOS SDK,

00:00:41.686 --> 00:00:45.936 A:middle
there are now three major
platforms for your apps.

00:00:46.166 --> 00:00:48.856 A:middle
Our approach with these
platforms is integrating great

00:00:48.856 --> 00:00:50.906 A:middle
products with unique
user experiences,

00:00:51.606 --> 00:00:54.306 A:middle
while leveraging the same
underlying OS technologies,

00:00:54.546 --> 00:00:57.916 A:middle
APIs, and programming
concepts so it's easy to move

00:00:57.916 --> 00:00:59.896 A:middle
between these platforms
to share code

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.246 --> 00:01:02.856 A:middle
and make these apps work
together across the platforms.

00:01:03.036 --> 00:01:05.506 A:middle
But we are preserving a unique
flavor for each of them.

00:01:06.176 --> 00:01:09.656 A:middle
The SDKs with these
three platforms are going

00:01:09.656 --> 00:01:12.666 A:middle
to ship later this year with a
new version of our Xcode IDE.

00:01:12.666 --> 00:01:14.306 A:middle
It's going to be version 7.

00:01:15.356 --> 00:01:17.136 A:middle
It contains a number
of great new features.

00:01:17.316 --> 00:01:19.036 A:middle
I just want to highlight
one here at the beginning

00:01:19.036 --> 00:01:21.976 A:middle
of the session, that is that
we are going to allow anyone

00:01:22.046 --> 00:01:24.176 A:middle
with an Apple ID
to download Xcode

00:01:24.246 --> 00:01:26.186 A:middle
and run their apps
on their own devices.

00:01:27.676 --> 00:01:36.186 A:middle
[ Applause ]

00:01:36.686 --> 00:01:39.216 A:middle
If you really want to make
becoming a developer a lot more

00:01:39.216 --> 00:01:41.706 A:middle
approachable, especially
for our younger students,

00:01:42.066 --> 00:01:44.396 A:middle
so this will work with
all three platforms.

00:01:46.296 --> 00:01:48.986 A:middle
Once you have worked on your
app and you want to deploy it,

00:01:48.986 --> 00:01:50.516 A:middle
we have another bit
of good news for you.

00:01:51.096 --> 00:01:54.186 A:middle
As of today, a single paid
developer program membership

00:01:54.406 --> 00:01:58.196 A:middle
will be enough to deploy your
apps in all our App Stores.

00:01:58.296 --> 00:01:59.736 A:middle
You don't have to
sign up and pay

00:01:59.736 --> 00:02:01.066 A:middle
for multiple memberships
anymore.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.736 --> 00:02:01.066 A:middle
for multiple memberships
anymore.

00:02:02.516 --> 00:02:09.506 A:middle
[ Applause ]

00:02:10.006 --> 00:02:11.446 A:middle
Of course, with that
single paid membership,

00:02:11.706 --> 00:02:14.006 A:middle
you get many additional
benefits,

00:02:14.276 --> 00:02:16.046 A:middle
like access to pre-release
software,

00:02:16.396 --> 00:02:19.256 A:middle
or our powerful store analytics
and crash reporting tools.

00:02:20.066 --> 00:02:25.856 A:middle
Now, let me talk about
software updates a little bit.

00:02:25.906 --> 00:02:27.546 A:middle
The iOS adoption
curve is, of course,

00:02:27.546 --> 00:02:30.906 A:middle
the envy of the entire industry,
and it's a huge advantage

00:02:30.906 --> 00:02:33.246 A:middle
to U.S. developers because
you don't have to deal

00:02:33.246 --> 00:02:35.076 A:middle
with the same fragmentation
that you find

00:02:35.076 --> 00:02:36.496 A:middle
in other app ecosystems.

00:02:38.226 --> 00:02:40.746 A:middle
However, with iOS 8,
we found that a number

00:02:40.746 --> 00:02:42.676 A:middle
of users had a difficult
time upgrading

00:02:42.676 --> 00:02:43.686 A:middle
because of the large amount

00:02:43.686 --> 00:02:45.756 A:middle
of free space required
for the installation.

00:02:46.496 --> 00:02:47.406 A:middle
We've been bringing that number

00:02:47.406 --> 00:02:49.636 A:middle
down with our subsequent
iOS 8 updates,

00:02:49.926 --> 00:02:52.176 A:middle
and we are continuing
to do so with iOS 9.

00:02:52.326 --> 00:02:53.976 A:middle
As you already heard this
morning in the keynote,

00:02:54.176 --> 00:02:57.526 A:middle
iOS 9 will only require 1.3
gigabytes of free space.

00:02:57.526 --> 00:03:01.666 A:middle
We are also changing the way
software updates are presented

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.526 --> 00:03:01.666 A:middle
We are also changing the way
software updates are presented

00:03:01.666 --> 00:03:02.176 A:middle
to the user.

00:03:02.576 --> 00:03:05.676 A:middle
Users will be given a choice
to install right now or later

00:03:05.676 --> 00:03:08.346 A:middle
at night, when they might not
need access to their devices.

00:03:08.346 --> 00:03:11.506 A:middle
So we think this is going
to keep pushing users

00:03:11.506 --> 00:03:14.966 A:middle
to update quickly and allow
you to focus your energies

00:03:15.136 --> 00:03:20.466 A:middle
on the latest version of iOS.

00:03:20.656 --> 00:03:22.636 A:middle
Now, we are also working
on a number of technologies

00:03:22.636 --> 00:03:25.116 A:middle
that we call App Thinning
that will enable you

00:03:25.116 --> 00:03:26.936 A:middle
to return some space
to your users.

00:03:28.006 --> 00:03:31.176 A:middle
App Thinning consists of three
technologies: App Slicing,

00:03:31.526 --> 00:03:33.716 A:middle
On Demand Resources,
and Bitcode.

00:03:34.396 --> 00:03:35.906 A:middle
Let's go over these
one after the other,

00:03:36.006 --> 00:03:36.926 A:middle
starting with Slicing.

00:03:39.296 --> 00:03:41.876 A:middle
Developing an app for iOS
actually means developing

00:03:41.876 --> 00:03:43.526 A:middle
multiple variants
of the same app

00:03:43.576 --> 00:03:45.256 A:middle
and then packaging
them all together

00:03:45.256 --> 00:03:46.446 A:middle
into a single app bundle.

00:03:47.126 --> 00:03:49.146 A:middle
So if you look inside an
app, you find a number

00:03:49.146 --> 00:03:51.946 A:middle
of redundant components
to cover the full breadth

00:03:51.946 --> 00:03:52.776 A:middle
of Apple devices.

00:03:53.906 --> 00:03:57.126 A:middle
There are binaries for 32- and
64-bit processor architectures;

00:03:58.086 --> 00:04:00.386 A:middle
images for different screen
sizes and resolutions;

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.086 --> 00:04:00.386 A:middle
images for different screen
sizes and resolutions;

00:04:01.466 --> 00:04:03.666 A:middle
and resources like
shaders, potentially written

00:04:03.666 --> 00:04:06.246 A:middle
in different languages for
the various kinds of GPUs.

00:04:07.556 --> 00:04:09.836 A:middle
But to run an app on each
given kind of device,

00:04:10.276 --> 00:04:12.606 A:middle
you only need a single
slice of these components.

00:04:14.006 --> 00:04:16.036 A:middle
So to make the most of the
available storage space,

00:04:16.036 --> 00:04:18.536 A:middle
we are going to strip
away all the components

00:04:18.536 --> 00:04:19.696 A:middle
that are not actually needed

00:04:19.696 --> 00:04:21.156 A:middle
on the device the
app is running on.

00:04:22.746 --> 00:04:25.656 A:middle
So you would still develop and
submit the same universal app

00:04:25.656 --> 00:04:29.526 A:middle
that you are used to, but the
store will only deliver a thin

00:04:29.526 --> 00:04:31.976 A:middle
variant of the app to
the user at install time.

00:04:34.476 --> 00:04:40.766 A:middle
[ Applause ]

00:04:41.266 --> 00:04:44.046 A:middle
So this leads to quite
impressive size reductions.

00:04:44.046 --> 00:04:48.086 A:middle
As you can see on the chart,
typical apps will get savings

00:04:48.086 --> 00:04:49.886 A:middle
in the range of 20
percent to 40 percent.

00:04:51.116 --> 00:04:54.016 A:middle
And leveraging App Slicing
is particularly interesting

00:04:54.016 --> 00:04:55.876 A:middle
for apps like games
that often bump

00:04:55.876 --> 00:04:58.986 A:middle
up against the download size
limit for cellular app installs.

00:04:59.636 --> 00:05:01.956 A:middle
The thin variants will have
a much easier time staying

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.636 --> 00:05:01.956 A:middle
The thin variants will have
a much easier time staying

00:05:01.956 --> 00:05:02.896 A:middle
under that size limit,

00:05:03.326 --> 00:05:06.016 A:middle
so you can now pack more
device-specific resources

00:05:06.016 --> 00:05:07.666 A:middle
into your apps and
provide the users

00:05:07.666 --> 00:05:09.156 A:middle
with a more refined experience.

00:05:10.556 --> 00:05:13.236 A:middle
And best of all, assuming
you are using Xcode's asset

00:05:13.236 --> 00:05:14.306 A:middle
catalogues, you don't have

00:05:14.306 --> 00:05:15.976 A:middle
to change a single
thing in your projects.

00:05:16.026 --> 00:05:17.686 A:middle
The Store will simply
do this automatically

00:05:17.686 --> 00:05:19.916 A:middle
for you the next time
you submit your app.

00:05:21.036 --> 00:05:23.186 A:middle
If you're using additional
custom data formats,

00:05:23.496 --> 00:05:26.966 A:middle
we ask that you opt into slicing
by creating an Asset Catalog

00:05:26.966 --> 00:05:30.406 A:middle
and using the new asset
categories we added to declare

00:05:30.406 --> 00:05:32.766 A:middle
for what kind of devices
your resources are needed.

00:05:32.766 --> 00:05:39.346 A:middle
Now, some apps benefit from
using even more resources,

00:05:39.486 --> 00:05:41.566 A:middle
through they usually don't
need them all at the same time.

00:05:42.196 --> 00:05:44.166 A:middle
For those kind of
situations, we are introducing

00:05:44.346 --> 00:05:48.646 A:middle
On Demand Resources,
or in short, ODR.

00:05:48.646 --> 00:05:51.156 A:middle
With ODR, the store will
separate your resources

00:05:51.156 --> 00:05:52.946 A:middle
into the appropriate
device slices

00:05:53.026 --> 00:05:54.896 A:middle
and then host them
on Apple servers.

00:05:55.756 --> 00:05:56.896 A:middle
But downloading gets delayed

00:05:56.896 --> 00:05:58.866 A:middle
until your app explicitly
requests them,

00:05:59.176 --> 00:06:01.726 A:middle
and then later iOS
will reclaim that space

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.176 --> 00:06:01.726 A:middle
and then later iOS
will reclaim that space

00:06:01.786 --> 00:06:03.776 A:middle
when your app doesn't need
the resources anymore.

00:06:05.696 --> 00:06:09.366 A:middle
Typical candidates for
ODR are level-based games,

00:06:09.536 --> 00:06:12.416 A:middle
but many other apps can
benefit from ODR as well.

00:06:12.806 --> 00:06:15.656 A:middle
For example, you might want to
consider offloading tutorials

00:06:16.006 --> 00:06:18.926 A:middle
into ODR assets so that
they only get downloaded

00:06:18.926 --> 00:06:23.366 A:middle
when the user actually
wants to watch them.

00:06:23.566 --> 00:06:26.076 A:middle
Using ODR requires a little
more planning on your part,

00:06:26.386 --> 00:06:28.346 A:middle
but the important point
is that you can use more

00:06:28.346 --> 00:06:32.326 A:middle
than 4 gigabytes of resources,
just not all at the same time.

00:06:32.956 --> 00:06:36.436 A:middle
So App Slicing and On
Demand Resources are going

00:06:36.436 --> 00:06:39.886 A:middle
to help greatly with the
storage space for an app.

00:06:39.886 --> 00:06:41.886 A:middle
But we are also working
on a new technology

00:06:41.886 --> 00:06:42.946 A:middle
that is a little
more forward-looking.

00:06:42.946 --> 00:06:44.666 A:middle
We are introducing Bitcode

00:06:44.666 --> 00:06:46.416 A:middle
into the App Store
submission process.

00:06:47.756 --> 00:06:51.106 A:middle
Bitcode is an LLVM Intermediate
Representation of your binary,

00:06:51.406 --> 00:06:54.816 A:middle
which allows the store
to reoptimize your apps

00:06:54.816 --> 00:06:58.146 A:middle
for each kind of device before
they get delivered to the user.

00:06:59.206 --> 00:07:01.866 A:middle
You develop and debug the
app the normal way in Xcode,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.206 --> 00:07:01.866 A:middle
You develop and debug the
app the normal way in Xcode,

00:07:02.556 --> 00:07:03.886 A:middle
but the store will
be in a position

00:07:03.886 --> 00:07:08.166 A:middle
to constantly reapply the latest
compiler optimizations we have

00:07:08.166 --> 00:07:10.676 A:middle
been working on so that
your apps run great

00:07:10.806 --> 00:07:11.936 A:middle
on all kinds of devices.

00:07:12.826 --> 00:07:16.626 A:middle
It also future-proofs your apps
because it will allow the store

00:07:16.836 --> 00:07:18.616 A:middle
to let your apps take advantage

00:07:19.066 --> 00:07:22.816 A:middle
of new processor capabilities we
might be adding in the future,

00:07:23.266 --> 00:07:24.546 A:middle
and all that without you having

00:07:24.546 --> 00:07:25.996 A:middle
to resubmit your
app to the store.

00:07:28.476 --> 00:07:34.736 A:middle
[ Applause ]

00:07:35.236 --> 00:07:37.246 A:middle
So generating Bitcode
is controlled

00:07:37.246 --> 00:07:38.766 A:middle
with a simple setting in Xcode.

00:07:38.766 --> 00:07:41.856 A:middle
It will be mandatory for
all watchOS apps right

00:07:41.856 --> 00:07:44.956 A:middle
from the beginning, and for iOS
it will be optional for now,

00:07:45.756 --> 00:07:47.646 A:middle
though we feel that the
benefits are so strong

00:07:47.646 --> 00:07:48.216 A:middle
that we are you are going

00:07:48.216 --> 00:07:50.516 A:middle
to opt all your projects
into it by default.

00:07:51.976 --> 00:07:53.476 A:middle
So that's App Thinning.

00:07:53.476 --> 00:07:57.256 A:middle
It consists of App Slicing, On
Demand Resources, and Bitcode.

00:07:57.646 --> 00:07:59.356 A:middle
These will greatly
optimize your apps,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.736 --> 00:08:02.156 A:middle
especially for storage space.

00:08:03.176 --> 00:08:04.586 A:middle
Now let's take another
quick look

00:08:04.806 --> 00:08:06.226 A:middle
at the binaries in your apps.

00:08:06.226 --> 00:08:08.566 A:middle
The store currently requires
you to submit both 32-

00:08:08.566 --> 00:08:10.266 A:middle
and 64-bit versions
of your apps.

00:08:11.536 --> 00:08:13.866 A:middle
Over the last few years,
we've seen an explosion

00:08:13.866 --> 00:08:16.516 A:middle
in processor capabilities
on our iOS devices.

00:08:17.146 --> 00:08:19.976 A:middle
For our CPUs and even
more so for our GPUs,

00:08:20.536 --> 00:08:23.466 A:middle
and all that especially since
we introduced our 64-bit

00:08:23.466 --> 00:08:24.586 A:middle
processor architectures.

00:08:25.406 --> 00:08:28.286 A:middle
So this category of apps
that are really only possible

00:08:28.716 --> 00:08:30.736 A:middle
when they target these
64-bit processors --

00:08:31.996 --> 00:08:33.346 A:middle
64-bit architectures.

00:08:33.346 --> 00:08:36.606 A:middle
So going forward, we will allow
you to submit 64-bit only apps

00:08:36.606 --> 00:08:39.785 A:middle
to the store, starting
with iOS 9 later this year.

00:08:41.476 --> 00:08:45.656 A:middle
[ Applause ]

00:08:46.156 --> 00:08:47.936 A:middle
So next we want to talk
about the watchOS SDK,

00:08:47.936 --> 00:08:50.186 A:middle
and to talk more about
that, I am going to hand it

00:08:50.186 --> 00:08:51.816 A:middle
over to my colleague,
Eliza Block.

00:08:53.516 --> 00:09:01.416 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:53.516 --> 00:09:01.416 A:middle
[ Applause ]

00:09:01.916 --> 00:09:02.666 A:middle
&gt;&gt; ELIZA BLOCK: Thank
you, Andreas.

00:09:04.786 --> 00:09:07.726 A:middle
We're delighted by the reception
that the Watch has gotten

00:09:07.726 --> 00:09:08.936 A:middle
in the developer community.

00:09:10.676 --> 00:09:12.496 A:middle
There are already thousands

00:09:12.496 --> 00:09:14.896 A:middle
of your WatchKit applications
available in the Store,

00:09:14.896 --> 00:09:18.246 A:middle
and today I am excited to
get to tell you a little more

00:09:18.246 --> 00:09:20.756 A:middle
about some of the great new
features we're introducing

00:09:21.016 --> 00:09:26.446 A:middle
in the watchOS 2 SDK.

00:09:26.726 --> 00:09:28.606 A:middle
First, let's talk
about the architecture

00:09:28.606 --> 00:09:30.656 A:middle
of an existing watchOS
application.

00:09:31.976 --> 00:09:34.486 A:middle
You have a user interface,
which you've constructed

00:09:34.486 --> 00:09:37.306 A:middle
as a storyboard, and this
is installed on the watch.

00:09:38.806 --> 00:09:42.516 A:middle
Powering this user interface
is your app extension,

00:09:42.816 --> 00:09:47.396 A:middle
which runs on the iPhone.

00:09:47.606 --> 00:09:51.446 A:middle
In watchOS 2, we are
making a significant change

00:09:51.616 --> 00:09:52.406 A:middle
to this architecture.

00:09:53.676 --> 00:09:56.566 A:middle
The user interface remains the
same, but the extension moves

00:09:56.566 --> 00:09:58.336 A:middle
over to run natively
on the Watch,

00:09:58.706 --> 00:10:00.376 A:middle
and this has a number
of advantages.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.706 --> 00:10:00.376 A:middle
and this has a number
of advantages.

00:10:02.916 --> 00:10:06.436 A:middle
Because interactions with your
Watch application no longer

00:10:06.436 --> 00:10:11.076 A:middle
require a round-trip to the
iPhone, your users are going

00:10:11.076 --> 00:10:13.786 A:middle
to notice a substantial
improvement to the speed

00:10:13.786 --> 00:10:15.476 A:middle
and responsiveness
of your application.

00:10:16.506 --> 00:10:18.146 A:middle
And of course, for
the same reason,

00:10:18.416 --> 00:10:20.856 A:middle
your Watch application
can now work even

00:10:21.126 --> 00:10:23.896 A:middle
when the iPhone isn't present.

00:10:23.896 --> 00:10:26.376 A:middle
And since the extension is
running natively on the Watch,

00:10:26.616 --> 00:10:28.406 A:middle
it gets access to
the Watch hardware,

00:10:28.726 --> 00:10:30.616 A:middle
which opens up tons
of possibilities.

00:10:36.056 --> 00:10:40.196 A:middle
Okay. So now that you're writing
a native watchOS application,

00:10:40.706 --> 00:10:42.226 A:middle
what APIs are you going to use?

00:10:43.586 --> 00:10:46.166 A:middle
The good news is it's many
of the same frameworks

00:10:46.526 --> 00:10:50.666 A:middle
that you're already familiar
with from developing for iOS.

00:10:54.556 --> 00:10:56.496 A:middle
There's one important addition.

00:10:58.236 --> 00:11:01.836 A:middle
The watch connectivity framework
allows your extension to talk

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.236 --> 00:11:01.836 A:middle
The watch connectivity framework
allows your extension to talk

00:11:01.836 --> 00:11:03.726 A:middle
to the iPhone app, which,
of course, is now running

00:11:03.726 --> 00:11:05.346 A:middle
on a different device.

00:11:08.556 --> 00:11:11.516 A:middle
In addition, your
extension can talk directly

00:11:11.516 --> 00:11:14.566 A:middle
to web services using
the NSURLSession API.

00:11:15.346 --> 00:11:21.136 A:middle
And this works even when
your iPhone is out of range.

00:11:22.476 --> 00:11:33.546 A:middle
[ Applause ]

00:11:34.046 --> 00:11:36.076 A:middle
There are three ways
of surfacing your data

00:11:36.076 --> 00:11:37.886 A:middle
in an existing watchOS
application --

00:11:38.226 --> 00:11:42.006 A:middle
Glances, Notifications,
and the app itself.

00:11:42.006 --> 00:11:44.776 A:middle
But wouldn't it be cool

00:11:45.456 --> 00:11:47.636 A:middle
if you could see your
app's content just

00:11:47.636 --> 00:11:50.806 A:middle
by raising your wrist without
even having to touch the screen?

00:11:51.996 --> 00:11:54.146 A:middle
In watchOS 2, this is possible

00:11:54.256 --> 00:11:57.746 A:middle
because now you can create a
Complication for the Watch face.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.676 --> 00:12:04.436 A:middle
We designed the Watch
for brief interactions,

00:12:04.756 --> 00:12:06.946 A:middle
and the quickest way
to see your content is

00:12:06.946 --> 00:12:09.856 A:middle
through Complications,
Glances, and Notifications.

00:12:10.446 --> 00:12:18.486 A:middle
So let's take a closer
look at these.

00:12:18.616 --> 00:12:19.826 A:middle
Despite their name,

00:12:19.826 --> 00:12:21.756 A:middle
Complications are
actually quite simple.

00:12:22.426 --> 00:12:24.406 A:middle
They're snippets of
information that appear

00:12:24.406 --> 00:12:28.186 A:middle
on your Watch face
alongside the time.

00:12:28.416 --> 00:12:31.686 A:middle
So if we take these Watch
faces and we remove the time,

00:12:32.006 --> 00:12:33.866 A:middle
everything left is
a Complication.

00:12:35.376 --> 00:12:38.206 A:middle
Now, the ones you see here are
all built right into the OS,

00:12:39.386 --> 00:12:43.236 A:middle
but now you can create your own.

00:12:43.456 --> 00:12:46.386 A:middle
Now, you might not
all be aware of this,

00:12:46.386 --> 00:12:49.736 A:middle
but the fictional San Francisco
Soccer Club is currently holding

00:12:49.736 --> 00:12:51.086 A:middle
its 2015 tournament.

00:12:52.966 --> 00:12:55.566 A:middle
So we could create
a Complication

00:12:55.566 --> 00:12:58.276 A:middle
for the modular face to
show what match is coming

00:12:58.276 --> 00:13:03.276 A:middle
up next in the tournament.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.276 --> 00:13:03.276 A:middle
up next in the tournament.

00:13:03.276 --> 00:13:05.136 A:middle
If I were to install
this on my Watch,

00:13:05.246 --> 00:13:09.406 A:middle
I am going to see it every time
I raise my wrist right away,

00:13:09.406 --> 00:13:13.216 A:middle
and that's great, but for
it to be a good experience,

00:13:13.876 --> 00:13:16.986 A:middle
it's important that as time
goes by and the content

00:13:16.986 --> 00:13:19.116 A:middle
that the Complication
needs to show changes,

00:13:19.696 --> 00:13:22.916 A:middle
this has already happened by
the time the screen turns on.

00:13:23.526 --> 00:13:28.406 A:middle
And to make that possible, we're
going to be collecting the data

00:13:28.406 --> 00:13:34.616 A:middle
for your Complications in
the form of a timeline.

00:13:34.726 --> 00:13:37.646 A:middle
That way, as I glance at my
watch throughout the day,

00:13:38.046 --> 00:13:40.436 A:middle
the Complication will always
be showing the information

00:13:40.436 --> 00:13:49.546 A:middle
that makes sense at that moment.

00:13:49.756 --> 00:13:52.396 A:middle
So creating a timeline
for the schedule

00:13:52.396 --> 00:13:54.506 A:middle
of a fictional soccer
tournament is pretty easy.

00:13:55.016 --> 00:13:56.816 A:middle
For one thing, I
made up the schedule,

00:13:56.816 --> 00:14:00.396 A:middle
and for a second thing, it's
pretty unlikely to ever change.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.816 --> 00:14:00.396 A:middle
and for a second thing, it's
pretty unlikely to ever change.

00:14:01.006 --> 00:14:03.526 A:middle
But that might not be the
case for your Complications.

00:14:04.156 --> 00:14:08.556 A:middle
As things change in the
world, you're likely to need

00:14:08.556 --> 00:14:10.396 A:middle
to update your timelines
accordingly.

00:14:11.586 --> 00:14:13.626 A:middle
And we've provided a couple
ways to go about this.

00:14:14.666 --> 00:14:16.836 A:middle
The first is Scheduled Updates.

00:14:20.436 --> 00:14:21.976 A:middle
Scheduled updates are perfect

00:14:23.356 --> 00:14:25.616 A:middle
for Complications
whose data changes

00:14:25.616 --> 00:14:30.006 A:middle
on a predictable schedule,
like a weather forecast.

00:14:30.636 --> 00:14:33.286 A:middle
If you've written a weather
forecast Complication,

00:14:33.686 --> 00:14:35.526 A:middle
you may know that
your server has access

00:14:35.616 --> 00:14:38.646 A:middle
to more accurate weather
data maybe once an hour.

00:14:39.446 --> 00:14:42.026 A:middle
So when you load your timeline,
you can tell us a good time

00:14:42.026 --> 00:14:46.296 A:middle
to next wake you up
to refresh your data.

00:14:46.476 --> 00:14:48.396 A:middle
Your extension will be
given the opportunity

00:14:48.396 --> 00:14:49.326 A:middle
to run in the background.

00:14:49.566 --> 00:14:52.606 A:middle
You can hit your server,
pull down new forecast data,

00:14:53.146 --> 00:14:58.946 A:middle
and reload your timeline.

00:14:59.026 --> 00:15:01.096 A:middle
But not all data
can be refreshed

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.026 --> 00:15:01.096 A:middle
But not all data
can be refreshed

00:15:01.096 --> 00:15:02.166 A:middle
at predictable intervals.

00:15:03.326 --> 00:15:06.236 A:middle
Suppose I wanted
to add live scores

00:15:07.176 --> 00:15:08.226 A:middle
to my soccer Complication.

00:15:09.046 --> 00:15:10.596 A:middle
It's not going to be
good enough for me

00:15:10.596 --> 00:15:14.326 A:middle
to hit my server every hour
or so or even every 15 minutes

00:15:14.706 --> 00:15:17.426 A:middle
to pull down the current score
because when a goal is scored,

00:15:17.656 --> 00:15:20.456 A:middle
that needs to show up right
away in my Complication.

00:15:21.736 --> 00:15:25.036 A:middle
To support this kind of case,
we're introducing a new kind

00:15:25.036 --> 00:15:27.196 A:middle
of high-priority
push notification.

00:15:29.716 --> 00:15:33.066 A:middle
If you are providing data that
is needed for a Complication,

00:15:33.336 --> 00:15:36.166 A:middle
you can send this push
notification to your iPhone,

00:15:36.166 --> 00:15:38.316 A:middle
and it will be delivered
immediately

00:15:38.316 --> 00:15:39.666 A:middle
to your extension on the Watch.

00:15:45.496 --> 00:15:48.516 A:middle
So timelines are great for
making sure the content

00:15:48.516 --> 00:15:50.376 A:middle
in your Complications
is always up to date,

00:15:50.956 --> 00:15:53.996 A:middle
but they also serve an
important additional purpose.

00:15:54.476 --> 00:15:57.986 A:middle
If you went to the Keynote this
morning, you will have heard

00:15:57.986 --> 00:16:00.346 A:middle
about the Time Travel feature
that we are introducing

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.986 --> 00:16:00.346 A:middle
about the Time Travel feature
that we are introducing

00:16:00.346 --> 00:16:03.256 A:middle
in watchOS 2, which allows
you to turn the Digital Crown

00:16:03.536 --> 00:16:05.326 A:middle
to peek forwards and backwards

00:16:05.376 --> 00:16:07.386 A:middle
and see what your
Complications will be showing

00:16:07.386 --> 00:16:08.496 A:middle
at different times of day.

00:16:09.676 --> 00:16:11.796 A:middle
For example, here it looks

00:16:11.796 --> 00:16:14.466 A:middle
like the Marina Noe Valley
game has already ended

00:16:14.626 --> 00:16:17.436 A:middle
and I missed it because I was
on stage talking about WatchKit.

00:16:18.376 --> 00:16:22.426 A:middle
Luckily, I can Time Travel
backwards to see what happened.

00:16:29.826 --> 00:16:32.676 A:middle
It looks like Noe Valley
won in stoppage time.

00:16:32.736 --> 00:16:34.156 A:middle
That must have been
really exciting.

00:16:34.746 --> 00:16:38.186 A:middle
So that's Complications.

00:16:38.186 --> 00:16:41.026 A:middle
They are a really quick way to
access data that's important.

00:16:41.736 --> 00:16:42.576 A:middle
Small amounts of data.

00:16:43.526 --> 00:16:45.476 A:middle
But what if you wanted to
see a little more detail?

00:16:46.246 --> 00:16:47.686 A:middle
That's when you might
use a Glance.

00:16:47.936 --> 00:16:54.776 A:middle
You get to your Glances by
swiping up on the clock face,

00:16:55.436 --> 00:16:58.636 A:middle
and Glances give
you the opportunity

00:16:58.636 --> 00:17:01.486 A:middle
to display an entire screen
full of data to your user.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.636 --> 00:17:01.486 A:middle
to display an entire screen
full of data to your user.

00:17:01.916 --> 00:17:04.546 A:middle
Here, for example, my soccer
club Glance is showing me the

00:17:04.656 --> 00:17:07.836 A:middle
standings for Group
A in my tournament.

00:17:10.836 --> 00:17:13.236 A:middle
Complications and
Glances allow me

00:17:13.236 --> 00:17:16.036 A:middle
to access your app's
data on my own schedule.

00:17:16.626 --> 00:17:20.156 A:middle
But sometimes you need to
get information in front

00:17:20.156 --> 00:17:22.215 A:middle
of your user right
when it matters,

00:17:22.756 --> 00:17:29.496 A:middle
and for that you would
use a Notification.

00:17:29.496 --> 00:17:32.166 A:middle
Notifications on the Watch
are incredibly powerful.

00:17:32.646 --> 00:17:35.046 A:middle
You can take full
advantage of the screen

00:17:35.836 --> 00:17:37.416 A:middle
to show an entirely custom UI.

00:17:38.976 --> 00:17:42.616 A:middle
For example, here I am being
alerted that it's my last chance

00:17:42.666 --> 00:17:45.746 A:middle
to pick the winners in
this afternoon's SoMa Cow

00:17:45.746 --> 00:17:46.296 A:middle
Hollow game.

00:17:46.296 --> 00:17:49.296 A:middle
In addition to the custom UI,

00:17:49.296 --> 00:17:51.606 A:middle
you can also provide
custom actions.

00:17:52.556 --> 00:17:55.316 A:middle
Pressing either of these
buttons would register my pick

00:17:55.316 --> 00:17:56.116 A:middle
with the application.

00:17:57.356 --> 00:17:58.116 A:middle
But that's not all.

00:17:58.726 --> 00:18:00.316 A:middle
Because in watchOS 2,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.726 --> 00:18:00.316 A:middle
Because in watchOS 2,

00:18:00.316 --> 00:18:03.946 A:middle
we are introducing
Notification in-line text reply,

00:18:04.786 --> 00:18:07.996 A:middle
so I can add a button to
my Notification allowing me

00:18:07.996 --> 00:18:10.336 A:middle
to compose a message to send.

00:18:10.336 --> 00:18:12.986 A:middle
I am a really big SoMa fan, and
I want the world to know it,

00:18:13.276 --> 00:18:16.416 A:middle
so I am going to
choose that option.

00:18:16.586 --> 00:18:20.266 A:middle
When I pick the Reply option, I
am given the Quick Reply sheet,

00:18:20.616 --> 00:18:23.426 A:middle
and I can even use dictation
to compose a message,

00:18:23.426 --> 00:18:26.386 A:middle
all from inside the Notification
without switching context.

00:18:26.976 --> 00:18:29.226 A:middle
Thank you.

00:18:29.456 --> 00:18:30.626 A:middle
You are very kind.

00:18:31.516 --> 00:18:34.706 A:middle
[ Applause ]

00:18:35.206 --> 00:18:37.006 A:middle
So that's Notifications.

00:18:37.946 --> 00:18:40.706 A:middle
So Complications, Glances,
and Notifications are so easy

00:18:40.706 --> 00:18:42.336 A:middle
to access, they are
probably the way

00:18:42.336 --> 00:18:44.546 A:middle
that your users will
most commonly interact

00:18:44.546 --> 00:18:45.526 A:middle
with your app's content.

00:18:46.026 --> 00:18:48.036 A:middle
But sometimes you have
a little more time

00:18:49.056 --> 00:18:51.756 A:middle
and you want a more interactive,
immersive experience,

00:18:51.756 --> 00:18:54.046 A:middle
and that's when you would
launch the full application.

00:18:54.046 --> 00:18:59.806 A:middle
And there is so much you can do
with applications in watchOS 2.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.856 --> 00:19:04.816 A:middle
To give one example here, now
that you have access to input

00:19:04.816 --> 00:19:08.126 A:middle
from the Digital Crown, you
can use it to scroll quickly

00:19:08.166 --> 00:19:09.576 A:middle
through the groups
of your tournament

00:19:10.236 --> 00:19:12.956 A:middle
to quickly find your favorite
team and get more information.

00:19:13.486 --> 00:19:18.456 A:middle
But that's just one of
tons of new opportunities

00:19:18.506 --> 00:19:20.216 A:middle
that you have with watchOS 2.

00:19:21.296 --> 00:19:24.646 A:middle
You can also add
animations to your UI now.

00:19:24.996 --> 00:19:26.886 A:middle
You can access the
Taptic Engine.

00:19:28.296 --> 00:19:30.616 A:middle
You can do audio recording
right from the Watch.

00:19:30.816 --> 00:19:33.646 A:middle
And you can embed audio
and video playback.

00:19:34.916 --> 00:19:37.116 A:middle
You can make a phone call
from your application,

00:19:37.676 --> 00:19:39.646 A:middle
and you get access
-- live access --

00:19:39.646 --> 00:19:42.046 A:middle
to the data from the health
sensors and the Accelerometer.

00:19:42.806 --> 00:19:45.566 A:middle
We are so excited to see
what you guys create with all

00:19:45.566 --> 00:19:48.846 A:middle
of these possibilities, and
now to show you how easy it is

00:19:48.846 --> 00:19:50.546 A:middle
to bring your app to watchOS 2,

00:19:50.806 --> 00:19:54.976 A:middle
I'd like to invite
up Josh Shaffer.

00:19:55.516 --> 00:20:00.456 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:55.516 --> 00:20:00.456 A:middle
[ Applause ]

00:20:00.956 --> 00:20:01.586 A:middle
&gt;&gt; JOSH SHAFFER: Thanks, Eliza.

00:20:02.326 --> 00:20:05.516 A:middle
So I am really excited to
show you how easy it can be

00:20:05.516 --> 00:20:09.816 A:middle
to take your existing watchOS 1
app and upgrade it to watchOS 2

00:20:09.816 --> 00:20:11.146 A:middle
to run natively on the Watch.

00:20:11.676 --> 00:20:15.156 A:middle
If you have downloaded
the WWDC app this year,

00:20:15.626 --> 00:20:19.196 A:middle
you may have noticed that it now
includes a WatchKit extension

00:20:19.626 --> 00:20:21.636 A:middle
to install and run
on your Watch.

00:20:21.986 --> 00:20:24.666 A:middle
So what we are going to do is
take a look at how we can update

00:20:24.666 --> 00:20:29.016 A:middle
that application and use it as
a native watchOS 2 application,

00:20:29.016 --> 00:20:31.486 A:middle
and we'll add a few
features to it using some

00:20:31.486 --> 00:20:32.746 A:middle
of the things Eliza showed us.

00:20:34.236 --> 00:20:39.576 A:middle
So over here, you can see that
I have the Xcode project open

00:20:39.876 --> 00:20:42.876 A:middle
for the WWDC app,
and Xcode has noticed

00:20:42.876 --> 00:20:45.546 A:middle
that I have a watchOS 1
extension and is offering

00:20:45.546 --> 00:20:48.086 A:middle
to upgrade it for me to
a watchOS 2 extension.

00:20:48.086 --> 00:20:49.836 A:middle
I am just going to click here

00:20:49.836 --> 00:20:51.106 A:middle
and let it perform
those changes.

00:20:51.746 --> 00:20:53.666 A:middle
It's going to take all
my existing targets

00:20:54.026 --> 00:20:57.176 A:middle
and update them, leaving my
source code and storyboards

00:20:57.176 --> 00:21:00.316 A:middle
in place so I can reuse all
of what I've already done.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.176 --> 00:21:00.316 A:middle
in place so I can reuse all
of what I've already done.

00:21:00.976 --> 00:21:04.726 A:middle
We can go over here and check
out our controller context,

00:21:05.336 --> 00:21:08.866 A:middle
and what we have to do first of
all is make a few code changes

00:21:08.866 --> 00:21:09.946 A:middle
to the way we access our data.

00:21:10.756 --> 00:21:12.346 A:middle
Now that we are running
on a different device,

00:21:12.766 --> 00:21:15.036 A:middle
we need to be able to move
the data from our iPhone

00:21:15.036 --> 00:21:18.116 A:middle
over to the Watch, and we can
use the new Watch Connectivity

00:21:18.116 --> 00:21:19.046 A:middle
frameworks to do that.

00:21:19.486 --> 00:21:22.576 A:middle
So I will start adding the
Watch Connectivity framework,

00:21:23.236 --> 00:21:26.056 A:middle
and we will replace the open
parent application call,

00:21:26.056 --> 00:21:28.086 A:middle
which is what I used in
the watchOS 1 version,

00:21:28.466 --> 00:21:31.636 A:middle
with the new Watch Connectivity
code that will ask for the data

00:21:31.636 --> 00:21:34.086 A:middle
to be copied from the
phone to the Watch.

00:21:34.606 --> 00:21:37.956 A:middle
With that changed, now we
can add some additional

00:21:37.956 --> 00:21:40.716 A:middle
functionality, and one really
cool thing to take advantage

00:21:40.716 --> 00:21:43.266 A:middle
of is the ability to interact
with the Digital Crown.

00:21:44.516 --> 00:21:46.486 A:middle
Now, the way that you
interact with the Digital Crown

00:21:46.486 --> 00:21:51.006 A:middle
in a watchOS app is using a
new interface picker control.

00:21:52.006 --> 00:21:54.726 A:middle
We will drag that out in our
Storyboard in just a minute,

00:21:54.826 --> 00:21:57.066 A:middle
but first we are going to add
some code to hook up to it.

00:21:57.576 --> 00:22:00.766 A:middle
We will make some
references to be able to hook

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.576 --> 00:22:00.766 A:middle
We will make some
references to be able to hook

00:22:00.766 --> 00:22:02.716 A:middle
up to the Storyboard
object once we drag it out,

00:22:02.716 --> 00:22:05.576 A:middle
and you add the items
that you want to choose

00:22:05.646 --> 00:22:07.496 A:middle
from the picker
programmatically.

00:22:07.986 --> 00:22:10.746 A:middle
So we are going to loop through
all of the session tracks

00:22:10.746 --> 00:22:13.556 A:middle
that exist throughout
the week and add an entry

00:22:13.556 --> 00:22:14.996 A:middle
to our picker for each track.

00:22:15.386 --> 00:22:17.576 A:middle
This way we will be able to
sort the list of sessions

00:22:17.796 --> 00:22:20.266 A:middle
and view just the ones for the
track that we are interested in.

00:22:21.206 --> 00:22:23.836 A:middle
Then finally, we have to add
an IBAction that will hook

00:22:23.836 --> 00:22:26.626 A:middle
up to our control that will get
called every time it changes.

00:22:26.626 --> 00:22:28.346 A:middle
So we will add that code there.

00:22:28.346 --> 00:22:31.886 A:middle
Now we can switch over to our
Storyboard and figure out where

00:22:31.886 --> 00:22:33.086 A:middle
to put this in our app.

00:22:33.336 --> 00:22:36.506 A:middle
So I will come over here and
find the new picker control,

00:22:36.556 --> 00:22:39.726 A:middle
and we will drag it out and put
it in our session controller.

00:22:40.246 --> 00:22:42.796 A:middle
The session controller is the
view that displays all the list

00:22:42.796 --> 00:22:45.636 A:middle
of sessions, so by adding at
the top, it will provide a way

00:22:45.636 --> 00:22:46.846 A:middle
to filter that session list.

00:22:47.366 --> 00:22:49.446 A:middle
Just make it a little shorter
so it's not quite so tall.

00:22:49.446 --> 00:22:51.836 A:middle
Now, the picker control
is really flexible,

00:22:51.836 --> 00:22:53.546 A:middle
and there's three
different appearances

00:22:53.546 --> 00:22:55.806 A:middle
that you can choose --
list, stack, and sequence --

00:22:55.906 --> 00:22:57.416 A:middle
that you can learn about
throughout the week.

00:22:58.846 --> 00:23:00.856 A:middle
The list one is a
really good choice

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.846 --> 00:23:00.856 A:middle
The list one is a
really good choice

00:23:00.856 --> 00:23:02.506 A:middle
for what we are doing here,
so we are going to leave that.

00:23:02.506 --> 00:23:04.926 A:middle
And we are going to
turn on a focus outline

00:23:04.926 --> 00:23:07.286 A:middle
so that we can make
sure the user can tell

00:23:07.286 --> 00:23:09.516 A:middle
when they turn the Digital
Crown what's going to happen.

00:23:11.016 --> 00:23:13.276 A:middle
So with those changes made,
we'll then hook up our picker

00:23:13.276 --> 00:23:15.026 A:middle
to the code that we
pasted in a minute ago.

00:23:16.066 --> 00:23:18.306 A:middle
We'll drag out the
connection to our IBOutlet

00:23:18.736 --> 00:23:20.896 A:middle
and drag a connection
into our IBAction

00:23:20.926 --> 00:23:22.746 A:middle
so that it gets called every
time the picker changes.

00:23:24.136 --> 00:23:25.016 A:middle
And that's it.

00:23:25.216 --> 00:23:26.626 A:middle
So with that, we are going
to hit Build and Run,

00:23:27.206 --> 00:23:29.016 A:middle
and we can switch over
to the Watch simulator

00:23:29.336 --> 00:23:30.576 A:middle
and see how this works.

00:23:30.976 --> 00:23:33.696 A:middle
The great thing about the
watch simulator in watchOS 2 is

00:23:33.696 --> 00:23:35.776 A:middle
that it's a full
simulator in the watchOS,

00:23:36.416 --> 00:23:39.346 A:middle
so you can run your entire
watch app side by side

00:23:39.346 --> 00:23:41.886 A:middle
with your iPhone app,
debug at the same time,

00:23:42.086 --> 00:23:44.066 A:middle
and test the connectivity
code between them.

00:23:44.676 --> 00:23:51.506 A:middle
[ Applause ]

00:23:52.006 --> 00:23:53.676 A:middle
So now we can jump over
here, and you can see

00:23:53.676 --> 00:23:55.466 A:middle
in our session list, we
can scroll through the list

00:23:55.466 --> 00:23:57.896 A:middle
of sessions, and we
can also filter based

00:23:57.896 --> 00:23:59.086 A:middle
on what track we want to see,

00:23:59.676 --> 00:24:01.046 A:middle
and it all updates
as we change it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.676 --> 00:24:01.046 A:middle
and it all updates
as we change it.

00:24:02.076 --> 00:24:03.926 A:middle
Now, one last feature
that I would really

00:24:03.926 --> 00:24:07.136 A:middle
like to add is the ability
to display the sessions right

00:24:07.136 --> 00:24:09.146 A:middle
on our Watch face, and
to do that, we are going

00:24:09.146 --> 00:24:10.986 A:middle
to add a Complication
to our app.

00:24:11.286 --> 00:24:13.366 A:middle
Now, I wrote most of the
code for this earlier,

00:24:13.506 --> 00:24:15.616 A:middle
so I am just going to drag
the file out and add it

00:24:15.616 --> 00:24:16.856 A:middle
into my project right here.

00:24:18.386 --> 00:24:20.916 A:middle
The one thing that I haven't
done yet is added the code

00:24:20.916 --> 00:24:23.506 A:middle
that will iterate through
and build the timeline.

00:24:24.006 --> 00:24:26.496 A:middle
Now, Eliza mentioned that we are
going to be providing the data

00:24:26.756 --> 00:24:30.236 A:middle
in the form of a timeline, so
we want to iterate through all

00:24:30.236 --> 00:24:32.746 A:middle
of the sessions that
I favorited so that

00:24:32.746 --> 00:24:35.406 A:middle
on the Watch face I can see my
favorite sessions all week long.

00:24:36.336 --> 00:24:38.586 A:middle
Now, to save us some time,
I built and installed this

00:24:38.586 --> 00:24:41.016 A:middle
on a Watch earlier today,
so I am just going to switch

00:24:41.016 --> 00:24:42.906 A:middle
over here and take a
look at how we can add

00:24:42.906 --> 00:24:44.056 A:middle
that to our Watch face.

00:24:44.926 --> 00:24:48.026 A:middle
So right at the beginning, I
had a Watch face configured

00:24:48.026 --> 00:24:50.736 A:middle
with Calendar in the middle,
but because I've got all this

00:24:50.736 --> 00:24:53.246 A:middle
on the WWDC app, we will
just switch over here

00:24:53.246 --> 00:24:56.166 A:middle
and customize it, and then we
can scroll down to the bottom

00:24:56.166 --> 00:24:58.226 A:middle
of the list of Complications,
and you will see

00:24:58.226 --> 00:25:01.286 A:middle
that now the WWDC app has an
entry all the way at the bottom.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.226 --> 00:25:01.286 A:middle
that now the WWDC app has an
entry all the way at the bottom.

00:25:02.026 --> 00:25:04.976 A:middle
We can click there to
turn that on and go back

00:25:04.976 --> 00:25:06.516 A:middle
and view our session list.

00:25:06.836 --> 00:25:08.076 A:middle
Now, obviously, the
platform State

00:25:08.076 --> 00:25:10.226 A:middle
of the Union is the session
I favorited for right now,

00:25:10.846 --> 00:25:14.156 A:middle
but with no additional work,
we can Time Travel forward

00:25:14.376 --> 00:25:16.536 A:middle
through that session
list and see

00:25:16.536 --> 00:25:18.236 A:middle
that up next is the
Apple Design Awards,

00:25:18.476 --> 00:25:21.726 A:middle
which I definitely don't want to
miss, and then looking forward

00:25:22.156 --> 00:25:25.566 A:middle
to tomorrow we've got the
Intro to WatchKit for watchOS 2

00:25:25.566 --> 00:25:27.356 A:middle
in the morning, which is
definitely something I want

00:25:27.356 --> 00:25:27.626 A:middle
to see.

00:25:28.836 --> 00:25:31.466 A:middle
So that's how easy it can be to
update your existing Watch app

00:25:31.856 --> 00:25:34.856 A:middle
to run natively on the watch
as a watchOS 2 application,

00:25:35.456 --> 00:25:37.606 A:middle
and add some support for
some great new features.

00:25:38.406 --> 00:25:39.076 A:middle
So next up --

00:25:40.016 --> 00:25:45.586 A:middle
[ Applause ]

00:25:46.086 --> 00:25:48.036 A:middle
Next up, Sebastien
Marineau-Mes is going to tell us

00:25:48.036 --> 00:25:50.136 A:middle
about some great new
foundation technologies.

00:25:50.456 --> 00:25:51.146 A:middle
&gt;&gt; SEBASTIEN MARINEAU-MES:
Thank you, Josh.

00:25:52.606 --> 00:25:53.196 A:middle
That was great.

00:25:54.606 --> 00:25:57.626 A:middle
Let me now talk about a number
of foundation technologies

00:25:58.106 --> 00:26:01.396 A:middle
that apply across our platforms,
and I am going to start

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.106 --> 00:26:01.396 A:middle
that apply across our platforms,
and I am going to start

00:26:01.396 --> 00:26:04.006 A:middle
with the first one that's
in the theme of performance,

00:26:04.526 --> 00:26:05.816 A:middle
and it is compression.

00:26:05.816 --> 00:26:07.376 A:middle
We are going to make
compression exciting.

00:26:08.126 --> 00:26:11.466 A:middle
[Laughter] So Apple's
always delivered a number

00:26:11.466 --> 00:26:15.006 A:middle
of compression algorithms as
part of our core frameworks,

00:26:15.006 --> 00:26:17.276 A:middle
LZ4, which is optimized
for speed; LZMA,

00:26:17.276 --> 00:26:21.686 A:middle
which has high compression, and
zlib, which many of you use,

00:26:21.686 --> 00:26:24.636 A:middle
which hits the sweet spot
between compression and speed.

00:26:25.146 --> 00:26:28.306 A:middle
We set out to build a
better compression algorithm

00:26:28.306 --> 00:26:29.686 A:middle
that improves on zlib.

00:26:29.906 --> 00:26:32.476 A:middle
As you may know, zlib
is over 20 years old.

00:26:32.746 --> 00:26:34.876 A:middle
It was built when processor
architectures were very

00:26:34.876 --> 00:26:37.986 A:middle
different, so we thought let's
build something optimized

00:26:38.286 --> 00:26:41.246 A:middle
for today's processors
and microarchitectures.

00:26:42.186 --> 00:26:46.816 A:middle
Now, we call this new algorithm
Lempel Ziv Finite State Entropy.

00:26:46.816 --> 00:26:48.146 A:middle
You may know of them.

00:26:48.836 --> 00:26:50.036 A:middle
They are also a great
Indie band.

00:26:50.866 --> 00:26:51.926 A:middle
You should go check
them on Connect.

00:26:52.716 --> 00:27:01.286 A:middle
To avoid any confusion, we are
going to simply call this LZFSE.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:52.716 --> 00:27:01.286 A:middle
To avoid any confusion, we are
going to simply call this LZFSE.

00:27:01.456 --> 00:27:03.796 A:middle
[Laughter] So now
LZFSE -- thank you --

00:27:04.416 --> 00:27:07.466 A:middle
improves on zlib on compression,
but more importantly,

00:27:07.786 --> 00:27:11.896 A:middle
it actually is three
times faster than zlib.

00:27:11.896 --> 00:27:13.616 A:middle
This is a great improvement
in terms

00:27:13.616 --> 00:27:15.936 A:middle
of making your apps
more responsive.

00:27:16.526 --> 00:27:18.756 A:middle
On top of that, it
helps with battery life.

00:27:19.426 --> 00:27:22.456 A:middle
It gives you a 60 percent
reduction in energy use

00:27:23.036 --> 00:27:24.326 A:middle
with the same compression
algorithm,

00:27:24.326 --> 00:27:26.806 A:middle
it also gives you a
3x speed improvement.

00:27:27.316 --> 00:27:29.826 A:middle
Finally, we've made it
super easy to adopt.

00:27:30.026 --> 00:27:31.676 A:middle
We've added it to our
standard framework.

00:27:32.086 --> 00:27:35.926 A:middle
All you need to do is switch
your algorithm to use LZFSE.

00:27:36.156 --> 00:27:38.206 A:middle
We do all the hard
work for you, and you

00:27:38.546 --> 00:27:40.926 A:middle
and your users can
reap the benefits.

00:27:40.926 --> 00:27:43.876 A:middle
So this is LZFSE, really
redefining the sweet spot

00:27:44.306 --> 00:27:45.736 A:middle
in mainstream compression.

00:27:46.706 --> 00:27:48.846 A:middle
Next up, I want to talk
about battery life.

00:27:49.206 --> 00:27:50.766 A:middle
Craig mentioned battery
life this morning.

00:27:51.366 --> 00:27:55.726 A:middle
Now, in our industry,
when we test battery life,

00:27:55.986 --> 00:27:59.106 A:middle
we often do so using
repetitive tests.

00:27:59.206 --> 00:28:01.036 A:middle
For example, we'll
do web browsing over

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.206 --> 00:28:01.036 A:middle
For example, we'll
do web browsing over

00:28:01.036 --> 00:28:02.536 A:middle
and over again as our test.

00:28:02.536 --> 00:28:05.866 A:middle
And we know that
in the real world,

00:28:06.826 --> 00:28:08.676 A:middle
the way that we use our
devices is very different

00:28:08.676 --> 00:28:10.546 A:middle
from these synthetic
lab tests; right?

00:28:10.606 --> 00:28:13.226 A:middle
We take the device in
and out of our pocket,

00:28:13.326 --> 00:28:16.496 A:middle
we receive notifications and
messages, we may use a variety

00:28:16.496 --> 00:28:19.266 A:middle
of applications, we may go in
and out of network coverage.

00:28:19.626 --> 00:28:23.606 A:middle
So what we've done in iOS 9 is
really focused on a broad set

00:28:23.606 --> 00:28:25.186 A:middle
of optimizations that apply

00:28:25.186 --> 00:28:28.846 A:middle
across all the most popular
apps on our platform.

00:28:29.876 --> 00:28:30.596 A:middle
That's step one.

00:28:30.706 --> 00:28:33.886 A:middle
Step two, we focused on a number
of infrastructure improvements.

00:28:34.116 --> 00:28:37.486 A:middle
For example, the algorithms that
drive the backlight intensity,

00:28:37.926 --> 00:28:40.776 A:middle
facedown detection so that
if you receive a notification

00:28:41.116 --> 00:28:43.686 A:middle
and are not able to see it
because the phone is face down,

00:28:43.746 --> 00:28:45.416 A:middle
we will simply not
light up the screen.

00:28:45.756 --> 00:28:49.496 A:middle
A number of other optimizations
in how the system, for example,

00:28:49.606 --> 00:28:52.736 A:middle
sleeps, and optimizing
its lowest power states.

00:28:53.916 --> 00:28:57.376 A:middle
All together, these
optimizations add up to one hour

00:28:57.376 --> 00:29:01.756 A:middle
of extra use -- sorry -- of
typical use for average users.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.376 --> 00:29:01.756 A:middle
of extra use -- sorry -- of
typical use for average users.

00:29:02.176 --> 00:29:02.866 A:middle
Great improvement.

00:29:03.186 --> 00:29:06.226 A:middle
Craig also talked about Low
Power Mode this morning.

00:29:07.516 --> 00:29:10.116 A:middle
Well, we've made it easy
to turn on Low Power Mode.

00:29:10.456 --> 00:29:12.056 A:middle
Simply go in Settings
and turn it on.

00:29:12.926 --> 00:29:16.236 A:middle
It activates a number
of internal levers.

00:29:16.746 --> 00:29:19.126 A:middle
For example, preventing
the CPU and GPU

00:29:19.126 --> 00:29:21.096 A:middle
from entering the
highest performance,

00:29:21.516 --> 00:29:24.586 A:middle
but most power-hungry,
states; preventing applications

00:29:24.586 --> 00:29:27.496 A:middle
from doing too much work in
the background; preventing them

00:29:27.496 --> 00:29:31.546 A:middle
from doing unnecessary
network activity; and finally,

00:29:31.846 --> 00:29:35.056 A:middle
turning off a number of
power-hungry animations.

00:29:35.396 --> 00:29:37.836 A:middle
And altogether, Low Power
Mode, when you start

00:29:37.836 --> 00:29:40.936 A:middle
from a full charge, will
give you an extra three hours

00:29:41.496 --> 00:29:42.136 A:middle
of usage.

00:29:42.546 --> 00:29:43.806 A:middle
So again, great improvement.

00:29:44.536 --> 00:29:47.196 A:middle
Let me now turn to
protecting customer data.

00:29:48.766 --> 00:29:50.746 A:middle
So from the start,
iOS has really focused

00:29:50.746 --> 00:29:53.436 A:middle
on protecting customer
data, and with iOS 9,

00:29:53.726 --> 00:29:56.616 A:middle
we are taking a number of
important steps to protect data,

00:29:56.616 --> 00:29:58.746 A:middle
both on device and in the cloud.

00:29:59.066 --> 00:30:00.076 A:middle
So let's start with the cloud.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.066 --> 00:30:00.076 A:middle
So let's start with the cloud.

00:30:01.406 --> 00:30:05.176 A:middle
Of course, use your Apple ID
and use that to access a number

00:30:05.176 --> 00:30:07.296 A:middle
of services in the
cloud, your photos.

00:30:07.296 --> 00:30:11.386 A:middle
You might have documents that
are on iCloud, your purchases.

00:30:11.646 --> 00:30:13.876 A:middle
Use it for messaging with
iMessage and FaceTime.

00:30:14.176 --> 00:30:18.036 A:middle
And the biggest threat to
your data in the cloud is

00:30:18.036 --> 00:30:20.526 A:middle
that somebody gains
access to your password,

00:30:21.176 --> 00:30:23.136 A:middle
either because you've
shared that password

00:30:23.396 --> 00:30:25.196 A:middle
on another website
that's been compromised

00:30:25.716 --> 00:30:28.216 A:middle
or perhaps an attacker,
through a phishing attack,

00:30:28.396 --> 00:30:30.066 A:middle
is able to gain that password.

00:30:30.596 --> 00:30:33.506 A:middle
The solution to this is
two-factor authentication,

00:30:33.816 --> 00:30:36.376 A:middle
and we are making it easy
for everyone to adopt.

00:30:36.846 --> 00:30:38.016 A:middle
So let me show you how it works.

00:30:39.166 --> 00:30:42.536 A:middle
So with iOS 9, when you get
a new device and you want

00:30:42.536 --> 00:30:45.646 A:middle
to sign it up to your existing
iCloud account, you will be,

00:30:45.646 --> 00:30:48.476 A:middle
of course, prompted for your
password, but on top of that,

00:30:48.476 --> 00:30:50.276 A:middle
you will have to enter
in a verification code.

00:30:51.136 --> 00:30:54.586 A:middle
Simultaneously, we send a
notification to your existing,

00:30:54.806 --> 00:30:58.216 A:middle
trusted devices, and that
notification includes the

00:30:58.216 --> 00:31:01.116 A:middle
location of this new
device that's signing in.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.216 --> 00:31:01.116 A:middle
location of this new
device that's signing in.

00:31:01.746 --> 00:31:03.266 A:middle
So if that's you
that's signing in,

00:31:03.676 --> 00:31:05.716 A:middle
you can simply enter
the verification code.

00:31:06.086 --> 00:31:07.866 A:middle
But if it's an attacker
that's trying to sign

00:31:07.866 --> 00:31:10.856 A:middle
in to your account, you can
stop them in their tracks.

00:31:12.226 --> 00:31:13.166 A:middle
That's the cloud side.

00:31:13.166 --> 00:31:14.446 A:middle
Let's now talk about the device

00:31:14.836 --> 00:31:16.776 A:middle
where the passcode
is your last line

00:31:16.776 --> 00:31:19.336 A:middle
of defense protecting
your personal data.

00:31:19.866 --> 00:31:24.316 A:middle
So historically, we've kept
that passcode at four digits

00:31:24.426 --> 00:31:26.896 A:middle
because you had to enter
it every time you wanted

00:31:26.896 --> 00:31:27.576 A:middle
to use your phone.

00:31:28.466 --> 00:31:30.976 A:middle
But of course, these days
we don't enter the passcode

00:31:30.976 --> 00:31:31.646 A:middle
very often.

00:31:32.276 --> 00:31:35.636 A:middle
We use our fingerprint
with Touch ID to sign

00:31:35.636 --> 00:31:37.866 A:middle
in seamlessly into our phones.

00:31:38.356 --> 00:31:41.986 A:middle
So now with iOS 9, we are
able to extend the length

00:31:41.986 --> 00:31:46.176 A:middle
of the passcode from four digits
to six, increasing the strength

00:31:46.176 --> 00:31:48.266 A:middle
of the passcode by a
factor of a hundred,

00:31:48.746 --> 00:31:51.976 A:middle
without compromising ease
of use for our devices.

00:31:52.816 --> 00:31:54.606 A:middle
Now that we've talked
about the device,

00:31:55.066 --> 00:31:58.306 A:middle
let me introduce a
new technology on all

00:31:58.306 --> 00:32:00.716 A:middle
of our platforms, which we
call App Transport Security.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.306 --> 00:32:00.716 A:middle
of our platforms, which we
call App Transport Security.

00:32:01.116 --> 00:32:04.336 A:middle
App Transport Security is
really all about securing data

00:32:04.336 --> 00:32:07.546 A:middle
as it transits over the
Internet from a device

00:32:07.546 --> 00:32:10.136 A:middle
or from your applications
to your backend servers.

00:32:11.236 --> 00:32:14.416 A:middle
So of course we want that
information as it transits

00:32:14.416 --> 00:32:15.696 A:middle
over the network to be secure.

00:32:16.236 --> 00:32:18.666 A:middle
But it turns out that
today it's actually hard

00:32:18.666 --> 00:32:19.356 A:middle
for you to do that.

00:32:19.516 --> 00:32:20.406 A:middle
It's hard to get it right.

00:32:20.916 --> 00:32:21.896 A:middle
You can't use HTTP.

00:32:21.946 --> 00:32:24.756 A:middle
You have to use a secure
protocol, but then you have

00:32:24.756 --> 00:32:27.606 A:middle
to worry about protocol
versions, downgrade attacks,

00:32:28.106 --> 00:32:29.756 A:middle
encryption, vulnerabilities.

00:32:30.166 --> 00:32:33.376 A:middle
Keeping it straight and
doing what is best practice

00:32:33.786 --> 00:32:34.446 A:middle
is difficult.

00:32:34.886 --> 00:32:37.876 A:middle
With App Transport Security,
we are building this right

00:32:37.876 --> 00:32:39.416 A:middle
in to our core frameworks.

00:32:39.986 --> 00:32:43.116 A:middle
And so now when you use our
standard networking frameworks,

00:32:43.516 --> 00:32:47.546 A:middle
we will enforce a secure
best practice connection

00:32:47.786 --> 00:32:50.586 A:middle
between your application
and your backend servers.

00:32:51.396 --> 00:32:55.146 A:middle
Today that best practice is
TLS 1.2 and Forward secrecy,

00:32:55.146 --> 00:32:58.796 A:middle
but as the standards and the
state of the art evolves,

00:32:59.246 --> 00:33:01.356 A:middle
of course the framework will
implement that new state

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.246 --> 00:33:01.356 A:middle
of course the framework will
implement that new state

00:33:01.356 --> 00:33:05.176 A:middle
of the art and will enforce
it for you automatically.

00:33:06.676 --> 00:33:12.696 A:middle
[ Applause ]

00:33:13.196 --> 00:33:15.846 A:middle
So where do you go from here?

00:33:16.126 --> 00:33:17.956 A:middle
If you use out standard
networking frameworks,

00:33:17.956 --> 00:33:20.886 A:middle
for example, NSURLSession,
it is built right in.

00:33:21.186 --> 00:33:23.386 A:middle
It is on by default with iOS 9,

00:33:23.436 --> 00:33:25.146 A:middle
so when you download
the developer beta --

00:33:25.146 --> 00:33:27.026 A:middle
which I am sure many
of you already did --

00:33:27.816 --> 00:33:29.266 A:middle
and you recompile your app,

00:33:29.266 --> 00:33:31.636 A:middle
we will enforce best
practices secure connections

00:33:31.696 --> 00:33:32.426 A:middle
to your backend.

00:33:32.946 --> 00:33:35.856 A:middle
It is possible that you
haven't updated your backend

00:33:35.856 --> 00:33:37.446 A:middle
yet to support best practices

00:33:37.526 --> 00:33:39.516 A:middle
or perhaps you are using
a third-party library.

00:33:39.986 --> 00:33:43.246 A:middle
If that's the case, we have
provided an exception mechanism

00:33:43.246 --> 00:33:47.336 A:middle
to give you time to update your
backends through your info.pls.

00:33:48.316 --> 00:33:50.116 A:middle
So that's App Transport
Security.

00:33:50.426 --> 00:33:52.606 A:middle
Let me now switch and
talk about the Mac

00:33:52.926 --> 00:33:54.336 A:middle
and introduce a new technology

00:33:54.336 --> 00:33:56.596 A:middle
which we call system
integrity protection.

00:33:57.656 --> 00:34:01.136 A:middle
Now, on the Mac, user accounts
typically have administrative

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.656 --> 00:34:01.136 A:middle
Now, on the Mac, user accounts
typically have administrative

00:34:01.176 --> 00:34:03.766 A:middle
privilege, and that
administrative privilege is

00:34:03.766 --> 00:34:05.286 A:middle
really equal to kernel-level
access,

00:34:05.286 --> 00:34:07.056 A:middle
and it makes it difficult

00:34:07.056 --> 00:34:08.766 A:middle
to protect the integrity
of the system.

00:34:09.755 --> 00:34:11.295 A:middle
With system integrity
protection,

00:34:11.666 --> 00:34:13.156 A:middle
we break that equivalency

00:34:13.636 --> 00:34:17.585 A:middle
and administrative-level access
is no longer sufficient in order

00:34:17.585 --> 00:34:19.346 A:middle
to do a number of
operations in the system.

00:34:19.346 --> 00:34:20.755 A:middle
Let me show you some
examples of this.

00:34:21.556 --> 00:34:24.545 A:middle
So for example, if you have
administrative-level privilege,

00:34:24.815 --> 00:34:26.726 A:middle
you cannot modify system files.

00:34:27.346 --> 00:34:29.335 A:middle
You can't install
to system locations.

00:34:29.835 --> 00:34:33.755 A:middle
You can't attach to system
processes and, for example,

00:34:33.755 --> 00:34:35.706 A:middle
introspect the memory or
change the control flow.

00:34:36.485 --> 00:34:39.206 A:middle
So with the beta that's
out today, we encourage you

00:34:39.206 --> 00:34:42.946 A:middle
to download it, test your apps
to make sure that you are able

00:34:42.946 --> 00:34:46.416 A:middle
to basically adhere
to all of these rules.

00:34:46.966 --> 00:34:51.606 A:middle
Now, you might also be wondering
how will this affect the way

00:34:51.606 --> 00:34:52.246 A:middle
that I develop?

00:34:52.246 --> 00:34:54.286 A:middle
Well, the good news
is we've updated Xcode

00:34:54.286 --> 00:34:56.926 A:middle
and the development tool chain,
and for the vast majority

00:34:56.926 --> 00:34:58.826 A:middle
of you, you will
see no difference.

00:34:59.606 --> 00:35:02.176 A:middle
For those that have a specific
development requirement --

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.606 --> 00:35:02.176 A:middle
For those that have a specific
development requirement --

00:35:02.176 --> 00:35:05.446 A:middle
for example, you are developing
kernel extensions on OS X --

00:35:05.726 --> 00:35:08.806 A:middle
we do provide a utility that's
part of the recovery partition

00:35:09.136 --> 00:35:11.566 A:middle
that allows you to disable
system integrity protection.

00:35:12.116 --> 00:35:16.796 A:middle
Which takes me now to the last
technology that I want to cover,

00:35:16.796 --> 00:35:20.046 A:middle
one that underpins the
modern Internet, IPv6.

00:35:21.566 --> 00:35:23.056 A:middle
Now, why is IPv6 important?

00:35:23.556 --> 00:35:26.406 A:middle
We've all heard about the
shortage of IPv4 addresses.

00:35:26.826 --> 00:35:27.546 A:middle
Well, guess what.

00:35:27.946 --> 00:35:28.906 A:middle
It's finally here.

00:35:29.236 --> 00:35:33.306 A:middle
In fact, in China and Asia, they
ran out of IPv4 addresses back

00:35:33.306 --> 00:35:36.076 A:middle
in 2011, and in the
U.S., we will be running

00:35:36.076 --> 00:35:37.846 A:middle
out in the next couple
of months.

00:35:39.056 --> 00:35:41.316 A:middle
What it means in
practice is that a number

00:35:41.316 --> 00:35:44.356 A:middle
of carriers are now
deploying IPv6-only networks.

00:35:44.866 --> 00:35:47.306 A:middle
And if your application
doesn't work properly with IPv6,

00:35:47.416 --> 00:35:51.116 A:middle
it will simply not function on
those carriers, those networks,

00:35:51.196 --> 00:35:52.176 A:middle
and for those customers.

00:35:52.326 --> 00:35:54.046 A:middle
So really important
to support IPv6.

00:35:55.006 --> 00:35:57.936 A:middle
Now, the good news is we've
had IPv6 support as part

00:35:57.936 --> 00:36:01.256 A:middle
of the platform for a long
time, well over a decade on Mac.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.936 --> 00:36:01.256 A:middle
of the platform for a long
time, well over a decade on Mac.

00:36:01.806 --> 00:36:04.096 A:middle
It is field proven,
and many of you

00:36:04.096 --> 00:36:06.726 A:middle
that are using our standard
networking frameworks are making

00:36:06.726 --> 00:36:07.406 A:middle
use of IPv6.

00:36:07.496 --> 00:36:09.336 A:middle
But we want to go further.

00:36:09.336 --> 00:36:11.486 A:middle
We want to make sure that every
one of you is building an app

00:36:11.896 --> 00:36:13.866 A:middle
that works on IPv6 networks,

00:36:14.076 --> 00:36:16.476 A:middle
so we've got a simple
recipe for you.

00:36:17.396 --> 00:36:19.206 A:middle
Use the standard
networking frameworks.

00:36:19.696 --> 00:36:21.266 A:middle
We've mentioned NSULSession.

00:36:22.036 --> 00:36:22.746 A:middle
It really takes care

00:36:22.746 --> 00:36:24.696 A:middle
of extracting the
complexities of the network.

00:36:25.276 --> 00:36:28.006 A:middle
Avoid the use of
IPv4-specific APIs,

00:36:28.476 --> 00:36:32.596 A:middle
many of which were developed
before IPv6 was even conceived.

00:36:33.166 --> 00:36:35.086 A:middle
And finally, don't
hard-code addresses.

00:36:35.986 --> 00:36:38.886 A:middle
Once you follow the recipe,
you might say, how do I test

00:36:38.926 --> 00:36:39.866 A:middle
that it works properly?

00:36:40.406 --> 00:36:43.126 A:middle
Because not all of us have
access to an IPv6 network.

00:36:43.996 --> 00:36:47.036 A:middle
The good news is again you
all use Macs for development,

00:36:47.496 --> 00:36:48.686 A:middle
and we are turning your Mac

00:36:48.686 --> 00:36:52.616 A:middle
into an IPv6 network
emulator with the latest beta.

00:36:53.626 --> 00:36:55.396 A:middle
So all you need to do is set

00:36:55.396 --> 00:36:58.336 A:middle
up through a new connection
sharing mode a personal hot

00:36:58.336 --> 00:37:00.826 A:middle
spot, you check the
IPv6 only box,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.336 --> 00:37:00.826 A:middle
spot, you check the
IPv6 only box,

00:37:01.226 --> 00:37:04.146 A:middle
then you can connect your test
device, test your applications,

00:37:04.256 --> 00:37:05.576 A:middle
and make sure that
they work on IPv6.

00:37:05.676 --> 00:37:06.996 A:middle
It's as easy as that.

00:37:08.016 --> 00:37:15.086 A:middle
[ Applause ]

00:37:15.586 --> 00:37:18.556 A:middle
So finally, because IPv6
support is so critical

00:37:18.556 --> 00:37:21.256 A:middle
to ensuring your applications
work across the world

00:37:21.796 --> 00:37:22.826 A:middle
for every customer,

00:37:23.176 --> 00:37:26.626 A:middle
we are making it an App Store
submission requirement starting

00:37:26.626 --> 00:37:27.436 A:middle
with iOS 9.

00:37:28.086 --> 00:37:32.186 A:middle
So that takes me to the end
of my foundation technologies.

00:37:32.566 --> 00:37:35.976 A:middle
Let me now hand it over to my
fellow Canadian, Toby Paterson,

00:37:35.976 --> 00:37:38.036 A:middle
who will be talking
about higher-level APIs.

00:37:38.506 --> 00:37:38.866 A:middle
Toby?

00:37:40.016 --> 00:37:46.866 A:middle
[ Applause ]

00:37:47.366 --> 00:37:49.256 A:middle
&gt;&gt; TOBY PATERSON: Well, I know
many of you have come from all

00:37:49.256 --> 00:37:51.876 A:middle
over the world to be here
today, some of you from even

00:37:51.876 --> 00:37:53.296 A:middle
as far away as Canada.

00:37:55.876 --> 00:37:58.506 A:middle
[Laughter] Well, your customers
are just as diverse as you are.

00:37:59.496 --> 00:38:01.666 A:middle
Here is an interesting fact
you may not have realized

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.496 --> 00:38:01.666 A:middle
Here is an interesting fact
you may not have realized

00:38:01.666 --> 00:38:02.256 A:middle
about them.

00:38:02.736 --> 00:38:05.776 A:middle
This chart shows the worldwide
App Store sales broken

00:38:05.776 --> 00:38:06.716 A:middle
down by country.

00:38:07.316 --> 00:38:09.246 A:middle
One of the interesting
things it tells you is

00:38:09.496 --> 00:38:11.846 A:middle
that if your app is
not localized properly,

00:38:11.846 --> 00:38:15.486 A:middle
you are not going to reach
potentially the vast majority

00:38:15.486 --> 00:38:16.866 A:middle
of your customers out there.

00:38:17.686 --> 00:38:19.886 A:middle
Now, the good news is it's
not hard for you to do.

00:38:21.096 --> 00:38:24.226 A:middle
We have an internationalization
and localization guide

00:38:24.446 --> 00:38:27.206 A:middle
that tells you everything you
need to know, and of course,

00:38:27.206 --> 00:38:28.556 A:middle
we've got some great support

00:38:28.556 --> 00:38:30.776 A:middle
in our frameworks
and SDKs for this.

00:38:31.546 --> 00:38:33.746 A:middle
We have formatters
for dates and numbers.

00:38:34.386 --> 00:38:36.776 A:middle
And this year we are
introducing a new formatter

00:38:36.776 --> 00:38:39.336 A:middle
to help you display
people's names properly.

00:38:40.546 --> 00:38:42.096 A:middle
Now, names are a tricky thing.

00:38:42.346 --> 00:38:43.976 A:middle
Everybody has one, of course,

00:38:44.436 --> 00:38:46.826 A:middle
but different cultures
represent them differently

00:38:46.826 --> 00:38:49.136 A:middle
and have different
conventions around their use.

00:38:50.246 --> 00:38:53.796 A:middle
In English, we typically write a
name as first, middle, and last.

00:38:54.346 --> 00:38:56.936 A:middle
Chinese, on the other hand,
leads with the family name

00:38:57.046 --> 00:38:59.806 A:middle
and doesn't even have the
notion of a middle name at all.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:01.136 --> 00:39:03.796 A:middle
The NS person name
component formatter --

00:39:04.296 --> 00:39:06.646 A:middle
which I promise looks better
in code than it sounds

00:39:06.646 --> 00:39:07.816 A:middle
when you say it out loud --

00:39:08.396 --> 00:39:11.886 A:middle
[laughter and applause]
-- thank you.

00:39:12.706 --> 00:39:14.936 A:middle
This takes care of all
of the details for you.

00:39:15.446 --> 00:39:17.606 A:middle
And it even has some
cultural smarts.

00:39:17.606 --> 00:39:20.586 A:middle
So if you ask it for the short
version of a person's name,

00:39:20.976 --> 00:39:23.036 A:middle
it knows when it might
be inappropriate to use

00:39:23.036 --> 00:39:25.876 A:middle
that person's first
name all by itself.

00:39:26.646 --> 00:39:30.526 A:middle
Now, we have some really
exciting news for Arabic

00:39:30.526 --> 00:39:32.046 A:middle
and Hebrew speakers out there.

00:39:32.666 --> 00:39:36.006 A:middle
We've had rudimentary support
-- welcome -- [laughter] --

00:39:36.606 --> 00:39:38.676 A:middle
we've had some rudimentary
support

00:39:38.676 --> 00:39:40.256 A:middle
for these languages for years.

00:39:40.256 --> 00:39:43.346 A:middle
On iOS it was limited
strictly to text; whereas,

00:39:43.346 --> 00:39:45.986 A:middle
the Mac had some more
sophisticated layout

00:39:46.046 --> 00:39:47.276 A:middle
of your UI elements.

00:39:47.986 --> 00:39:50.496 A:middle
Well, I am really pleased
to tell you that in iOS 9,

00:39:50.496 --> 00:39:54.586 A:middle
we have full mirrored UI support
for right-to-left languages.

00:39:56.516 --> 00:39:59.596 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.096 --> 00:40:01.776 A:middle
Here's what it looks
like in Springboard.

00:40:02.486 --> 00:40:05.656 A:middle
Now, we haven't just
reversed some

00:40:05.656 --> 00:40:07.456 A:middle
of the UI elements
on screen here.

00:40:07.456 --> 00:40:09.516 A:middle
This is a much deeper
conversion,

00:40:09.886 --> 00:40:12.776 A:middle
where we've reversed the flow
between your view controllers,

00:40:13.136 --> 00:40:16.256 A:middle
your user interactions,
and the system gestures.

00:40:16.776 --> 00:40:19.896 A:middle
This is what the UI would look
like if it had been designed

00:40:19.896 --> 00:40:22.166 A:middle
by a native Hebrew
or Arabic speaker.

00:40:23.186 --> 00:40:25.326 A:middle
Let's take a look at what
this looks like on the phone.

00:40:25.526 --> 00:40:27.626 A:middle
I'd like to bring
Sara Radi up on stage

00:40:27.626 --> 00:40:29.566 A:middle
to give you a quick tour.

00:40:30.476 --> 00:40:35.076 A:middle
[ Applause ]

00:40:35.576 --> 00:40:36.466 A:middle
&gt;&gt; SARA RADI: So
let's take a look

00:40:36.466 --> 00:40:39.106 A:middle
at the new right-to-left
languages support on iOS 9.

00:40:39.616 --> 00:40:42.266 A:middle
So here I am running my
iPhone in Arabic, and starting

00:40:42.266 --> 00:40:44.506 A:middle
from the lock screen,
I slide from right

00:40:44.506 --> 00:40:45.896 A:middle
to left to unlock my device.

00:40:46.466 --> 00:40:50.216 A:middle
Here, my app icons are also
laid out from right to left,

00:40:50.956 --> 00:40:52.846 A:middle
and my page view flows naturally

00:40:52.886 --> 00:40:54.916 A:middle
from the first page
to the second.

00:40:56.966 --> 00:41:00.686 A:middle
So the whole system and all our
native apps fully support user

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:56.966 --> 00:41:00.686 A:middle
So the whole system and all our
native apps fully support user

00:41:00.686 --> 00:41:03.746 A:middle
interface mirroring or running
in right-to-left localizations.

00:41:04.106 --> 00:41:06.366 A:middle
So let's take a look at the
Photos app, for example.

00:41:07.846 --> 00:41:11.876 A:middle
Here, all of my photos are laid
out the way I expect them to be.

00:41:12.216 --> 00:41:16.056 A:middle
The entire UI feels just
right from the navigation bar

00:41:16.056 --> 00:41:20.786 A:middle
at the top to the
bar at the bottom.

00:41:20.786 --> 00:41:22.206 A:middle
Now let me show you Mail.

00:41:22.996 --> 00:41:28.316 A:middle
In addition to the standard
layout, navigation, gestures,

00:41:28.316 --> 00:41:30.866 A:middle
and animations also
flow as expected.

00:41:31.356 --> 00:41:34.056 A:middle
So hitting Mail to trigger
the quick message actions,

00:41:34.446 --> 00:41:36.466 A:middle
I am going to swipe
from the left edge

00:41:36.466 --> 00:41:38.206 A:middle
of the screen to the right.

00:41:38.206 --> 00:41:42.956 A:middle
And that compliments the layout
flow of the table view cell.

00:41:44.196 --> 00:41:48.066 A:middle
Also, the navigation
gesture works as expected

00:41:48.366 --> 00:41:51.906 A:middle
from the right edge
of the screen.

00:41:52.076 --> 00:41:53.486 A:middle
Now rotating my device

00:41:53.576 --> 00:41:55.886 A:middle
to landscape reveals
the Message view.

00:41:56.346 --> 00:41:59.286 A:middle
As a native speaker, this
feels so natural to me

00:41:59.496 --> 00:42:01.616 A:middle
since all my emails
are on the right side

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.496 --> 00:42:01.616 A:middle
since all my emails
are on the right side

00:42:02.226 --> 00:42:03.606 A:middle
and the details are on the left.

00:42:04.406 --> 00:42:07.016 A:middle
And since we've built
all of this into UIKit,

00:42:07.346 --> 00:42:10.096 A:middle
your apps will get the
exact same behavior for free

00:42:10.196 --> 00:42:12.046 A:middle
for running in right-to-left
localizations.

00:42:13.286 --> 00:42:15.246 A:middle
Now let me show you
a third-party app

00:42:15.766 --> 00:42:18.936 A:middle
from the App Store.

00:42:19.156 --> 00:42:20.816 A:middle
And just in case
you are wondering,

00:42:20.816 --> 00:42:23.516 A:middle
we didn't choose Kayak because
the name is a palindrome

00:42:23.516 --> 00:42:26.796 A:middle
and you can also read
this from right to left.

00:42:27.476 --> 00:42:32.666 A:middle
[ Applause ]

00:42:33.166 --> 00:42:36.336 A:middle
So since it is using
autolayouts and our new APIs

00:42:36.336 --> 00:42:40.346 A:middle
with very minimal work,
they just add translations,

00:42:40.346 --> 00:42:42.066 A:middle
and their app just
works as expected.

00:42:42.066 --> 00:42:46.456 A:middle
So after WWDC, I am planning to
go on vacation, so I am going

00:42:46.456 --> 00:42:47.556 A:middle
to explore some views.

00:42:48.186 --> 00:42:52.456 A:middle
So the first slider lets
me pick the number of days

00:42:52.456 --> 00:42:55.186 A:middle
of my vacation, so I am
going to drag that slider

00:42:55.666 --> 00:42:57.916 A:middle
to the right side to
decrease the number of days.

00:42:57.916 --> 00:43:00.796 A:middle
Since they are using
a stock UI slider,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.916 --> 00:43:00.796 A:middle
Since they are using
a stock UI slider,

00:43:00.876 --> 00:43:02.256 A:middle
they got this behavior for free.

00:43:03.556 --> 00:43:06.386 A:middle
I also prefer nonstop flight
only, so I am going to turn

00:43:06.386 --> 00:43:09.926 A:middle
on that switch at the
bottom, and as you can see,

00:43:09.926 --> 00:43:11.446 A:middle
it also flows from
right to left.

00:43:11.706 --> 00:43:15.976 A:middle
So the entire UI feels just
right and feels very intuitive

00:43:16.286 --> 00:43:17.736 A:middle
for natives of these languages.

00:43:18.536 --> 00:43:22.396 A:middle
And that's how easy it can be to
add right-to-left localizations

00:43:22.396 --> 00:43:23.906 A:middle
to your apps on iOS 9.

00:43:24.086 --> 00:43:24.626 A:middle
Thank you so much.

00:43:25.206 --> 00:43:27.206 A:middle
[ Applause ]

00:43:27.396 --> 00:43:28.316 A:middle
Now back to Toby.

00:43:30.146 --> 00:43:30.736 A:middle
&gt;&gt; TOBY PATERSON:
Thank you, Sara.

00:43:33.596 --> 00:43:36.626 A:middle
Well, as Sara mentioned, we have
full support for this in UIKit

00:43:36.626 --> 00:43:38.526 A:middle
and our other system frameworks.

00:43:38.886 --> 00:43:40.796 A:middle
So you can get a lot
of this just for free

00:43:40.796 --> 00:43:42.156 A:middle
in your own applications.

00:43:42.826 --> 00:43:45.356 A:middle
If you have custom views
or gesture recognizers,

00:43:45.686 --> 00:43:47.596 A:middle
you do need to think
about what they mean

00:43:47.766 --> 00:43:49.186 A:middle
in a right-to-left language.

00:43:50.066 --> 00:43:52.846 A:middle
We have this API here, which I
am not even going to try and say

00:43:52.846 --> 00:43:56.016 A:middle
out loud, to tell you
which way the UI is flowing

00:43:56.016 --> 00:43:59.086 A:middle
so you can make the appropriate
decision for your UI.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.686 --> 00:44:02.846 A:middle
Next I'd like to
talk about links,

00:44:03.516 --> 00:44:06.436 A:middle
and by these I mean the kind of
links that you get from a friend

00:44:06.436 --> 00:44:07.636 A:middle
in a message or an email.

00:44:08.456 --> 00:44:11.526 A:middle
You tap on it, and invariably
it opens up in a web page.

00:44:12.126 --> 00:44:14.316 A:middle
Well, this is exactly
what you want on the Mac

00:44:14.376 --> 00:44:17.766 A:middle
because Safari is a natural
home for web applications.

00:44:18.936 --> 00:44:21.706 A:middle
iOS, on the other hand, is
all about the native app.

00:44:21.806 --> 00:44:24.386 A:middle
Wouldn't it be great if that
same link when you tapped

00:44:24.386 --> 00:44:28.346 A:middle
on it could open up right in
the associated application?

00:44:29.826 --> 00:44:33.806 A:middle
Well, that's exactly what
we've made possible in iOS 9.

00:44:33.806 --> 00:44:34.466 A:middle
[ Applause ]

00:44:34.466 --> 00:44:41.096 A:middle
This kind of universal app
linking that takes you to the --

00:44:41.096 --> 00:44:44.026 A:middle
the same link that can take
you to the natural destination

00:44:44.026 --> 00:44:45.446 A:middle
for the platform
that you are on.

00:44:45.816 --> 00:44:48.736 A:middle
Safari on the Mac or
native apps on iOS.

00:44:49.386 --> 00:44:50.266 A:middle
Here's how it works.

00:44:51.446 --> 00:44:55.416 A:middle
You host a file on your website
that lists the kind of URLs

00:44:55.416 --> 00:44:57.566 A:middle
that your application
can handle natively.

00:44:58.236 --> 00:45:00.446 A:middle
When the user taps
on one of those URLs,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.236 --> 00:45:00.446 A:middle
When the user taps
on one of those URLs,

00:45:00.886 --> 00:45:04.986 A:middle
we wrap it up in an
NSUserActivity and hand it off

00:45:04.986 --> 00:45:06.656 A:middle
to your application the same way

00:45:06.656 --> 00:45:09.016 A:middle
that Handoff does,
and that's it.

00:45:09.016 --> 00:45:09.806 A:middle
It's that easy.

00:45:09.806 --> 00:45:14.656 A:middle
Now I'd like to talk about some
of the new things in iOS 9,

00:45:15.466 --> 00:45:16.466 A:middle
starting with HomeKit.

00:45:18.176 --> 00:45:20.926 A:middle
So this morning we announced
a number of great new features

00:45:20.926 --> 00:45:24.046 A:middle
for the HomeKit platform, and
of course, we've been continuing

00:45:24.046 --> 00:45:26.206 A:middle
to enhance the HomeKit
framework.

00:45:27.936 --> 00:45:32.116 A:middle
Certain classes of accessories
can now post push notifications

00:45:32.376 --> 00:45:36.256 A:middle
right to your devices, doors,
windows, and alarm systems.

00:45:37.026 --> 00:45:39.606 A:middle
And we have a new
system UI for managing

00:45:39.676 --> 00:45:41.926 A:middle
who you are sharing your
HomeKit network with.

00:45:42.866 --> 00:45:45.516 A:middle
This is available in Settings,
and we also have an API

00:45:45.516 --> 00:45:48.756 A:middle
so you can bring it up right
in your own application.

00:45:50.286 --> 00:45:52.626 A:middle
But I think the really
interesting things are

00:45:52.626 --> 00:45:53.496 A:middle
event triggers.

00:45:54.236 --> 00:45:58.336 A:middle
These let you set up "if this,
then that" sequence of actions

00:45:58.336 --> 00:46:00.176 A:middle
so that you can turn
the lights off

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.336 --> 00:46:00.176 A:middle
so that you can turn
the lights off

00:46:00.176 --> 00:46:02.746 A:middle
when you activate the alarm
system or, more importantly,

00:46:02.746 --> 00:46:05.106 A:middle
turn the coffee machine on
first thing in the morning.

00:46:05.686 --> 00:46:07.526 A:middle
I think these are going
to be really powerful.

00:46:09.316 --> 00:46:10.736 A:middle
Now we have some
new things in Search

00:46:10.796 --> 00:46:12.646 A:middle
that I think you are
probably all interested in.

00:46:13.816 --> 00:46:15.826 A:middle
The big news for iOS
Search, of course,

00:46:15.826 --> 00:46:18.426 A:middle
is that now it can search
your application content.

00:46:18.966 --> 00:46:21.656 A:middle
We can show rich results, and
when the user taps on them,

00:46:22.006 --> 00:46:22.716 A:middle
take them straight

00:46:22.716 --> 00:46:25.026 A:middle
to the appropriate spot
in your application.

00:46:26.216 --> 00:46:29.246 A:middle
There are three ways that you
can index your application data.

00:46:29.956 --> 00:46:33.116 A:middle
Core Spotlight lets you
explicitly index all

00:46:33.116 --> 00:46:35.286 A:middle
of the application
content that you have.

00:46:36.016 --> 00:46:39.296 A:middle
Now, some of that data may only
be valid for a limited time,

00:46:39.756 --> 00:46:42.316 A:middle
and so you can optionally
provide an app indexing

00:46:42.316 --> 00:46:45.456 A:middle
extension, which Core
Spotlight will call out to

00:46:45.456 --> 00:46:48.836 A:middle
at the appropriate time to
make sure your indices are

00:46:48.836 --> 00:46:49.426 A:middle
up to date.

00:46:51.226 --> 00:46:55.096 A:middle
Another way of indexing
data is via NSUserActivity.

00:46:55.776 --> 00:46:59.036 A:middle
This lets you index things that
the user is seeing or doing

00:46:59.036 --> 00:47:02.216 A:middle
in your application so that
they can easily find them

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.036 --> 00:47:02.216 A:middle
in your application so that
they can easily find them

00:47:02.326 --> 00:47:04.136 A:middle
and get back to your
application.

00:47:05.276 --> 00:47:08.586 A:middle
And finally, if your
app is mirroring content

00:47:08.586 --> 00:47:12.576 A:middle
from your website, you can
mark up that website content

00:47:12.576 --> 00:47:15.256 A:middle
so that our web crawler
will find it, index it,

00:47:15.476 --> 00:47:20.476 A:middle
and provide results when
searching locally on the device.

00:47:20.956 --> 00:47:23.596 A:middle
Now, you saw this morning
that when you swipe

00:47:23.596 --> 00:47:27.176 A:middle
into the new Search UI,
we already have a series

00:47:27.176 --> 00:47:29.206 A:middle
of suggestions ready
and waiting for you

00:47:29.206 --> 00:47:30.786 A:middle
without you having
to type anything.

00:47:31.986 --> 00:47:34.556 A:middle
Well, Siri can even
suggest results from deep

00:47:34.616 --> 00:47:36.096 A:middle
within your application.

00:47:36.676 --> 00:47:40.886 A:middle
If you are using
NSUserActivity to make a note

00:47:40.886 --> 00:47:44.386 A:middle
of what the user is doing in
your application, Siri can take

00:47:44.386 --> 00:47:45.836 A:middle
that into account when coming

00:47:45.836 --> 00:47:47.926 A:middle
up with these proactive
suggestions.

00:47:48.136 --> 00:47:50.676 A:middle
You've probably noticed we
are building a lot on top

00:47:50.676 --> 00:47:52.286 A:middle
of NSUserActivity here.

00:47:52.286 --> 00:47:53.686 A:middle
There's Handoff, of course,

00:47:53.986 --> 00:47:57.306 A:middle
universal links,
Search, Suggestions.

00:47:57.356 --> 00:48:00.126 A:middle
I think this is a great
example of how we are building

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.356 --> 00:48:00.126 A:middle
I think this is a great
example of how we are building

00:48:00.126 --> 00:48:02.656 A:middle
on our existing foundations
to make your apps

00:48:02.656 --> 00:48:04.556 A:middle
and the whole ecosystem
much richer.

00:48:05.166 --> 00:48:09.636 A:middle
Now, the big news this morning,
of course, was Multitasking,

00:48:09.736 --> 00:48:12.056 A:middle
and we are really excited
to bring this to you today.

00:48:13.686 --> 00:48:16.536 A:middle
There's slideover
and split view,

00:48:17.216 --> 00:48:20.106 A:middle
which lets you pin apps
side by side so you can work

00:48:20.106 --> 00:48:21.306 A:middle
on them at the same time.

00:48:21.696 --> 00:48:24.856 A:middle
I could almost hear many of you
wondering out loud this morning,

00:48:24.856 --> 00:48:27.796 A:middle
oh, gosh, what do I have
to do on my application now

00:48:27.796 --> 00:48:29.156 A:middle
to take advantage of this?

00:48:30.186 --> 00:48:33.886 A:middle
Well, the answer hopefully
is not very much at all.

00:48:34.686 --> 00:48:36.956 A:middle
You may remember last year
we introduced this notion

00:48:36.956 --> 00:48:40.146 A:middle
of Adaptive UI, which is
a really simple concept.

00:48:40.606 --> 00:48:42.956 A:middle
It says that instead
of designing your UI

00:48:42.956 --> 00:48:47.826 A:middle
for fixed screen sizes, instead
pick a layout and then adapt it

00:48:47.826 --> 00:48:50.076 A:middle
to changes in your
window bounds.

00:48:50.736 --> 00:48:53.286 A:middle
And we provide a number of
tools to help you with this.

00:48:53.826 --> 00:48:56.506 A:middle
There's Dynamic Type
for laying out your text

00:48:56.506 --> 00:48:57.946 A:middle
and autolayout constraints

00:48:57.946 --> 00:49:01.216 A:middle
for adapting your UI
to changes in bounds.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:57.946 --> 00:49:01.216 A:middle
for adapting your UI
to changes in bounds.

00:49:01.806 --> 00:49:03.066 A:middle
Now, we recognize, of course,

00:49:03.066 --> 00:49:05.236 A:middle
that a single layout is
not going to make sense

00:49:05.236 --> 00:49:07.376 A:middle
across all these
different screen sizes,

00:49:07.676 --> 00:49:11.276 A:middle
so we introduced this
abstraction called Size Classes,

00:49:11.566 --> 00:49:14.606 A:middle
which try to allow you to
choose the appropriate layout

00:49:14.606 --> 00:49:17.386 A:middle
without having to resort
to a device-specific check.

00:49:19.026 --> 00:49:22.306 A:middle
This works by broadly
categorizing sizes,

00:49:22.306 --> 00:49:26.116 A:middle
screen sizes, into two
buckets, regular and compact.

00:49:26.116 --> 00:49:29.996 A:middle
You can see here that the iPad
has a regular horizontal size

00:49:29.996 --> 00:49:34.076 A:middle
class, and the iPhone has a
compact horizontal size class.

00:49:34.766 --> 00:49:37.236 A:middle
We are using these
exact same mechanisms

00:49:37.236 --> 00:49:38.916 A:middle
for the Multitasking UI.

00:49:39.996 --> 00:49:42.836 A:middle
You can see here in the slide
overview it has a compact

00:49:42.996 --> 00:49:44.576 A:middle
horizontal size class.

00:49:44.876 --> 00:49:48.066 A:middle
And when I tap to pin those
two apps in split view,

00:49:48.946 --> 00:49:51.986 A:middle
we adjust the bounds of the
main app there on the left

00:49:52.556 --> 00:49:55.576 A:middle
but keep it with a regular
horizontal size class.

00:49:55.816 --> 00:49:59.336 A:middle
Now, the interesting thing,
when you resize that split view

00:49:59.696 --> 00:50:03.916 A:middle
to 50/50, is not only do we
adjust the window bounds there,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.696 --> 00:50:03.916 A:middle
to 50/50, is not only do we
adjust the window bounds there,

00:50:03.916 --> 00:50:07.336 A:middle
but we also change the
size class of the main app

00:50:07.336 --> 00:50:09.196 A:middle
on the left from
regular to compact.

00:50:10.126 --> 00:50:13.786 A:middle
We found in our own applications
that this is the best layout

00:50:13.946 --> 00:50:15.546 A:middle
for these window dimensions.

00:50:16.886 --> 00:50:20.576 A:middle
So if you have already adopted
Adaptive UI in your app,

00:50:21.046 --> 00:50:23.426 A:middle
there's actually very
little left for you to do.

00:50:24.936 --> 00:50:26.706 A:middle
You need to use a
launch Storyboard,

00:50:26.706 --> 00:50:30.126 A:middle
which is a more flexible
replacement for default pings,

00:50:31.066 --> 00:50:33.766 A:middle
and then declare that you
support all orientations,

00:50:33.926 --> 00:50:34.606 A:middle
and that's it.

00:50:35.106 --> 00:50:37.966 A:middle
As Craig mentioned this morning,
we have literally converted apps

00:50:37.966 --> 00:50:41.236 A:middle
in a matter of minutes and
had them up and running.

00:50:41.386 --> 00:50:42.236 A:middle
It's really great.

00:50:43.606 --> 00:50:45.946 A:middle
Now, this morning we also
announced Picture in Picture,

00:50:46.266 --> 00:50:49.246 A:middle
which lets you continue
to watch videos over top

00:50:49.246 --> 00:50:50.686 A:middle
of your other applications.

00:50:51.106 --> 00:50:53.696 A:middle
And if you are a
video application,

00:50:53.696 --> 00:50:55.106 A:middle
it's really straightforward
for you

00:50:55.106 --> 00:50:56.826 A:middle
to take advantage
of this yourself.

00:50:57.876 --> 00:50:59.246 A:middle
The first thing you
need to do, of course,

00:50:59.246 --> 00:51:03.186 A:middle
is just support background media
playback, and then you need

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.246 --> 00:51:03.186 A:middle
is just support background media
playback, and then you need

00:51:03.186 --> 00:51:05.946 A:middle
to enable Picture in Picture
support in your controller.

00:51:06.716 --> 00:51:09.846 A:middle
We have this built into
our standard media playback

00:51:09.846 --> 00:51:13.506 A:middle
controls, and we provide an AV
Picture in Picture controller

00:51:13.816 --> 00:51:15.736 A:middle
to give you very
fine-grain control

00:51:16.296 --> 00:51:18.466 A:middle
over entering Picture
in Picture.

00:51:19.016 --> 00:51:22.176 A:middle
Next I'd like to
talk about the Mac.

00:51:23.056 --> 00:51:26.426 A:middle
So OS X, of course,
has had Multitasking,

00:51:26.426 --> 00:51:28.096 A:middle
multiple windows forever,

00:51:28.606 --> 00:51:31.706 A:middle
and this year we announced some
new window management features

00:51:31.986 --> 00:51:33.976 A:middle
that make that even
more compelling.

00:51:35.046 --> 00:51:37.256 A:middle
The key element of
this is the ability

00:51:37.256 --> 00:51:40.836 A:middle
to tile two applications
side by side in a split view,

00:51:41.316 --> 00:51:43.096 A:middle
as you can see in
this screenshot here.

00:51:44.806 --> 00:51:47.586 A:middle
Now, adoption of
this is really easy.

00:51:48.546 --> 00:51:53.916 A:middle
Any resizable window can partake
in this, and the key thing

00:51:53.916 --> 00:51:56.706 A:middle
for you to do there is to make
sure that your window lays

00:51:56.706 --> 00:51:59.966 A:middle
out nicely in both
narrow and wide geometries

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.296 --> 00:52:01.896 A:middle
so that it can play
along well with just

00:52:01.896 --> 00:52:03.806 A:middle
about any other window
in the system there.

00:52:03.806 --> 00:52:07.926 A:middle
And of course, we've added some
new APIs and behaviors to AppKit

00:52:08.076 --> 00:52:09.576 A:middle
to make this really
easy for you,

00:52:09.956 --> 00:52:12.016 A:middle
such as automatically
hiding the sidebar

00:52:12.016 --> 00:52:13.606 A:middle
in the NS split view controller.

00:52:14.086 --> 00:52:18.086 A:middle
Another key development on
the Mac is the introduction

00:52:18.086 --> 00:52:22.256 A:middle
of Force Touch, which we
released a few months ago.

00:52:23.276 --> 00:52:26.736 A:middle
So Force Touch opens up a
whole new dimension of Touch,

00:52:27.066 --> 00:52:30.896 A:middle
with pressure sensitivity and
haptic feedback on the Trackpad.

00:52:32.016 --> 00:52:34.976 A:middle
We use this in our own apps
for things like text lookup,

00:52:34.976 --> 00:52:38.126 A:middle
pressure-sensitive playback
controls, and finer control

00:52:38.126 --> 00:52:40.276 A:middle
over drawing, preview,
and markup.

00:52:42.586 --> 00:52:45.986 A:middle
Naturally, we've added some
API for you to take advantage

00:52:45.986 --> 00:52:47.516 A:middle
of this in your own application.

00:52:48.226 --> 00:52:50.576 A:middle
You can set the pressure
configuration for the kind

00:52:50.576 --> 00:52:51.976 A:middle
of Force Touch that you want,

00:52:52.306 --> 00:52:55.586 A:middle
configure the default haptic
feedback on the Trackpad,

00:52:56.096 --> 00:52:58.936 A:middle
and have pressure changed
events delivered to your views

00:52:58.986 --> 00:53:00.556 A:middle
and gesture recognizers.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:58.986 --> 00:53:00.556 A:middle
and gesture recognizers.

00:53:01.226 --> 00:53:04.316 A:middle
We think Force Touch is a
really exciting new capability

00:53:04.316 --> 00:53:04.836 A:middle
for the Mac.

00:53:05.206 --> 00:53:07.226 A:middle
We can't wait to
see what you guys do

00:53:07.226 --> 00:53:08.356 A:middle
with it in your own apps.

00:53:10.016 --> 00:53:12.556 A:middle
Now, I have some updates
on iCloud for you.

00:53:14.176 --> 00:53:17.736 A:middle
Last year we launched iCloud
Drive, and this is a great way

00:53:17.736 --> 00:53:19.956 A:middle
for accessing all
of your documents

00:53:19.956 --> 00:53:23.306 A:middle
across your mobile devices,
your computers, and the web.

00:53:25.066 --> 00:53:28.886 A:middle
Now, on iOS, apps provide
a great in-app experience

00:53:28.886 --> 00:53:30.426 A:middle
for managing your documents,

00:53:30.816 --> 00:53:33.786 A:middle
and we think this simple
app-centric model is great

00:53:33.786 --> 00:53:35.176 A:middle
for many people out there.

00:53:35.576 --> 00:53:38.606 A:middle
But Mac users, of course,
are accustomed to working

00:53:38.606 --> 00:53:41.746 A:middle
with their documents
directly in iCloud Drive.

00:53:42.776 --> 00:53:45.556 A:middle
So for those folks, we are
adding a new application

00:53:45.556 --> 00:53:48.386 A:middle
to iOS, the iCloud Drive app.

00:53:49.516 --> 00:53:54.986 A:middle
[ Applause ]

00:53:55.486 --> 00:53:56.576 A:middle
This is what it looks like.

00:53:56.636 --> 00:53:58.146 A:middle
You can see all of
your documents

00:53:58.146 --> 00:54:01.016 A:middle
in iCloud Drive organized
just as you would expect.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:58.146 --> 00:54:01.016 A:middle
in iCloud Drive organized
just as you would expect.

00:54:01.636 --> 00:54:05.146 A:middle
You can preview many document
types right in the application.

00:54:05.806 --> 00:54:09.656 A:middle
And naturally, you can open a
document in its own application.

00:54:11.386 --> 00:54:14.716 A:middle
Now, prior to iOS 9, the only
way of accomplishing this was

00:54:14.716 --> 00:54:18.066 A:middle
to copy the document into
the application container,

00:54:18.346 --> 00:54:20.456 A:middle
and of course, that's
exactly what you don't want

00:54:20.456 --> 00:54:22.166 A:middle
for documents in iCloud Drive

00:54:22.546 --> 00:54:24.616 A:middle
or any other document
provider for that matter.

00:54:25.696 --> 00:54:28.486 A:middle
What you really want is to be
able to edit those documents

00:54:28.486 --> 00:54:31.066 A:middle
in place without
moving or copying them.

00:54:31.906 --> 00:54:34.136 A:middle
So if you are a document-based
application,

00:54:34.366 --> 00:54:36.186 A:middle
here's what you need
to do to enable that.

00:54:37.326 --> 00:54:38.996 A:middle
You need to support
file coordination

00:54:38.996 --> 00:54:41.676 A:middle
since there may be multiple
processes trying to access

00:54:41.726 --> 00:54:43.526 A:middle
that document simultaneously.

00:54:43.696 --> 00:54:46.846 A:middle
And then you just add this
key to your Info.plist

00:54:47.176 --> 00:54:49.536 A:middle
and handle the application
open callback.

00:54:50.136 --> 00:54:50.826 A:middle
And that's it.

00:54:52.296 --> 00:54:56.626 A:middle
iCloud Drive is built on top
of CloudKit as are, in fact,

00:54:57.096 --> 00:54:58.996 A:middle
many of our iCloud services.

00:54:59.676 --> 00:55:02.516 A:middle
CloudKit is a public API,
and when we launched it,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.676 --> 00:55:02.516 A:middle
CloudKit is a public API,
and when we launched it,

00:55:02.876 --> 00:55:04.866 A:middle
we said it was going
to be basically free

00:55:04.866 --> 00:55:06.286 A:middle
for probably most of you.

00:55:06.686 --> 00:55:09.236 A:middle
Well, what does that
actually mean in practice?

00:55:10.586 --> 00:55:13.496 A:middle
Here's what you can store in
iCloud Drive for free right

00:55:13.496 --> 00:55:15.516 A:middle
from the get-go with no users.

00:55:16.126 --> 00:55:18.526 A:middle
As you add more users
to your application,

00:55:18.866 --> 00:55:23.406 A:middle
these grow commensurately up
to these maximum data limits.

00:55:25.126 --> 00:55:27.846 A:middle
Now, we've built a
CloudKit Dashboard for you

00:55:27.846 --> 00:55:31.116 A:middle
that shows you all of the
key metrics at a glance

00:55:31.376 --> 00:55:34.626 A:middle
and includes a line below which
everything is free for you.

00:55:35.396 --> 00:55:38.146 A:middle
We project that line a short
ways out into the future

00:55:38.146 --> 00:55:41.076 A:middle
so you can have some advance
notice before crossing it.

00:55:41.696 --> 00:55:44.816 A:middle
And if you do cross that
line, we've published a clear

00:55:44.816 --> 00:55:47.186 A:middle
and simple pricing guide here.

00:55:48.346 --> 00:55:51.076 A:middle
You can also find tons of
other interesting information

00:55:51.076 --> 00:55:54.676 A:middle
about CloudKit here, such as
the details of a new feature

00:55:54.676 --> 00:55:58.456 A:middle
that we are launching this
year, CloudKit Web Services.

00:55:59.276 --> 00:56:02.656 A:middle
This is basically a full-on
CloudKit implementation

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:59.276 --> 00:56:02.656 A:middle
This is basically a full-on
CloudKit implementation

00:56:02.766 --> 00:56:03.926 A:middle
for web apps.

00:56:04.746 --> 00:56:06.046 A:middle
Anything that you can do

00:56:06.486 --> 00:56:10.506 A:middle
with the native CloudKit
API you can now do via JSON.

00:56:11.036 --> 00:56:14.126 A:middle
We provide a JavaScript
library that mimics as closely

00:56:14.126 --> 00:56:16.496 A:middle
as possible the native
CloudKit API.

00:56:16.496 --> 00:56:19.446 A:middle
And we provide a web login flow

00:56:19.446 --> 00:56:21.786 A:middle
so that you can authenticate
your users securely.

00:56:22.556 --> 00:56:24.556 A:middle
We think this is going
to make it really easy

00:56:24.556 --> 00:56:26.896 A:middle
to write a CloudKit-based
web application

00:56:27.196 --> 00:56:30.746 A:middle
to run alongside your
iPad, iPhone, and Mac apps.

00:56:31.276 --> 00:56:33.306 A:middle
And that's what I
have for CloudKit.

00:56:33.306 --> 00:56:34.026 A:middle
Thank you.

00:56:35.476 --> 00:56:38.506 A:middle
[ Applause ]

00:56:39.006 --> 00:56:40.696 A:middle
Now I'd like to hand off to
Chris Lattner, who is going

00:56:40.696 --> 00:56:42.136 A:middle
to tell you something
about Swift.

00:56:42.176 --> 00:56:44.006 A:middle
[ Cheers and applause ]

00:56:44.006 --> 00:56:44.156 A:middle
&gt;&gt; CHRIS LATTNER: All right.

00:56:44.156 --> 00:56:45.456 A:middle
Thank you.

00:56:50.046 --> 00:56:50.766 A:middle
Thank you, Toby.

00:56:51.276 --> 00:56:53.126 A:middle
The response to Swift
has been amazing,

00:56:53.376 --> 00:56:55.616 A:middle
and it's really actually
hard to believe

00:56:55.616 --> 00:56:57.376 A:middle
that it was unveiled
just one year ago.

00:56:58.496 --> 00:57:00.436 A:middle
When we talked about Swift
back then, we talked about some

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:58.496 --> 00:57:00.436 A:middle
When we talked about Swift
back then, we talked about some

00:57:00.436 --> 00:57:03.656 A:middle
of its major features
like performance, safety,

00:57:03.976 --> 00:57:05.766 A:middle
and also the interactivity
of Playgrounds.

00:57:06.446 --> 00:57:09.036 A:middle
But we want Swift to be
pervasively available

00:57:09.036 --> 00:57:12.396 A:middle
to everybody, and so we are
open sourcing the compiler

00:57:12.756 --> 00:57:15.746 A:middle
and the standard library
and even kicking things off

00:57:15.866 --> 00:57:17.796 A:middle
with the Linux board as well.

00:57:18.516 --> 00:57:24.756 A:middle
[ Applause ]

00:57:25.256 --> 00:57:26.296 A:middle
This project is going to be run

00:57:26.296 --> 00:57:30.636 A:middle
under an OSI-approved permissive
license starting later this year

00:57:30.636 --> 00:57:32.266 A:middle
after we wrap up
work on Swift 2.

00:57:32.986 --> 00:57:35.416 A:middle
We look forward to working
even more closely with you all,

00:57:36.456 --> 00:57:37.956 A:middle
incorporating both your ideas

00:57:38.116 --> 00:57:39.616 A:middle
and your code contributions
as well.

00:57:40.246 --> 00:57:44.996 A:middle
So there's been a lot written
about Swift, and we're not going

00:57:45.026 --> 00:57:47.216 A:middle
to go through all the quotes,
but one of our favorite was

00:57:47.216 --> 00:57:48.936 A:middle
when Swift topped the list

00:57:49.006 --> 00:57:51.946 A:middle
of Stack Overflow's most-loved
programming languages.

00:57:53.076 --> 00:57:55.086 A:middle
And there's a lot of
reasons to love Swift; right?

00:57:55.906 --> 00:57:58.376 A:middle
One of which is it's built
to run your applications

00:57:58.376 --> 00:58:00.096 A:middle
at top speed, and
over the last year,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:58.376 --> 00:58:00.096 A:middle
at top speed, and
over the last year,

00:58:00.166 --> 00:58:02.236 A:middle
performance of Swift code
has grown tremendously

00:58:02.236 --> 00:58:04.326 A:middle
as we've implemented new
optimizations in the compiler.

00:58:05.446 --> 00:58:07.586 A:middle
And there is a ton
new in Swift 2

00:58:07.726 --> 00:58:09.636 A:middle
with improvements
across the board.

00:58:09.636 --> 00:58:13.806 A:middle
But let's talk about a few of
these, and maybe we will start

00:58:13.806 --> 00:58:15.606 A:middle
with one of the most
requested features,

00:58:15.676 --> 00:58:17.456 A:middle
a new error handling model.

00:58:18.556 --> 00:58:21.926 A:middle
So error handling is a
very well-known field.

00:58:22.286 --> 00:58:23.866 A:middle
There's a lot of
known approaches.

00:58:24.836 --> 00:58:27.146 A:middle
But all these approaches
have very well-known problems

00:58:27.146 --> 00:58:27.496 A:middle
as well.

00:58:27.756 --> 00:58:30.756 A:middle
So we weren't satisfied with
any of the existing approaches,

00:58:30.756 --> 00:58:33.366 A:middle
so we came up with something
we think will feel familiar

00:58:33.406 --> 00:58:36.616 A:middle
but will solve these
kinds of problems.

00:58:37.126 --> 00:58:38.316 A:middle
So let's talk about it now.

00:58:39.626 --> 00:58:40.476 A:middle
It starts out simple.

00:58:41.326 --> 00:58:43.596 A:middle
A method or function in
Swift can now be marked

00:58:43.596 --> 00:58:44.766 A:middle
as being able to
produce an error.

00:58:45.786 --> 00:58:48.226 A:middle
This greatly simplifies
many common Cocoa APIs

00:58:48.226 --> 00:58:51.136 A:middle
and also allows the
compiler to verify

00:58:51.456 --> 00:58:53.176 A:middle
that you are handling
your errors properly.

00:58:54.546 --> 00:58:57.356 A:middle
Swift now has familiar catch
syntax to handle errors

00:58:57.776 --> 00:59:01.276 A:middle
and uses powerful pattern
matching to enable you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:57.776 --> 00:59:01.276 A:middle
and uses powerful pattern
matching to enable you

00:59:01.276 --> 00:59:03.046 A:middle
to express rich cache
conditions.

00:59:04.586 --> 00:59:07.246 A:middle
Swift uses the try keyword
but uses in a different way.

00:59:08.216 --> 00:59:10.596 A:middle
It uses it to mark
calls to methods

00:59:10.596 --> 00:59:11.746 A:middle
that can produce an error.

00:59:12.686 --> 00:59:15.986 A:middle
This defines the way an entire
class of errors that happen

00:59:15.986 --> 00:59:18.616 A:middle
when you have unanticipated
control flow by making

00:59:18.616 --> 00:59:20.546 A:middle
that control flow
explicit in the code

00:59:20.546 --> 00:59:21.596 A:middle
so you can reason about it.

00:59:22.966 --> 00:59:25.956 A:middle
Of course, it's easy to throw
an error, like you'd expect,

00:59:25.956 --> 00:59:30.036 A:middle
and Swift is the perfect way
to define your own categories

00:59:30.276 --> 00:59:32.866 A:middle
and families of your own
custom error conditions.

00:59:33.386 --> 00:59:34.226 A:middle
It works really great.

00:59:35.696 --> 00:59:36.506 A:middle
Now, we think that Swift --

00:59:36.926 --> 00:59:40.206 A:middle
error handling in Swift
will be super familiar

00:59:40.206 --> 00:59:41.736 A:middle
and will feel really natural,

00:59:41.736 --> 00:59:43.876 A:middle
but it will also greatly
increase the quality

00:59:43.876 --> 00:59:45.146 A:middle
of Swift code across the board.

00:59:46.566 --> 00:59:48.506 A:middle
Let's move on now and talk
about our next big feature,

00:59:48.506 --> 00:59:49.486 A:middle
availability checking.

00:59:50.126 --> 00:59:55.326 A:middle
So we introduce great
new APIs all the time.

00:59:55.866 --> 00:59:58.526 A:middle
Often you want to adopt
some of these new APIs

00:59:58.526 --> 01:00:00.826 A:middle
to get new capabilities in
your applications as well,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:59:58.526 --> 01:00:00.826 A:middle
to get new capabilities in
your applications as well,

01:00:01.266 --> 01:00:02.756 A:middle
but you can't always
drop support

01:00:02.756 --> 01:00:05.076 A:middle
for the previous OS
X or iOS release.

01:00:05.986 --> 01:00:09.806 A:middle
Now, this brings a challenge
because some symbols you want

01:00:09.806 --> 01:00:11.626 A:middle
to use are unconditionally
available,

01:00:12.376 --> 01:00:14.566 A:middle
where other symbols are
conditionally available

01:00:15.156 --> 01:00:18.356 A:middle
depending on the OS that your
app is running on in the field.

01:00:19.476 --> 01:00:21.156 A:middle
With Swift 2, handling
this is a breeze.

01:00:22.066 --> 01:00:24.536 A:middle
Now if you try to use a symbol
that's conditionally available

01:00:24.536 --> 01:00:25.406 A:middle
without checking for it,

01:00:25.686 --> 01:00:27.276 A:middle
the compiler will
produce an error message,

01:00:27.276 --> 01:00:28.566 A:middle
so you can't mess it up.

01:00:29.476 --> 01:00:30.686 A:middle
And Xcode goes even farther

01:00:30.686 --> 01:00:32.796 A:middle
by giving you several
great ways to handle this.

01:00:33.416 --> 01:00:36.506 A:middle
The first is you can use the
new "if available" statement

01:00:36.806 --> 01:00:39.176 A:middle
to add a fine-grain check
right where you need it.

01:00:40.516 --> 01:00:45.776 A:middle
[ Applause ]

01:00:46.276 --> 01:00:48.306 A:middle
But I think even
better than that is

01:00:48.306 --> 01:00:53.246 A:middle
that you can also mark an entire
method or even an entire class

01:00:53.246 --> 01:00:55.636 A:middle
as dependent on new OS features.

01:00:56.026 --> 01:00:58.086 A:middle
This eliminates the need
to do fine-grain checks

01:00:58.346 --> 01:01:00.676 A:middle
and directly expresses
many common situations

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:00:58.346 --> 01:01:00.676 A:middle
and directly expresses
many common situations

01:01:00.676 --> 01:01:01.696 A:middle
that you will have in your code.

01:01:02.146 --> 01:01:04.646 A:middle
It's a great solution that
works really well together.

01:01:05.046 --> 01:01:06.506 A:middle
Now, the error handling features

01:01:06.506 --> 01:01:07.946 A:middle
and the availability
checking features

01:01:07.946 --> 01:01:10.866 A:middle
of Swift 2 are two great
ways to make it easier

01:01:10.866 --> 01:01:12.016 A:middle
to write correct code.

01:01:12.996 --> 01:01:16.186 A:middle
But, of course, we want your
code to be beautiful as well.

01:01:17.106 --> 01:01:20.656 A:middle
So we've done several great
changes in Swift 2 to help this.

01:01:20.886 --> 01:01:22.486 A:middle
Swift 1 introduced a number

01:01:22.486 --> 01:01:24.716 A:middle
of really powerful
global generic functions

01:01:25.146 --> 01:01:28.236 A:middle
to do powerful things
with algorithms.

01:01:28.736 --> 01:01:30.736 A:middle
[Laughter]

01:01:31.236 --> 01:01:32.476 A:middle
Powerful and wonderful.

01:01:32.846 --> 01:01:35.596 A:middle
The problem is these were
not always beautiful to use.

01:01:36.036 --> 01:01:38.746 A:middle
Let's say I have a collection of
numbers, I want to scale them up

01:01:38.746 --> 01:01:39.906 A:middle
and drop some of the results.

01:01:40.406 --> 01:01:42.296 A:middle
With Swift 2, this is easy,

01:01:42.766 --> 01:01:45.346 A:middle
but writing it requires
rearranging a lot of code,

01:01:45.926 --> 01:01:48.906 A:middle
and when you look at it, you
have to read it inside out,

01:01:48.906 --> 01:01:50.416 A:middle
which makes it difficult
to reason about.

01:01:50.856 --> 01:01:53.356 A:middle
Swift 2 introduces a new
language procedure called

01:01:53.406 --> 01:01:54.346 A:middle
protocol extensions.

01:01:55.346 --> 01:01:56.636 A:middle
With protocol extensions,

01:01:57.056 --> 01:02:00.216 A:middle
we can now recast these
global functions as methods,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:01:57.056 --> 01:02:00.216 A:middle
we can now recast these
global functions as methods,

01:02:00.306 --> 01:02:01.936 A:middle
the way they should
have been all along.

01:02:03.146 --> 01:02:05.666 A:middle
This means that the new code
that you write is beautiful.

01:02:05.666 --> 01:02:07.436 A:middle
It's simple to write,
and it's simple to read.

01:02:08.016 --> 01:02:15.006 A:middle
[ Applause ]

01:02:15.506 --> 01:02:17.346 A:middle
Let's talk about early exits.

01:02:18.496 --> 01:02:21.086 A:middle
It's very common to want to exit
a scope early for some reason,

01:02:21.216 --> 01:02:23.216 A:middle
so maybe you have a method
that takes a parameter

01:02:23.486 --> 01:02:26.076 A:middle
that could be nil, and if
it's nil it doesn't want

01:02:26.076 --> 01:02:26.456 A:middle
to do anything.

01:02:26.616 --> 01:02:29.676 A:middle
Well, the "if let" statement
gives you a very familiar,

01:02:29.676 --> 01:02:32.166 A:middle
comfortable, and great way
to check these conditions,

01:02:32.356 --> 01:02:36.366 A:middle
but it requires you to indent
all your code an extra level.

01:02:36.366 --> 01:02:39.146 A:middle
To solve this problem, we have
introduced a new guard statement

01:02:39.146 --> 01:02:40.556 A:middle
that allows you to
check a condition

01:02:40.556 --> 01:02:41.916 A:middle
and then bail out early.

01:02:41.916 --> 01:02:44.516 A:middle
It allows you to write
nice straight-line code

01:02:44.516 --> 01:02:45.956 A:middle
without the excess indentation.

01:02:47.516 --> 01:02:52.756 A:middle
[ Applause ]

01:02:53.256 --> 01:02:54.886 A:middle
Next, a huge component

01:02:54.886 --> 01:02:57.616 A:middle
of how Swift feels is how
well it works with Cocoa.

01:02:58.846 --> 01:03:00.626 A:middle
But with a plain
Objective-C API,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:02:58.846 --> 01:03:00.626 A:middle
But with a plain
Objective-C API,

01:03:01.156 --> 01:03:03.426 A:middle
the Swift compiler
has no idea whether

01:03:03.426 --> 01:03:04.766 A:middle
or not a pointer is nullable

01:03:04.766 --> 01:03:06.666 A:middle
or what the element types
of a collection are.

01:03:07.886 --> 01:03:10.656 A:middle
We solve this by introducing
new features subjective C,

01:03:10.656 --> 01:03:13.306 A:middle
including the ability to express
nullability for pointer types,

01:03:13.806 --> 01:03:19.606 A:middle
and in Xcode 7, we introduced an
entirely new first class generic

01:03:19.606 --> 01:03:23.316 A:middle
system to Objective-C
that allows you

01:03:23.356 --> 01:03:24.976 A:middle
to express element types

01:03:24.976 --> 01:03:27.236 A:middle
and many other things
right in Objective-C.

01:03:29.016 --> 01:03:33.646 A:middle
[ Applause ]

01:03:34.146 --> 01:03:37.086 A:middle
Through the adoption of this and
a whole bunch of other features,

01:03:37.466 --> 01:03:39.066 A:middle
Cocoa is feeling quite swift.

01:03:40.856 --> 01:03:42.506 A:middle
Finally, let's talk about Xcode.

01:03:43.556 --> 01:03:48.716 A:middle
Xcode 7 introduces a
revamped Swift migrator.

01:03:49.436 --> 01:03:52.376 A:middle
It automatically will move your
Swift 1 code to Swift 2 syntax,

01:03:52.656 --> 01:03:54.836 A:middle
including adoption of the
new error handling model.

01:03:55.596 --> 01:03:58.166 A:middle
As we continue to evolve the
Swift language going forward,

01:03:58.356 --> 01:04:00.476 A:middle
we will keep moving the
migrator forward to match.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:03:58.356 --> 01:04:00.476 A:middle
we will keep moving the
migrator forward to match.

01:04:01.946 --> 01:04:04.326 A:middle
Next, let's talk
about header files.

01:04:05.976 --> 01:04:09.496 A:middle
But wait. Header files and not
having header files are a huge

01:04:09.536 --> 01:04:10.826 A:middle
feature of Swift; right?

01:04:11.516 --> 01:04:14.016 A:middle
The problem is, is that
sometimes you actually do want

01:04:14.016 --> 01:04:16.206 A:middle
to skim a bunch of code
to understand what it does

01:04:16.206 --> 01:04:19.406 A:middle
at a glance, and all the
implementation details get

01:04:19.486 --> 01:04:20.006 A:middle
in the way.

01:04:21.236 --> 01:04:23.246 A:middle
Well, Xcode has solved
this problem

01:04:23.246 --> 01:04:24.966 A:middle
by introducing a new
Assistant editor,

01:04:25.256 --> 01:04:26.916 A:middle
which gives you a
header file-like view

01:04:26.916 --> 01:04:28.626 A:middle
of an arbitrary Swift
source file.

01:04:29.396 --> 01:04:31.126 A:middle
This gives you all the
skimmability advantages

01:04:31.126 --> 01:04:33.756 A:middle
of a header file without the
maintenance burden of having

01:04:33.756 --> 01:04:35.996 A:middle
to write, maintain,
and edit it yourself.

01:04:37.066 --> 01:04:37.616 A:middle
That's great.

01:04:39.476 --> 01:04:43.946 A:middle
[ Applause ]

01:04:44.446 --> 01:04:45.766 A:middle
Next, rich comments.

01:04:46.886 --> 01:04:50.646 A:middle
Xcode allows you to write
beautiful Swift Playgrounds

01:04:50.916 --> 01:04:54.506 A:middle
by writing rich comments
directly into the Xcode editor.

01:04:55.526 --> 01:04:58.876 A:middle
These rich comments use the
very popular Markdown syntax,

01:04:59.226 --> 01:05:00.646 A:middle
and now we've brought
in the syntax

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:04:59.226 --> 01:05:00.646 A:middle
and now we've brought
in the syntax

01:05:00.896 --> 01:05:02.546 A:middle
to documentation
comments as well.

01:05:03.516 --> 01:05:06.096 A:middle
We've even added support for new
features, like in-line images

01:05:06.096 --> 01:05:08.666 A:middle
and links, giving you a
great, consistent experience

01:05:08.666 --> 01:05:10.416 A:middle
between Playgrounds
and doc comments.

01:05:11.486 --> 01:05:11.906 A:middle
Finally --

01:05:12.676 --> 01:05:16.046 A:middle
[ Applause ]

01:05:16.546 --> 01:05:18.386 A:middle
-- finally, let's talk about
Playgrounds themselves.

01:05:19.066 --> 01:05:21.086 A:middle
Playgrounds are very
important to us.

01:05:21.566 --> 01:05:23.386 A:middle
We know that they are a great
way to experiment with API

01:05:23.386 --> 01:05:25.856 A:middle
and with the Swift
program language itself.

01:05:26.166 --> 01:05:29.386 A:middle
But we think that Playgrounds
can be a great way for teaching

01:05:29.386 --> 01:05:30.756 A:middle
and learning programming
as well.

01:05:30.966 --> 01:05:32.726 A:middle
And so we have been
adding a number of features

01:05:32.726 --> 01:05:35.386 A:middle
to Playgrounds, including
most recently support

01:05:35.386 --> 01:05:37.086 A:middle
for multiple pages
within a Playground.

01:05:38.156 --> 01:05:41.446 A:middle
To show you this and more, I'd
like to invite up Max Drukman.

01:05:43.016 --> 01:05:46.546 A:middle
[ Applause ]

01:05:47.046 --> 01:05:47.556 A:middle
&gt;&gt; MAX DRUKMAN: Thanks, Chris.

01:05:48.546 --> 01:05:51.436 A:middle
Today I'd like to show you
how easy it is to learn

01:05:51.646 --> 01:05:54.826 A:middle
and to teach using
Playgrounds in Xcode 7.

01:05:55.366 --> 01:06:00.406 A:middle
Let's start off with a
playground that I am developing

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:05:55.366 --> 01:06:00.406 A:middle
Let's start off with a
playground that I am developing

01:06:00.406 --> 01:06:04.146 A:middle
to teach students about some
of Apple's great graphics APIs,

01:06:05.486 --> 01:06:07.986 A:middle
and in this section,
I am introducing them

01:06:08.046 --> 01:06:10.706 A:middle
to a brand-new one, GameplayKit.

01:06:12.126 --> 01:06:14.526 A:middle
As you Playground says,
GameplayKit is used

01:06:14.526 --> 01:06:17.236 A:middle
to develop the mechanics
that drive your gameplay.

01:06:17.736 --> 01:06:21.616 A:middle
We will see a little bit
more of that in a minute.

01:06:21.766 --> 01:06:25.316 A:middle
This Playground uses a
car chase visualization

01:06:25.316 --> 01:06:28.086 A:middle
to demonstrate some of the
GameplayKit capabilities,

01:06:28.866 --> 01:06:30.616 A:middle
and I have created
this Playground

01:06:30.616 --> 01:06:35.456 A:middle
so that my students have the
ability to edit the bad guy cars

01:06:36.486 --> 01:06:39.086 A:middle
by tweaking these three
Sprite Node variables.

01:06:39.576 --> 01:06:44.646 A:middle
Now, Playgrounds have always had
the ability to show you results

01:06:44.646 --> 01:06:45.896 A:middle
for each line of code.

01:06:46.546 --> 01:06:50.376 A:middle
This year, we added the
ability to add them in line.

01:06:55.276 --> 01:06:59.976 A:middle
So now I can start by editing my
Playground the way my students

01:06:59.976 --> 01:07:02.666 A:middle
will, by changing the values

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:06:59.976 --> 01:07:02.666 A:middle
will, by changing the values

01:07:03.386 --> 01:07:05.296 A:middle
to get a different
look to the bad guy.

01:07:06.686 --> 01:07:08.686 A:middle
And you can see that
as I make my edits,

01:07:09.176 --> 01:07:14.936 A:middle
the changes are updated live.

01:07:15.006 --> 01:07:15.986 A:middle
Now that's a bad guy car.

01:07:18.096 --> 01:07:19.926 A:middle
[Laughter] Down here,
I am asking my students

01:07:20.216 --> 01:07:23.686 A:middle
to write a little bit of
code to put the pieces

01:07:23.756 --> 01:07:26.626 A:middle
of the bad guy together
into one Sprite.

01:07:27.996 --> 01:07:29.756 A:middle
So now as I write that code,

01:07:30.356 --> 01:07:36.876 A:middle
it's going to assemble my bad
guy, and now I am ready to go.

01:07:37.996 --> 01:07:39.336 A:middle
That's it for the setup.

01:07:39.576 --> 01:07:41.516 A:middle
Now it's time to move
on to the main event,

01:07:41.906 --> 01:07:43.726 A:middle
which is making stuff move.

01:07:44.366 --> 01:07:46.256 A:middle
Which I have on another page.

01:07:47.326 --> 01:07:50.306 A:middle
Now, pages are a great way
to divide up your Playgrounds

01:07:50.556 --> 01:07:52.616 A:middle
into subtopics, kind
of like a book.

01:07:53.706 --> 01:07:57.456 A:middle
You can navigate to pages using
the handy navigation links

01:07:57.456 --> 01:07:58.546 A:middle
at the bottom of the page.

01:07:59.716 --> 01:08:00.836 A:middle
You can use the jump bar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:07:59.716 --> 01:08:00.836 A:middle
You can use the jump bar.

01:08:02.386 --> 01:08:04.166 A:middle
And of course, the navigator.

01:08:05.316 --> 01:08:07.186 A:middle
Here are all the pages
in my Playground.

01:08:08.036 --> 01:08:12.676 A:middle
Now, each page can have its
own sources and resources,

01:08:13.006 --> 01:08:15.946 A:middle
so you can factor your
Playgrounds exactly the way

01:08:15.946 --> 01:08:16.496 A:middle
you want.

01:08:16.946 --> 01:08:19.576 A:middle
Let's check out the next page.

01:08:19.996 --> 01:08:25.756 A:middle
I am going to put away
the navigator for now.

01:08:25.986 --> 01:08:27.626 A:middle
So this page talks

01:08:27.626 --> 01:08:30.706 A:middle
about GameplayKit's
flocking behaviors.

01:08:31.336 --> 01:08:34.026 A:middle
Now, flocking is what's
going to take the bad guys

01:08:34.246 --> 01:08:36.185 A:middle
and make them move as a unit.

01:08:36.805 --> 01:08:39.796 A:middle
Now, without any further ado,

01:08:40.145 --> 01:08:43.106 A:middle
I am going to open
Xcode's timeline Assistant

01:08:43.816 --> 01:08:46.116 A:middle
and let's meet the flockers.

01:08:46.636 --> 01:08:50.466 A:middle
Okay. Here are all my evil

01:08:50.466 --> 01:08:53.826 A:middle
but colorful bad guys tracing
our intrepid truck-driving hero.

01:08:53.826 --> 01:08:56.946 A:middle
But you can see they are kind
of driving all over the place.

01:08:57.876 --> 01:08:59.305 A:middle
They are a flocking disaster.

01:08:59.866 --> 01:09:02.666 A:middle
[Laughter] Let's see
if we can fix that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:08:59.866 --> 01:09:02.666 A:middle
[Laughter] Let's see
if we can fix that.

01:09:03.816 --> 01:09:07.136 A:middle
So there are several parameters
that you can adjust in order

01:09:07.136 --> 01:09:08.845 A:middle
to govern the flocking behavior.

01:09:09.435 --> 01:09:11.116 A:middle
Here is an interesting
one, cohesion,

01:09:11.765 --> 01:09:15.676 A:middle
which governs how much the bad
guys want to stick together.

01:09:16.185 --> 01:09:17.916 A:middle
I can just play around
with that value

01:09:18.305 --> 01:09:20.356 A:middle
and see immediately
what the effect is.

01:09:21.395 --> 01:09:23.376 A:middle
That's a little bit
too much cohesion,

01:09:23.376 --> 01:09:24.746 A:middle
so I think I will
back that one off.

01:09:29.595 --> 01:09:31.876 A:middle
That's a little better
in terms of spacing,

01:09:31.876 --> 01:09:35.426 A:middle
but they're still not quite
as goal-oriented as I'd like,

01:09:36.026 --> 01:09:38.536 A:middle
so I am going to play
with the seek parameter,

01:09:39.876 --> 01:09:42.036 A:middle
and give that a different
value and see

01:09:42.036 --> 01:09:44.836 A:middle
if I can get a good
flock going here.

01:09:46.296 --> 01:09:46.996 A:middle
All right.

01:09:48.426 --> 01:09:49.216 A:middle
Now they're flocked.

01:09:50.395 --> 01:09:54.636 A:middle
So now I know what kind
of range of values I want

01:09:54.636 --> 01:09:56.426 A:middle
to tell my students
to play with.

01:09:56.936 --> 01:10:01.376 A:middle
I am going to put away the
assistant, and I am going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:09:56.936 --> 01:10:01.376 A:middle
I am going to put away the
assistant, and I am going

01:10:01.376 --> 01:10:06.026 A:middle
to switch the editor
to be in raw markup.

01:10:07.156 --> 01:10:10.466 A:middle
So now I can edit the prose

01:10:10.466 --> 01:10:13.446 A:middle
of my Playground using
familiar Markdown syntax.

01:10:14.606 --> 01:10:18.716 A:middle
And I can go back down
here to the seek parameter,

01:10:19.346 --> 01:10:23.686 A:middle
and I can add a little bit of
extra prose to tell my students

01:10:23.686 --> 01:10:25.316 A:middle
to play around with
these values.

01:10:25.786 --> 01:10:30.736 A:middle
I can even come up here
and add some branding

01:10:30.916 --> 01:10:34.026 A:middle
in the form of an icon.

01:10:35.186 --> 01:10:38.536 A:middle
And now whenever anyone asks
me if I know about flocking,

01:10:38.536 --> 01:10:40.626 A:middle
I say I wrote the flocking book.

01:10:40.836 --> 01:10:42.836 A:middle
[Laughter]

01:10:43.046 --> 01:10:43.356 A:middle
Thank you.

01:10:43.356 --> 01:10:44.696 A:middle
You are very kind.

01:10:45.676 --> 01:10:49.976 A:middle
[ Applause ]

01:10:50.476 --> 01:10:53.526 A:middle
These are just a few of the
authoring features we've added

01:10:53.526 --> 01:10:55.046 A:middle
to Playgrounds in Xcode 7.

01:10:55.546 --> 01:10:57.116 A:middle
Can't wait to see what
you build with them.

01:10:57.576 --> 01:11:00.666 A:middle
And now, to tell you about
some more great Xcode features,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:10:57.576 --> 01:11:00.666 A:middle
And now, to tell you about
some more great Xcode features,

01:11:00.906 --> 01:11:02.906 A:middle
I'd like to invite
up Matthew Firlik.

01:11:04.476 --> 01:11:09.616 A:middle
[ Applause ]

01:11:10.116 --> 01:11:13.036 A:middle
&gt;&gt; MATTHEW FIRLIK:
Thank you, Max.

01:11:13.216 --> 01:11:17.336 A:middle
Alongside the new releases
of watchOS, iOS, and OS X,

01:11:17.746 --> 01:11:20.216 A:middle
we are excited to
bring you Xcode 7.

01:11:21.296 --> 01:11:25.096 A:middle
This new release includes
features and support for all

01:11:25.096 --> 01:11:28.466 A:middle
of our platforms, and
the unique experience

01:11:28.466 --> 01:11:31.396 A:middle
of each platform has been
integrated into the tools

01:11:31.546 --> 01:11:34.566 A:middle
to allow you to target and
deliver your applications

01:11:34.916 --> 01:11:36.586 A:middle
to all of our devices.

01:11:37.106 --> 01:11:40.206 A:middle
That unique experience is
where I'd like to start today,

01:11:40.516 --> 01:11:42.696 A:middle
with our design tool
Interface Builder.

01:11:43.456 --> 01:11:45.866 A:middle
And first up is a new
way for you to lay

01:11:45.866 --> 01:11:48.306 A:middle
out your applications
called stack view.

01:11:49.016 --> 01:11:53.456 A:middle
[ Applause ]

01:11:53.956 --> 01:11:56.716 A:middle
With stack view, you can
design your applications using

01:11:56.716 --> 01:11:58.806 A:middle
horizontal and vertical stacks.

01:11:59.506 --> 01:12:01.246 A:middle
You start by selecting
an orientation

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:11:59.506 --> 01:12:01.246 A:middle
You start by selecting
an orientation

01:12:01.586 --> 01:12:02.596 A:middle
and add your controls.

01:12:03.576 --> 01:12:04.936 A:middle
With each control that you add,

01:12:05.006 --> 01:12:08.366 A:middle
stack view automatically
adjusts sizing and positioning

01:12:09.066 --> 01:12:10.836 A:middle
to give you just the right look.

01:12:12.246 --> 01:12:15.156 A:middle
Stack views nest
beautifully, and they allow you

01:12:15.156 --> 01:12:16.396 A:middle
to change orientations,

01:12:16.396 --> 01:12:19.036 A:middle
so you can get the
precise layout you want.

01:12:20.906 --> 01:12:23.306 A:middle
Now, we've built stack
view on top of autolayout,

01:12:23.546 --> 01:12:25.876 A:middle
and it handles all the
constraints for you.

01:12:26.906 --> 01:12:30.566 A:middle
Zero constraints gives you
control over alignment, spaces,

01:12:30.786 --> 01:12:32.386 A:middle
and distribution in the stack.

01:12:33.406 --> 01:12:36.716 A:middle
And we've made stack view
flexible as well, allowing you

01:12:36.716 --> 01:12:37.856 A:middle
to play with your interface

01:12:38.196 --> 01:12:40.196 A:middle
in Interface Builder
and at runtime.

01:12:41.846 --> 01:12:45.006 A:middle
When you add controls into a
stack view, you can reorder them

01:12:45.166 --> 01:12:48.676 A:middle
to try out different layouts
and, perhaps best of all,

01:12:49.006 --> 01:12:50.506 A:middle
when you hide views at runtime,

01:12:51.026 --> 01:12:53.096 A:middle
stack view automatically
adjusts.

01:12:54.516 --> 01:13:00.006 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:12:54.516 --> 01:13:00.006 A:middle
[ Applause ]

01:13:00.506 --> 01:13:03.296 A:middle
So stack view, a new way in
Interface Builder for you

01:13:03.296 --> 01:13:05.516 A:middle
to get the precise
layout you want.

01:13:06.476 --> 01:13:08.916 A:middle
Next up are Storyboard
references.

01:13:09.646 --> 01:13:13.716 A:middle
With storyboards, you can
create and design scenes

01:13:13.806 --> 01:13:15.666 A:middle
and connect them
together with zero code

01:13:15.916 --> 01:13:17.786 A:middle
to make complete
user interfaces.

01:13:19.036 --> 01:13:21.626 A:middle
Now, knowing that your scenes
and the interfaces evolve

01:13:21.626 --> 01:13:23.386 A:middle
and become a little
bit more complex,

01:13:23.676 --> 01:13:25.436 A:middle
we wanted to make
this easy to manage.

01:13:26.136 --> 01:13:29.266 A:middle
Storyboard references
allow you to take a section

01:13:29.266 --> 01:13:32.676 A:middle
of your interface and move it
to a separate storyboard file,

01:13:33.026 --> 01:13:36.116 A:middle
continuing to make connections
to and from the scene.

01:13:37.516 --> 01:13:43.086 A:middle
[ Applause ]

01:13:43.586 --> 01:13:46.426 A:middle
With storyboard references, you
can keep your interfaces focused

01:13:46.726 --> 01:13:49.616 A:middle
and modular, the same way you
do as your application code,

01:13:50.056 --> 01:13:52.906 A:middle
and still easily design
your application flow.

01:13:53.506 --> 01:13:58.316 A:middle
Now, equally important
to the flow and layout

01:13:58.316 --> 01:14:00.566 A:middle
of your application is the look.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:13:58.316 --> 01:14:00.566 A:middle
of your application is the look.

01:14:01.346 --> 01:14:02.116 A:middle
And in this release,

01:14:02.116 --> 01:14:04.446 A:middle
we are making Interface
Builder something to see.

01:14:04.496 --> 01:14:08.856 A:middle
In an upcoming scene,
you will see more of iOS

01:14:08.856 --> 01:14:11.206 A:middle
and OS X's visualizations
brought right

01:14:11.456 --> 01:14:13.836 A:middle
into Interface Builder.

01:14:13.966 --> 01:14:17.106 A:middle
Blurs and shadows will
render inside of the canvas.

01:14:18.596 --> 01:14:21.526 A:middle
Vibrancy will become a standard
part of the presentation.

01:14:22.896 --> 01:14:26.536 A:middle
And your own designable controls
can present masking and shadows

01:14:26.686 --> 01:14:29.226 A:middle
that compose with other
views in your scene.

01:14:30.446 --> 01:14:34.366 A:middle
And the combination of these
visualizations alongside our

01:14:34.366 --> 01:14:37.356 A:middle
preview editors, which allow
you to further refine the look

01:14:37.666 --> 01:14:40.196 A:middle
and layout of your interface
for specific devices,

01:14:40.836 --> 01:14:42.456 A:middle
means that now, more than ever,

01:14:42.806 --> 01:14:45.546 A:middle
you can design your interfaces
right in Interface Builder

01:14:45.946 --> 01:14:48.376 A:middle
and see what your users
will on their devices.

01:14:50.476 --> 01:14:55.956 A:middle
[ Applause ]

01:14:56.456 --> 01:15:00.246 A:middle
Another aspect of building your
applications is managing assets,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:14:56.456 --> 01:15:00.246 A:middle
Another aspect of building your
applications is managing assets,

01:15:00.786 --> 01:15:03.066 A:middle
and Xcode includes tools
to work with the new

01:15:03.316 --> 01:15:04.636 A:middle
On Demand Resource APIs.

01:15:05.646 --> 01:15:09.156 A:middle
With Xcode 7, you can tag assets

01:15:09.156 --> 01:15:10.826 A:middle
and files throughout
your project

01:15:11.466 --> 01:15:13.486 A:middle
to be downloaded
and used on demand.

01:15:14.576 --> 01:15:16.916 A:middle
Each tag represents a
collection of resources,

01:15:17.216 --> 01:15:18.576 A:middle
and we call these a pack.

01:15:19.676 --> 01:15:23.266 A:middle
And you can apply multiple tags
to any individual resource,

01:15:23.446 --> 01:15:24.976 A:middle
allowing you to use
that resource

01:15:25.186 --> 01:15:26.006 A:middle
in different situations.

01:15:27.276 --> 01:15:29.936 A:middle
To help you manage
your tagged resources,

01:15:30.236 --> 01:15:33.276 A:middle
Xcode includes an overview of
your tags in the Project Editor.

01:15:34.276 --> 01:15:37.126 A:middle
Here you can easily add,
remove, and rename tags.

01:15:37.766 --> 01:15:39.266 A:middle
You can change the
pack contents.

01:15:39.756 --> 01:15:41.966 A:middle
And you can also
configure various aspects

01:15:41.966 --> 01:15:44.516 A:middle
of On Demand Resources,
such as the download order

01:15:44.846 --> 01:15:46.006 A:middle
and the download priority.

01:15:46.586 --> 01:15:49.236 A:middle
When you build your
applications,

01:15:49.506 --> 01:15:51.976 A:middle
your tagged assets are
automatically assembled

01:15:52.036 --> 01:15:53.216 A:middle
into resource packs.

01:15:53.826 --> 01:15:57.636 A:middle
You just need to tag your
assets and you are ready to go.

01:15:57.876 --> 01:15:59.536 A:middle
When you deploy your
applications,

01:15:59.826 --> 01:16:02.466 A:middle
your On Demand Resources will
be hosted by the App Store.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:15:59.826 --> 01:16:02.466 A:middle
your On Demand Resources will
be hosted by the App Store.

01:16:03.516 --> 01:16:05.806 A:middle
While you are debugging,
Xcode will host your

01:16:05.806 --> 01:16:08.706 A:middle
On Demand Resources on
your Mac and stream them

01:16:08.706 --> 01:16:10.356 A:middle
down to your devices on demand

01:16:10.626 --> 01:16:12.476 A:middle
to simulate the Store
download behavior.

01:16:13.806 --> 01:16:16.416 A:middle
And for those of you using
Xcode's continuous integration,

01:16:16.876 --> 01:16:19.956 A:middle
your bots will build and host
your On Demand Resources,

01:16:19.956 --> 01:16:24.996 A:middle
so you can easily test your apps
over the air amongst your team.

01:16:25.226 --> 01:16:29.026 A:middle
And finally, to help
you track your packs,

01:16:29.616 --> 01:16:32.516 A:middle
the debug gauges will show
you the progress and status

01:16:32.556 --> 01:16:35.146 A:middle
of all your On Demand Resources
while you are debugging.

01:16:36.546 --> 01:16:39.606 A:middle
So the combination of all these
tools makes it really easy

01:16:39.606 --> 01:16:43.296 A:middle
for you to adopt On Demand
Resources in your apps.

01:16:45.456 --> 01:16:49.756 A:middle
Xcode 7 also has some great new
debugging and profiling tools

01:16:49.756 --> 01:16:53.026 A:middle
to help you further enhance the
quality of your applications.

01:16:54.416 --> 01:16:57.776 A:middle
Sebastien mentioned earlier
our focus on battery life.

01:16:58.526 --> 01:17:00.826 A:middle
Getting the most out of
your devices and getting

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:16:58.526 --> 01:17:00.826 A:middle
Getting the most out of
your devices and getting

01:17:00.826 --> 01:17:03.066 A:middle
through the day on a
charge is very important.

01:17:03.656 --> 01:17:05.106 A:middle
So we are making it easy for you

01:17:05.106 --> 01:17:07.366 A:middle
to track the energy use
of your application.

01:17:08.716 --> 01:17:12.256 A:middle
The new Energy gauge for
iOS will show you CPU usage,

01:17:12.746 --> 01:17:15.866 A:middle
calls to networking APIs
and location services,

01:17:16.316 --> 01:17:18.566 A:middle
and also show you
your apps' transitions

01:17:18.716 --> 01:17:20.756 A:middle
from foregrounds to
background states.

01:17:21.786 --> 01:17:24.576 A:middle
And as with our other debugging
gauges, you can gain insight

01:17:24.636 --> 01:17:27.036 A:middle
into the behavior of
your application and,

01:17:27.036 --> 01:17:28.216 A:middle
when you need more information,

01:17:28.556 --> 01:17:31.556 A:middle
dive into Instruments
for all the details.

01:17:32.796 --> 01:17:35.576 A:middle
And speaking of which,
Instruments has been updated

01:17:35.576 --> 01:17:37.006 A:middle
to be better than ever.

01:17:38.036 --> 01:17:40.916 A:middle
The track view is now more
compact and makes it easier

01:17:40.916 --> 01:17:44.056 A:middle
to visualize your data
with new fluid gestures.

01:17:45.296 --> 01:17:48.446 A:middle
We also have a number of updated
instruments and new instruments

01:17:48.446 --> 01:17:51.356 A:middle
for you to use, such as
core location profiling

01:17:51.666 --> 01:17:54.326 A:middle
and a new GPU system trace.

01:17:55.646 --> 01:17:56.976 A:middle
And in this release,

01:17:57.026 --> 01:17:59.636 A:middle
we are integrating
Clang's Address Sanitizer

01:17:59.856 --> 01:18:01.066 A:middle
into our debugging workflow.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:17:59.856 --> 01:18:01.066 A:middle
into our debugging workflow.

01:18:02.306 --> 01:18:05.226 A:middle
Address Sanitizer is a
memory error detection system

01:18:05.476 --> 01:18:06.716 A:middle
for C-based languages.

01:18:07.936 --> 01:18:11.636 A:middle
When enabled, Xcode will monitor
memory used by your application

01:18:11.916 --> 01:18:15.346 A:middle
and can detect common issues,
such as buffer overruns.

01:18:16.396 --> 01:18:18.506 A:middle
When these are detected,
Xcode alerts you

01:18:18.666 --> 01:18:21.716 A:middle
and provides essential
details to help you diagnose

01:18:21.996 --> 01:18:23.066 A:middle
and debug the problem.

01:18:24.076 --> 01:18:28.356 A:middle
And unlike other similar tools,
Address Sanitizer is fast,

01:18:29.286 --> 01:18:31.386 A:middle
so fast you can use it with all

01:18:31.386 --> 01:18:33.046 A:middle
of your interactive
applications.

01:18:33.566 --> 01:18:38.776 A:middle
But even with great
debugging and profiling tools,

01:18:39.096 --> 01:18:40.336 A:middle
sometimes -- sometimes --

01:18:40.796 --> 01:18:43.546 A:middle
bugs get out and will cause
crashes for your users.

01:18:44.296 --> 01:18:45.846 A:middle
To help you get these
fixed quickly,

01:18:46.166 --> 01:18:49.406 A:middle
Xcode has integrated
support for crash logs.

01:18:50.816 --> 01:18:53.526 A:middle
For your apps submitted to --

01:18:53.526 --> 01:18:54.666 A:middle
[ Applause ]

01:18:54.666 --> 01:18:57.596 A:middle
-- for your apps submitted to
TestFlight and the App Store,

01:18:57.826 --> 01:19:01.386 A:middle
Xcode will provide symbolicated
crashes for each submission.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:18:57.826 --> 01:19:01.386 A:middle
Xcode will provide symbolicated
crashes for each submission.

01:19:02.936 --> 01:19:05.496 A:middle
The integrated view will
provide an updated list

01:19:05.586 --> 01:19:09.256 A:middle
of the top crashes for your
apps, showing you the backtrace,

01:19:09.726 --> 01:19:13.436 A:middle
details about the crash, and
charts of recent occurrences.

01:19:14.486 --> 01:19:16.646 A:middle
You can retitle the
crashes for easier tracking,

01:19:17.236 --> 01:19:19.966 A:middle
you can add notes to yourself,
and you can mark the crash

01:19:19.966 --> 01:19:21.946 A:middle
as resolved once
you fix the issue.

01:19:23.556 --> 01:19:26.406 A:middle
Now, when reviewing a backtrace,
you want to make it easy,

01:19:27.006 --> 01:19:29.336 A:middle
so Xcode has this
Open In Project button

01:19:29.736 --> 01:19:32.416 A:middle
that will load the backtrace
into the debug navigator

01:19:32.416 --> 01:19:35.336 A:middle
in your project, giving you
the very familiar workflow

01:19:35.486 --> 01:19:38.076 A:middle
to navigate your source
code for the crashing frames

01:19:38.426 --> 01:19:40.006 A:middle
and find and fix the problem.

01:19:41.516 --> 01:19:48.686 A:middle
[ Applause ]

01:19:49.186 --> 01:19:51.376 A:middle
Earlier this spring, we
brought you crash logs

01:19:51.376 --> 01:19:52.926 A:middle
for your iOS applications.

01:19:53.506 --> 01:19:56.266 A:middle
Starting today with Xcode
7, you can get crash logs

01:19:56.266 --> 01:19:59.206 A:middle
for your OS X applications,
and crash logs

01:19:59.206 --> 01:20:01.686 A:middle
for your watchOS applications
will be coming soon.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:19:59.206 --> 01:20:01.686 A:middle
for your watchOS applications
will be coming soon.

01:20:02.896 --> 01:20:06.016 A:middle
And in this release, we will
also be bringing you crash logs

01:20:06.256 --> 01:20:10.046 A:middle
for all app extensions on all
platforms, so you can track

01:20:10.096 --> 01:20:11.316 A:middle
and improve those as well.

01:20:12.516 --> 01:20:17.466 A:middle
[ Applause ]

01:20:17.966 --> 01:20:20.806 A:middle
Now, another way to improve your
applications is with testing.

01:20:21.366 --> 01:20:23.106 A:middle
And we all love testing; right?

01:20:24.236 --> 01:20:26.266 A:middle
I am going to try that again.

01:20:26.346 --> 01:20:28.086 A:middle
We all love testing; right?

01:20:28.676 --> 01:20:31.966 A:middle
[ Cheers and applause ]

01:20:32.466 --> 01:20:34.956 A:middle
That's good because
testing is an essential part

01:20:35.206 --> 01:20:36.746 A:middle
to delivering a great
application,

01:20:37.116 --> 01:20:39.366 A:middle
and we have two big new
additions for you this year.

01:20:40.956 --> 01:20:43.966 A:middle
The core of our testing solution
is the XE test framework

01:20:44.236 --> 01:20:47.356 A:middle
and our test navigator, which
combine to provide great ways

01:20:47.356 --> 01:20:49.726 A:middle
for you to design and
organize your tests.

01:20:50.836 --> 01:20:53.696 A:middle
Building on top of these, Xcode
has provided a number of ways

01:20:53.696 --> 01:20:54.866 A:middle
for you to test your
application.

01:20:55.396 --> 01:20:59.066 A:middle
You can test the correctness
of your APIs and measure

01:20:59.066 --> 01:21:00.816 A:middle
and track their performance
over time.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:20:59.066 --> 01:21:00.816 A:middle
and track their performance
over time.

01:21:02.176 --> 01:21:04.776 A:middle
You can evaluate synchronous
and asynchronous behaviors

01:21:04.776 --> 01:21:08.746 A:middle
in your code, and you can run
your tests locally in Xcode

01:21:09.026 --> 01:21:11.486 A:middle
and continuously on
your integration bots.

01:21:12.576 --> 01:21:14.156 A:middle
And all of this combines
together

01:21:14.156 --> 01:21:17.176 A:middle
to make it a really powerful
unit testing solution.

01:21:18.176 --> 01:21:19.646 A:middle
But we wanted to
kick it up a notch.

01:21:19.936 --> 01:21:23.366 A:middle
So this year we are adding
in user interface testing.

01:21:24.516 --> 01:21:31.026 A:middle
[ Applause ]

01:21:31.526 --> 01:21:33.646 A:middle
This is built on the
same testing foundation,

01:21:33.906 --> 01:21:35.556 A:middle
so now you can develop
correctness

01:21:35.716 --> 01:21:38.886 A:middle
and performance tests that work
through your user interface

01:21:39.146 --> 01:21:41.466 A:middle
to further extend
your testing coverage.

01:21:42.496 --> 01:21:45.826 A:middle
And speaking of coverage,
we are adding that as well.

01:21:47.016 --> 01:21:52.286 A:middle
[ Applause ]

01:21:52.786 --> 01:21:54.606 A:middle
Code coverage is a
great new way for you

01:21:54.606 --> 01:21:56.316 A:middle
to evaluate your
testing progress

01:21:56.566 --> 01:21:58.746 A:middle
and ensure you have
all the tests you need.

01:21:59.736 --> 01:22:01.706 A:middle
So let's take a quick
look at a demonstration

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:21:59.736 --> 01:22:01.706 A:middle
So let's take a quick
look at a demonstration

01:22:01.706 --> 01:22:09.596 A:middle
of the new UI testing and code
coverage features in Xcode 7.

01:22:10.046 --> 01:22:13.896 A:middle
So here I have an application my
team and I have been working on.

01:22:13.896 --> 01:22:17.966 A:middle
It's a SpriteKit game for iOS
and iOS X called Demo Bots.

01:22:18.976 --> 01:22:20.886 A:middle
As we have been developing
the application,

01:22:20.886 --> 01:22:22.926 A:middle
we have been working on
tests, and you can see here

01:22:22.926 --> 01:22:25.936 A:middle
in the test navigator we have
quite a few of our tests.

01:22:26.796 --> 01:22:29.896 A:middle
It's helpful to know which
area of our code has not

01:22:29.976 --> 01:22:32.426 A:middle
yet been tested either
because we have not

01:22:32.426 --> 01:22:35.706 A:middle
yet written the tests or
because our current tests are

01:22:35.706 --> 01:22:36.436 A:middle
not complete.

01:22:37.996 --> 01:22:40.926 A:middle
With Xcode 7, this is exactly
the kind of insight you can gain

01:22:40.926 --> 01:22:42.696 A:middle
about testing with
code coverage.

01:22:44.046 --> 01:22:46.506 A:middle
Xcode collects coverage
data each time you test,

01:22:47.136 --> 01:22:49.186 A:middle
so I am going to jump
to the testing report,

01:22:49.766 --> 01:22:51.506 A:middle
and we'll see there's
a new coverage section.

01:22:53.196 --> 01:22:56.066 A:middle
Inside of the coverage
section, all of the files

01:22:56.066 --> 01:22:58.706 A:middle
in my application are
listed with an indicator

01:22:58.706 --> 01:23:00.296 A:middle
on the right showing
the percentage

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:22:58.706 --> 01:23:00.296 A:middle
on the right showing
the percentage

01:23:00.296 --> 01:23:02.076 A:middle
of coverage each file has.

01:23:03.016 --> 01:23:04.776 A:middle
Now, in this list, I've
sorted it from highest

01:23:04.906 --> 01:23:07.386 A:middle
to lowest coverage, so
all this might look good.

01:23:07.386 --> 01:23:12.316 A:middle
As we scroll down, we see I
have some work to do here still.

01:23:12.536 --> 01:23:15.536 A:middle
For each file in the list,
you can disclose the contents

01:23:15.676 --> 01:23:17.236 A:middle
and see the coverage
of the methods

01:23:17.236 --> 01:23:19.046 A:middle
and functions contained therein.

01:23:19.796 --> 01:23:21.066 A:middle
For the file I've disclosed,

01:23:21.066 --> 01:23:23.696 A:middle
the first two functions
have 100 percent coverage,

01:23:24.006 --> 01:23:27.716 A:middle
but the other three
have no coverage at all.

01:23:28.116 --> 01:23:30.546 A:middle
The report gives you a
good high-level overview

01:23:30.596 --> 01:23:32.916 A:middle
of the coverage for your
project, but we wanted

01:23:32.916 --> 01:23:35.046 A:middle
to bring this information
directly to you.

01:23:35.776 --> 01:23:37.716 A:middle
So we'll see here
when I navigate to one

01:23:37.716 --> 01:23:40.656 A:middle
of the source files, we bring
the code coverage information

01:23:40.656 --> 01:23:41.836 A:middle
right into the source editor.

01:23:42.526 --> 01:23:44.666 A:middle
The darkened areas are
the parts of my code

01:23:44.666 --> 01:23:46.136 A:middle
that have not yet been tested.

01:23:46.936 --> 01:23:47.636 A:middle
And this is great.

01:23:47.636 --> 01:23:49.786 A:middle
It allows me to see
where I need to focus,

01:23:50.616 --> 01:23:52.806 A:middle
and it also works great
with our assistant editor

01:23:53.216 --> 01:23:56.406 A:middle
because you can have your source
code and the tests side by side,

01:23:56.756 --> 01:23:59.676 A:middle
and as you continually test,
get updated information.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:24:00.316 --> 01:24:04.526 A:middle
If we go back to the report
and look at the classes

01:24:04.526 --> 01:24:07.926 A:middle
that were not covered, many of
them are user interface classes.

01:24:08.016 --> 01:24:09.346 A:middle
They are view controllers
and the like.

01:24:10.186 --> 01:24:11.116 A:middle
So to help me with that,

01:24:11.116 --> 01:24:13.086 A:middle
I am going to create
a user interface test.

01:24:14.686 --> 01:24:17.226 A:middle
I've already set up a user
interface testing bundle

01:24:17.266 --> 01:24:19.816 A:middle
and class, and so I
will select that here.

01:24:20.876 --> 01:24:23.556 A:middle
The test I want to write is
testing the options panel

01:24:23.556 --> 01:24:24.086 A:middle
of our game.

01:24:25.216 --> 01:24:28.866 A:middle
Now, the new APIs and XE tests
give you the ability to interact

01:24:28.866 --> 01:24:31.966 A:middle
with user interface elements,
accessing their properties

01:24:32.236 --> 01:24:34.946 A:middle
and triggering actions, and
it's really easy to write.

01:24:34.946 --> 01:24:39.146 A:middle
But you know what's actually
easier than writing a UI test?

01:24:39.146 --> 01:24:39.786 A:middle
Recording one.

01:24:39.856 --> 01:24:41.736 A:middle
Let me show you how that works.

01:24:42.736 --> 01:24:44.766 A:middle
I am going to collapse
the project navigator

01:24:44.766 --> 01:24:46.276 A:middle
to give myself a
little bit more space,

01:24:46.876 --> 01:24:49.596 A:middle
and with my insertion point in
the test I want to implement,

01:24:50.096 --> 01:24:52.276 A:middle
I am going to click this
little Record button down here

01:24:52.276 --> 01:24:53.146 A:middle
at the bottom of the editor.

01:24:53.956 --> 01:24:56.786 A:middle
You will see when I do this,
Xcode launches my application.

01:24:57.796 --> 01:24:59.766 A:middle
I want you to pay
attention in the test

01:24:59.766 --> 01:25:00.986 A:middle
in the upper left-hand corner.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:24:59.766 --> 01:25:00.986 A:middle
in the upper left-hand corner.

01:25:01.936 --> 01:25:04.086 A:middle
The first thing I want to do
is click the Options button

01:25:04.086 --> 01:25:06.456 A:middle
in my application,
and you can see

01:25:06.726 --> 01:25:09.196 A:middle
that Xcode's recording
inserted the corresponding line

01:25:09.196 --> 01:25:09.866 A:middle
of testing code.

01:25:10.516 --> 01:25:18.076 A:middle
[ Applause ]

01:25:18.576 --> 01:25:19.836 A:middle
You can see it's
pretty simple API.

01:25:20.036 --> 01:25:23.036 A:middle
It's asking the application
for the window and the button

01:25:23.326 --> 01:25:24.846 A:middle
and telling it to click.

01:25:25.496 --> 01:25:27.656 A:middle
For the next piece of my
test here, I want to fill

01:25:27.656 --> 01:25:29.916 A:middle
out my player name here,
so I will start typing

01:25:29.916 --> 01:25:32.636 A:middle
in my standard gamer
handle, and you will see here

01:25:32.636 --> 01:25:34.046 A:middle
that two cool things
are happening.

01:25:34.536 --> 01:25:36.446 A:middle
One, while I am typing
in the text field,

01:25:36.446 --> 01:25:39.256 A:middle
the editor is updating
live to show me the values.

01:25:39.686 --> 01:25:40.386 A:middle
That's pretty cool.

01:25:41.416 --> 01:25:42.666 A:middle
The other thing that happened is

01:25:42.666 --> 01:25:44.986 A:middle
that UI recording
noticed I was interacting

01:25:44.986 --> 01:25:47.796 A:middle
with the same user interface
element more than once,

01:25:48.096 --> 01:25:50.646 A:middle
and it refactored my test to
create a local variable for it.

01:25:51.416 --> 01:25:54.556 A:middle
This keeps the tests readable
and means that refactoring

01:25:54.556 --> 01:25:56.976 A:middle
and reusing this code
later is really easy.

01:25:58.436 --> 01:26:00.666 A:middle
Let's continue selecting
some options here.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:25:58.436 --> 01:26:00.666 A:middle
Let's continue selecting
some options here.

01:26:00.786 --> 01:26:02.066 A:middle
You'll see that the
test updates.

01:26:02.796 --> 01:26:05.476 A:middle
For the last element, I want to
select a different robot here,

01:26:05.796 --> 01:26:08.816 A:middle
so I will click this button
and select the blue robot.

01:26:08.816 --> 01:26:13.446 A:middle
I will click Done, and go
back and look at my test.

01:26:13.576 --> 01:26:15.716 A:middle
Just like that recording
was easily able

01:26:15.886 --> 01:26:17.016 A:middle
to track all of my actions.

01:26:18.006 --> 01:26:20.296 A:middle
Now a test should probably do
more than just poke things.

01:26:20.296 --> 01:26:22.506 A:middle
We should probably
validate some values here.

01:26:23.186 --> 01:26:25.866 A:middle
So before we click the Done
button, let's insert some code

01:26:26.076 --> 01:26:27.756 A:middle
to check that I have
the right settings.

01:26:29.096 --> 01:26:31.656 A:middle
I am going to insert a little
bit of code here that gets

01:26:31.656 --> 01:26:34.066 A:middle
that value of the active
robot from the interface.

01:26:34.246 --> 01:26:35.076 A:middle
It's in a text field.

01:26:35.386 --> 01:26:38.586 A:middle
I will compare it to the
value I expected, blue bot.

01:26:40.076 --> 01:26:42.316 A:middle
With no further ado,
let's run our test.

01:26:42.316 --> 01:26:44.346 A:middle
I will stand back.

01:26:44.346 --> 01:26:47.236 A:middle
Here we see it's
updating the values,

01:26:47.546 --> 01:26:48.516 A:middle
selecting the right robot,

01:26:48.886 --> 01:26:50.986 A:middle
validating our test,
and our test passes.

01:26:52.476 --> 01:27:00.186 A:middle
[ Applause ]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:26:52.476 --> 01:27:00.186 A:middle
[ Applause ]

01:27:00.686 --> 01:27:03.146 A:middle
So recording makes writing
UI tests really easy.

01:27:04.536 --> 01:27:07.386 A:middle
We can look at our tests inside
of Xcode and run them locally,

01:27:07.726 --> 01:27:10.336 A:middle
and we can also have them run on
our continuous integration bots.

01:27:11.106 --> 01:27:13.726 A:middle
I have bots set up for both
the iOS and the OS X version

01:27:13.726 --> 01:27:18.176 A:middle
of the application, and if I
select my iOS version and look

01:27:18.176 --> 01:27:21.066 A:middle
at my tests, when I filter
down to the failed ones,

01:27:21.066 --> 01:27:22.086 A:middle
I see something interesting.

01:27:22.896 --> 01:27:26.156 A:middle
I have four user interface tests
that are passing on an iPhone

01:27:26.486 --> 01:27:29.206 A:middle
but they are failing on an iPad.

01:27:29.566 --> 01:27:31.936 A:middle
To make it easy to
diagnose your test failures,

01:27:32.056 --> 01:27:34.626 A:middle
each test run includes
a transcript

01:27:34.626 --> 01:27:38.276 A:middle
of all the testing actions that
took place, and I can see these

01:27:38.276 --> 01:27:39.186 A:middle
by expanding the test.

01:27:39.946 --> 01:27:42.116 A:middle
Here's a list of all the
actions that took place

01:27:42.276 --> 01:27:43.196 A:middle
in this test that's
been running.

01:27:44.756 --> 01:27:46.746 A:middle
Because user interface
tests are visual, though,

01:27:46.746 --> 01:27:48.136 A:middle
we wanted to go a step further.

01:27:48.646 --> 01:27:51.236 A:middle
So each one of these actions
includes a screenshot.

01:27:52.186 --> 01:27:54.816 A:middle
So if I look over at
the passing iPhone test,

01:27:55.076 --> 01:27:57.436 A:middle
I can get the screenshot
for how the test starts,

01:27:57.726 --> 01:27:58.676 A:middle
there's the start of our game.

01:27:59.196 --> 01:28:01.556 A:middle
I can look partway
through at the test.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:27:59.196 --> 01:28:01.556 A:middle
I can look partway
through at the test.

01:28:02.106 --> 01:28:03.026 A:middle
Here we've typed a value

01:28:03.026 --> 01:28:04.836 A:middle
into the text field
with the keyboard up.

01:28:05.476 --> 01:28:07.286 A:middle
And I can also look at
the very end of the test.

01:28:07.606 --> 01:28:10.586 A:middle
Here's the state of the UI just
before we click the Done button.

01:28:11.946 --> 01:28:14.416 A:middle
If I flip over and look
at the tests on the iPad

01:28:14.416 --> 01:28:16.696 A:middle
and jump all the way
to that last action,

01:28:17.466 --> 01:28:20.406 A:middle
we can see here's our iPad UI
with all the right settings,

01:28:21.036 --> 01:28:21.846 A:middle
but there's no Done button.

01:28:22.516 --> 01:28:24.006 A:middle
Clearly we misconfigured
something in our UI,

01:28:24.006 --> 01:28:26.626 A:middle
but the screenshot was
able to help us narrow

01:28:26.626 --> 01:28:27.996 A:middle
that down really quickly.

01:28:29.506 --> 01:28:31.566 A:middle
So code coverage showed
me where to write tests.

01:28:32.056 --> 01:28:33.636 A:middle
UI testing and recording
made it easy

01:28:33.636 --> 01:28:34.726 A:middle
for me to get more coverage.

01:28:34.926 --> 01:28:36.906 A:middle
And the new testing
reports helped me narrow

01:28:36.906 --> 01:28:37.956 A:middle
in on my problems.

01:28:38.706 --> 01:28:40.166 A:middle
That's just a little
bit of code coverage

01:28:40.246 --> 01:28:42.226 A:middle
and UI testing in Xcode 7.

01:28:43.676 --> 01:28:51.676 A:middle
[ Applause ]

01:28:52.176 --> 01:28:54.046 A:middle
User interface testing makes use

01:28:54.046 --> 01:28:56.406 A:middle
of our systems' accessibility
APIs

01:28:56.666 --> 01:28:58.276 A:middle
to interact with UI elements.

01:28:58.986 --> 01:29:00.886 A:middle
This means if you've
already invested

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:28:58.986 --> 01:29:00.886 A:middle
This means if you've
already invested

01:29:00.886 --> 01:29:04.086 A:middle
in making your app accessible,
you've also already invested

01:29:04.086 --> 01:29:05.096 A:middle
in making it testable.

01:29:06.646 --> 01:29:10.076 A:middle
UI testing also works great with
UIs designed with size classes

01:29:10.416 --> 01:29:13.096 A:middle
and localizations, including
right-to-left support,

01:29:13.616 --> 01:29:15.796 A:middle
which means your
UI tests can scale

01:29:16.086 --> 01:29:19.146 A:middle
to all presentations of your UI.

01:29:20.096 --> 01:29:23.946 A:middle
The new APIs -- yes,
you can clap for that.

01:29:24.516 --> 01:29:27.366 A:middle
[ Applause ]

01:29:27.866 --> 01:29:33.906 A:middle
The new APIs and XE tests
are available in Swift

01:29:33.976 --> 01:29:34.816 A:middle
and Objective-C,

01:29:35.236 --> 01:29:37.936 A:middle
and UI recording will generate
whichever one you are using.

01:29:38.586 --> 01:29:43.066 A:middle
So these have been some of the
many new features you will find

01:29:43.066 --> 01:29:47.066 A:middle
in Xcode 7 as you build your
apps for all of our platforms.

01:29:48.516 --> 01:29:55.116 A:middle
[ Applause ]

01:29:55.616 --> 01:29:58.086 A:middle
Now, we also have some exciting
new technologies to share

01:29:58.086 --> 01:30:01.206 A:middle
with you for games and
graphics, and for that I'd

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:29:58.086 --> 01:30:01.206 A:middle
with you for games and
graphics, and for that I'd

01:30:01.206 --> 01:30:03.466 A:middle
like to invite my
colleague up, Geoff Stahl.

01:30:04.516 --> 01:30:06.916 A:middle
[ Applause ]

01:30:07.416 --> 01:30:08.086 A:middle
&gt;&gt; GEOFF STAHL: Thank
you, Matthew.

01:30:10.096 --> 01:30:13.936 A:middle
Xcode 7 looks amazing, and I
am really excited to be here

01:30:13.936 --> 01:30:15.256 A:middle
to talk about games
and graphics.

01:30:15.256 --> 01:30:17.696 A:middle
It does not seem
like so long ago

01:30:17.696 --> 01:30:22.216 A:middle
that we were here introducing
our first game-related API Game

01:30:22.286 --> 01:30:23.656 A:middle
Center or social gaming network.

01:30:24.816 --> 01:30:28.226 A:middle
Since then, we've been busy
with APIs for key input

01:30:28.226 --> 01:30:31.636 A:middle
and graphics technologies, like
game controllers, SceneKit,

01:30:31.996 --> 01:30:34.146 A:middle
SpriteKit, most recently Metal.

01:30:35.606 --> 01:30:39.076 A:middle
This year, we are introducing a
number of new game technologies,

01:30:39.816 --> 01:30:43.776 A:middle
including things like Model I/O
for modernizing your graphics;

01:30:44.706 --> 01:30:47.566 A:middle
ReplayKit for extending
your game's social reach;

01:30:48.396 --> 01:30:51.966 A:middle
and Game Center for
adding super-smart brains

01:30:52.256 --> 01:30:52.816 A:middle
to your games.

01:30:53.556 --> 01:30:58.026 A:middle
Also, we're packaging all of
these together into GameKit,

01:30:58.896 --> 01:31:01.636 A:middle
so with one include, you
get all this functionality

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:30:58.896 --> 01:31:01.636 A:middle
so with one include, you
get all this functionality

01:31:01.636 --> 01:31:04.316 A:middle
at your fingertips,
a great solution,

01:31:04.616 --> 01:31:06.556 A:middle
great complete solution
for game development

01:31:06.826 --> 01:31:08.076 A:middle
across our platforms.

01:31:08.576 --> 01:31:11.696 A:middle
So let's take a look at some
of the new cool features

01:31:11.786 --> 01:31:13.696 A:middle
in GameKit, starting with Metal.

01:31:14.946 --> 01:31:18.706 A:middle
So as you know, Metal is a 3D
API we introduced last year

01:31:18.706 --> 01:31:19.286 A:middle
for iOS.

01:31:19.896 --> 01:31:25.096 A:middle
We are really excited that this
year we are bringing it to OS X.

01:31:25.096 --> 01:31:28.096 A:middle
And let's, as a recap,
look at an example we ran

01:31:28.096 --> 01:31:30.456 A:middle
into just recently of
game development moving

01:31:30.456 --> 01:31:32.106 A:middle
from OpenGL to Metal.

01:31:33.556 --> 01:31:36.666 A:middle
So here you have a game
when we started out on --

01:31:36.666 --> 01:31:38.976 A:middle
running on OpenGL,
and what you notice is

01:31:39.116 --> 01:31:43.596 A:middle
that OpenGL command processing
is keeping one CPU completely

01:31:43.596 --> 01:31:46.726 A:middle
saturated, which has pushed the
game play to the second CPU,

01:31:47.136 --> 01:31:49.296 A:middle
and the GPU is not very busy.

01:31:49.496 --> 01:31:52.946 A:middle
In fact, in this example, we
saw the GPU was 40 percent idle.

01:31:53.556 --> 01:31:58.606 A:middle
Moving to Metal, we
drastically reduce the command

01:31:58.606 --> 01:31:59.536 A:middle
processing time.

01:31:59.846 --> 01:32:02.036 A:middle
We have an API that you
can program more directly

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:31:59.846 --> 01:32:02.036 A:middle
We have an API that you
can program more directly

01:32:02.036 --> 01:32:02.816 A:middle
to the GPU.

01:32:02.816 --> 01:32:05.526 A:middle
And if you choose, you can
split your command processing

01:32:05.776 --> 01:32:07.036 A:middle
across multiple cores.

01:32:07.486 --> 01:32:12.586 A:middle
In this case, we've unlocked
the full performance of the GPU.

01:32:13.196 --> 01:32:17.196 A:middle
We've been working with some
third-party developers on Metal

01:32:17.196 --> 01:32:20.466 A:middle
for OS X, and let's
take a minute

01:32:20.466 --> 01:32:23.506 A:middle
to see what they've
done on the Mac.

01:32:24.996 --> 01:32:27.496 A:middle
So it's my pleasure to
introduce David McGavran

01:32:27.656 --> 01:32:30.266 A:middle
from Adobe Systems up to
show what they've done

01:32:30.396 --> 01:32:31.656 A:middle
with OS X in Metal.

01:32:32.076 --> 01:32:32.916 A:middle
David, welcome.

01:32:33.516 --> 01:32:38.046 A:middle
[ Applause ]

01:32:38.546 --> 01:32:39.046 A:middle
&gt;&gt; DAVID McGAVRAN:
Thank you very much.

01:32:39.046 --> 01:32:39.546 A:middle
Thank you.

01:32:39.546 --> 01:32:41.726 A:middle
Adobe was very excited
when Apple brought iOS

01:32:42.296 --> 01:32:44.166 A:middle
to Metal's iOS last spring.

01:32:44.726 --> 01:32:47.046 A:middle
In fact, we have already been
using it to optimize some

01:32:47.046 --> 01:32:50.386 A:middle
of our popular iOS apps like
Premier Flip and Photoshop Mix

01:32:50.776 --> 01:32:51.816 A:middle
and seen great results.

01:32:51.816 --> 01:32:55.056 A:middle
So we were thrilled when Apple
told us they were bringing Metal

01:32:55.406 --> 01:32:55.836 A:middle
to OS X.

01:32:56.896 --> 01:32:59.456 A:middle
This way we can share our code
on both of those platforms.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:33:00.066 --> 01:33:02.086 A:middle
So today I would like to
show you some of our progress

01:33:02.516 --> 01:33:04.556 A:middle
with two of our flagship
Mac OS products,

01:33:05.116 --> 01:33:06.346 A:middle
Illustrator and After Effects.

01:33:07.036 --> 01:33:08.386 A:middle
Let's take a look.

01:33:15.016 --> 01:33:18.186 A:middle
So here we are in the current
version of Adobe Illustrator

01:33:18.856 --> 01:33:23.046 A:middle
with a massive piece of artwork
with over 300,000 points,

01:33:23.516 --> 01:33:25.206 A:middle
gradients, and blend modes.

01:33:25.206 --> 01:33:29.696 A:middle
I want to go ahead and do a
zoom on this piece of artwork.

01:33:29.696 --> 01:33:34.886 A:middle
You are going to notice a bit
of lag as it works its way

01:33:34.886 --> 01:33:36.246 A:middle
into that complex piece of art.

01:33:37.216 --> 01:33:38.776 A:middle
We really wanted to see if
we could do something better.

01:33:40.086 --> 01:33:42.656 A:middle
So with this version, we are
demonstrating what we can do

01:33:42.656 --> 01:33:45.956 A:middle
with Metal when we take
the entire rendering engine

01:33:46.086 --> 01:33:46.876 A:middle
and put it on Metal.

01:33:47.436 --> 01:33:49.516 A:middle
In fact, it was so
performant, they were able

01:33:49.516 --> 01:33:54.266 A:middle
to demonstrate a brand-new
feature with continuous zoom.

01:33:55.156 --> 01:33:58.506 A:middle
So here you can see the
results are amazingly different

01:33:59.066 --> 01:34:00.586 A:middle
when you are looking at
what we can do with Metal.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:33:59.066 --> 01:34:00.586 A:middle
when you are looking at
what we can do with Metal.

01:34:01.386 --> 01:34:05.176 A:middle
In fact, I can zoom all the
way in here extremely far

01:34:07.526 --> 01:34:08.936 A:middle
until you can actually
read the text.

01:34:10.016 --> 01:34:16.816 A:middle
[ Applause ]

01:34:17.316 --> 01:34:19.356 A:middle
So this just drastically
changed the way artists can work

01:34:19.356 --> 01:34:20.026 A:middle
with our products.

01:34:21.326 --> 01:34:23.166 A:middle
Now we want to talk
about After Effects.

01:34:23.166 --> 01:34:25.656 A:middle
So here is a video
from extreme sports

01:34:25.656 --> 01:34:27.356 A:middle
videographer Devinsupertramp.

01:34:27.866 --> 01:34:29.936 A:middle
Let's take a quick look at this.

01:34:30.476 --> 01:34:42.506 A:middle
[ Music ]

01:34:43.006 --> 01:34:43.506 A:middle
That's pretty fun.

01:34:44.196 --> 01:34:46.376 A:middle
What we want to do is
take one of those shots

01:34:46.376 --> 01:34:48.486 A:middle
into After Effects
and add some effects

01:34:48.486 --> 01:34:49.706 A:middle
into it to make a promo spot.

01:34:50.016 --> 01:34:51.296 A:middle
So here we are.

01:34:51.296 --> 01:34:54.496 A:middle
I am going to turn on some
color correction, some ripples,

01:34:54.826 --> 01:34:56.946 A:middle
and some lens flares,
and go ahead and play

01:34:56.946 --> 01:34:58.116 A:middle
that back without Metal.

01:34:58.656 --> 01:35:03.396 A:middle
And you can see while it's
working quite hard on the CPU,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:34:58.656 --> 01:35:03.396 A:middle
And you can see while it's
working quite hard on the CPU,

01:35:03.946 --> 01:35:04.886 A:middle
it's not really giving

01:35:04.886 --> 01:35:06.656 A:middle
that interactive performance
we'd love to be able

01:35:06.656 --> 01:35:07.996 A:middle
to give our compositors.

01:35:09.206 --> 01:35:11.636 A:middle
So we really challenged our
programmers to take a look

01:35:11.636 --> 01:35:13.496 A:middle
at this and see what
they can do with Metal.

01:35:14.146 --> 01:35:15.416 A:middle
So in a very short
time, they were able

01:35:15.416 --> 01:35:18.376 A:middle
to port those three effects
to Metal, and they are going

01:35:18.376 --> 01:35:20.666 A:middle
to show you a pretty
astounding difference.

01:35:20.666 --> 01:35:22.856 A:middle
So now I am going to switch
to the same composition,

01:35:23.146 --> 01:35:24.646 A:middle
but this time those
effects have been replaced

01:35:24.646 --> 01:35:26.676 A:middle
with the Metal versions, and
I am going to play that back.

01:35:27.546 --> 01:35:29.566 A:middle
Immediately you are going to
see it's playing in real-time

01:35:30.306 --> 01:35:33.486 A:middle
without dropping any
frames, and we are seeing

01:35:33.486 --> 01:35:35.926 A:middle
that in these effects up to
an 8x performance improvement

01:35:36.176 --> 01:35:38.716 A:middle
and drastically reduced
CPU usage.

01:35:39.466 --> 01:35:42.016 A:middle
So Adobe is committed
to bringing Metal to all

01:35:42.016 --> 01:35:44.846 A:middle
of its Mac OS creative
cloud applications,

01:35:45.146 --> 01:35:47.046 A:middle
such as Illustrator and After
Effects I showed you today,

01:35:47.076 --> 01:35:49.466 A:middle
as well as Photoshop
and Premier Pro.

01:35:50.076 --> 01:35:51.526 A:middle
We are very excited to
see what Metal can do

01:35:51.526 --> 01:35:52.586 A:middle
for our Cloud users.

01:35:52.856 --> 01:35:53.556 A:middle
Thank you very much.

01:35:54.516 --> 01:35:59.326 A:middle
[ Applause ]

01:35:59.826 --> 01:36:00.476 A:middle
&gt;&gt; GEOFF STAHL: David,
thank you.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:35:59.826 --> 01:36:00.476 A:middle
&gt;&gt; GEOFF STAHL: David,
thank you.

01:36:00.516 --> 01:36:01.796 A:middle
That is amazing.

01:36:01.846 --> 01:36:02.756 A:middle
I agree with Craig.

01:36:02.756 --> 01:36:04.136 A:middle
It's really interesting to see

01:36:04.136 --> 01:36:07.876 A:middle
when you can take an interaction
that's not real-time and move it

01:36:07.876 --> 01:36:11.196 A:middle
to a silky smooth
user interaction.

01:36:11.196 --> 01:36:13.366 A:middle
But Metal is not just
for applications.

01:36:13.676 --> 01:36:15.056 A:middle
As we spoke about this morning,

01:36:15.616 --> 01:36:18.946 A:middle
we are bringing key graphics
technologies for both OS X

01:36:18.946 --> 01:36:22.166 A:middle
and iOS onto the Metal API.

01:36:22.166 --> 01:36:25.916 A:middle
Up to now, technologies
like core animation

01:36:26.296 --> 01:36:28.116 A:middle
and our hardware
accelerated Core Graphics,

01:36:28.406 --> 01:36:31.696 A:middle
PDF and Safari page rendering,
have been on top of OpenGL.

01:36:32.416 --> 01:36:37.376 A:middle
That meant the CPU was very
busy feeding the GPU commands.

01:36:37.916 --> 01:36:41.676 A:middle
With Metal, we get improved
efficiency and performance

01:36:41.916 --> 01:36:46.166 A:middle
for critical user-level tasks.

01:36:46.306 --> 01:36:54.956 A:middle
Also, we didn't want to just
increase the system performance;

01:36:54.956 --> 01:36:58.686 A:middle
we wanted to actually make
it really easy for all

01:36:58.686 --> 01:36:59.956 A:middle
of you to adopt Metal.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:37:00.026 --> 01:37:01.806 A:middle
So we are introducing MetalKit.

01:37:02.676 --> 01:37:04.506 A:middle
So MetalKit is your
gateway to Metal.

01:37:04.846 --> 01:37:06.676 A:middle
It does the heavy
lifting for you.

01:37:07.186 --> 01:37:09.456 A:middle
MetalKit can do anything from
set up your rendering loop

01:37:09.876 --> 01:37:13.596 A:middle
to load 3D models
via its interaction

01:37:13.596 --> 01:37:14.956 A:middle
with Model I/O from your artist.

01:37:15.176 --> 01:37:17.666 A:middle
In fact, MetalKit can
load meshes directly

01:37:17.666 --> 01:37:19.026 A:middle
into Metal buffers and set

01:37:19.026 --> 01:37:22.466 A:middle
up pretty much everything you
can do to render your scene.

01:37:23.736 --> 01:37:24.676 A:middle
We didn't stop there.

01:37:25.376 --> 01:37:28.396 A:middle
Metal performance shaders
are high-performance image-

01:37:28.396 --> 01:37:30.296 A:middle
processing shaders for
Metal applications.

01:37:31.166 --> 01:37:34.646 A:middle
These are GPU-based parallel
compute shaders individually

01:37:34.646 --> 01:37:39.496 A:middle
tuned for all of our GPUs,
again, making it really easy

01:37:39.796 --> 01:37:41.006 A:middle
for all of you to adopt Metal.

01:37:42.376 --> 01:37:44.256 A:middle
So now you have a great
rendering pipeline,

01:37:44.256 --> 01:37:46.256 A:middle
but you need great content.

01:37:46.756 --> 01:37:47.796 A:middle
So we have Model I/O.

01:37:48.776 --> 01:37:51.396 A:middle
Sometimes loading and working
with 3D models can be tricky.

01:37:52.726 --> 01:37:54.016 A:middle
So that's what Model
I/O comes in.

01:37:54.346 --> 01:37:56.726 A:middle
It makes it simple
to load content

01:37:56.726 --> 01:38:00.186 A:middle
from all the file formats you
expect directly into SceneKit

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:37:56.726 --> 01:38:00.186 A:middle
from all the file formats you
expect directly into SceneKit

01:38:00.186 --> 01:38:02.566 A:middle
or Metal with this
interaction with MetalKit.

01:38:02.566 --> 01:38:05.896 A:middle
But where it sets itself apart
is the way it handles lighting.

01:38:07.356 --> 01:38:11.206 A:middle
Model I/O offers
state-of-the-art, raytraced,

01:38:11.206 --> 01:38:17.526 A:middle
materials-based lighting
solution for you.

01:38:17.796 --> 01:38:20.916 A:middle
What this really means
is it offers amazingly

01:38:20.916 --> 01:38:21.886 A:middle
realistic graphics.

01:38:22.046 --> 01:38:22.786 A:middle
Let's take a look.

01:38:23.226 --> 01:38:24.346 A:middle
So let's start with a baseline.

01:38:24.666 --> 01:38:27.216 A:middle
This is just a model
with textures loaded.

01:38:28.036 --> 01:38:29.286 A:middle
This is not really interesting.

01:38:29.286 --> 01:38:30.096 A:middle
It's actually pretty flat,

01:38:30.236 --> 01:38:33.376 A:middle
and I think the '90s is
calling this model back.

01:38:33.686 --> 01:38:35.246 A:middle
If we strip away the textures

01:38:35.246 --> 01:38:37.486 A:middle
and apply a global
illumination solution,

01:38:37.486 --> 01:38:38.216 A:middle
what we see is something

01:38:38.216 --> 01:38:40.106 A:middle
that immediately
looks more realistic.

01:38:41.056 --> 01:38:43.266 A:middle
We add the textures back
in, and we get something

01:38:43.266 --> 01:38:44.246 A:middle
that looks really good.

01:38:44.446 --> 01:38:47.046 A:middle
Finally, of course,
even with Model I/O

01:38:47.046 --> 01:38:48.866 A:middle
and its lighting solution, you
can add your own lighting in

01:38:48.866 --> 01:38:52.336 A:middle
and shadows to get something
that looks amazingly realistic,

01:38:52.336 --> 01:38:55.046 A:middle
giving you those amazing
results, from ordinary

01:38:55.406 --> 01:38:58.436 A:middle
to extraordinary, Model I/O
provides you a great solution

01:38:58.816 --> 01:39:00.656 A:middle
for your models and
for lighting.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:38:58.816 --> 01:39:00.656 A:middle
for your models and
for lighting.

01:39:01.526 --> 01:39:03.386 A:middle
So now you have a great
rendering pipeline,

01:39:03.816 --> 01:39:05.476 A:middle
you have great models,
great content,

01:39:05.726 --> 01:39:06.786 A:middle
you need great Gameplay.

01:39:07.596 --> 01:39:08.526 A:middle
So we have GameplayKit.

01:39:09.606 --> 01:39:11.906 A:middle
Gameplay is divided
really into two areas.

01:39:11.906 --> 01:39:14.746 A:middle
We have navigation or how you
move your objects in your game.

01:39:15.106 --> 01:39:17.806 A:middle
We also have your strategy
or how your game thinks.

01:39:17.906 --> 01:39:19.836 A:middle
GameplayKit has solutions
for both of these.

01:39:20.966 --> 01:39:24.276 A:middle
GameplayKit is a component-based
API that is a full coverage

01:39:24.506 --> 01:39:25.726 A:middle
of solutions for Gameplay.

01:39:25.726 --> 01:39:28.316 A:middle
Whether you need to track the
gold from each of your players

01:39:28.776 --> 01:39:31.456 A:middle
or need to navigate your bad
guys from point A to point B

01:39:31.456 --> 01:39:33.066 A:middle
and avoid the obstacles
in between,

01:39:33.576 --> 01:39:35.856 A:middle
or you need to generate
deterministic random numbers

01:39:35.856 --> 01:39:38.076 A:middle
for your next online
multiplayer game,

01:39:38.406 --> 01:39:39.806 A:middle
Gameplay has solutions for you.

01:39:39.896 --> 01:39:42.456 A:middle
From very simple
games to very complex,

01:39:42.666 --> 01:39:44.976 A:middle
we think Gameplay will do a
very good job helping you guys

01:39:44.976 --> 01:39:45.916 A:middle
develop your games.

01:39:46.426 --> 01:39:51.816 A:middle
We started out with a
social piece, Game Center.

01:39:52.736 --> 01:39:55.336 A:middle
ReplayKit can extend
the social interaction.

01:39:55.676 --> 01:39:59.866 A:middle
ReplayKit allows your players
to record video replays

01:39:59.866 --> 01:40:00.856 A:middle
of their gaming exploits.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:39:59.866 --> 01:40:00.856 A:middle
of their gaming exploits.

01:40:01.186 --> 01:40:03.406 A:middle
They can save them or
they can share them.

01:40:03.706 --> 01:40:05.826 A:middle
It's hardware accelerated,
it's high performance,

01:40:05.826 --> 01:40:09.186 A:middle
and it's absolutely brilliantly
easy for you guys to adopt,

01:40:09.556 --> 01:40:11.876 A:middle
really easy to add it to your
game, and maybe it's the thing

01:40:11.876 --> 01:40:14.206 A:middle
that kicks off that next
viral marketing campaign

01:40:14.566 --> 01:40:16.246 A:middle
for your game project.

01:40:17.796 --> 01:40:20.016 A:middle
Finally, SceneKit and SpriteKit.

01:40:20.016 --> 01:40:22.486 A:middle
We have some great updates
for SceneKit and SpriteKit,

01:40:22.486 --> 01:40:23.666 A:middle
but I think the most
interesting,

01:40:23.666 --> 01:40:26.966 A:middle
maybe the most compelling,
is we have built tools

01:40:27.246 --> 01:40:31.506 A:middle
for both SceneKit and
SpriteKit directly into Xcode 7,

01:40:31.586 --> 01:40:34.286 A:middle
and I'd like to hand
it off to my colleague,

01:40:34.486 --> 01:40:35.706 A:middle
Jacques Gasselin de Richebourg,

01:40:36.106 --> 01:40:38.956 A:middle
to show you these tools
inside of Xcode 7.

01:40:39.516 --> 01:40:45.196 A:middle
[ Applause ]

01:40:45.696 --> 01:40:45.956 A:middle
&gt;&gt; JACQUES GASSELIN
DE RICHEBOURG: Thanks.

01:40:46.606 --> 01:40:49.906 A:middle
So last year with Xcode 6, we
introduced visual scene editing

01:40:49.976 --> 01:40:51.266 A:middle
for SpriteKit right
inside Xcode.

01:40:51.946 --> 01:40:53.356 A:middle
This year we are
kicking it up a notch

01:40:53.626 --> 01:40:56.546 A:middle
and have added animation
editing right inside Xcode.

01:40:56.866 --> 01:40:59.426 A:middle
So here we have a little
cut scene I am making.

01:40:59.726 --> 01:41:03.156 A:middle
It's got this cute red panda
and he is about to make his way

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:40:59.726 --> 01:41:03.156 A:middle
It's got this cute red panda
and he is about to make his way

01:41:03.156 --> 01:41:05.296 A:middle
across the two chasms
to the other side.

01:41:05.296 --> 01:41:07.066 A:middle
These are the base
animations I have on there.

01:41:07.426 --> 01:41:11.336 A:middle
I want to layer these into
the animation we expect.

01:41:11.786 --> 01:41:13.936 A:middle
First off, obviously,
you need to make him run.

01:41:14.626 --> 01:41:16.416 A:middle
So let's go down
and grab an action.

01:41:16.546 --> 01:41:18.616 A:middle
Now, here we have a
really interesting action.

01:41:18.806 --> 01:41:19.956 A:middle
It's a reference action,

01:41:20.386 --> 01:41:22.766 A:middle
which means it actually
lives in a different file.

01:41:22.866 --> 01:41:24.846 A:middle
It lives in this
actions.sks file.

01:41:25.026 --> 01:41:28.156 A:middle
I am referencing here so I
can make composed actions.

01:41:28.496 --> 01:41:29.756 A:middle
So I am going to grab that.

01:41:30.136 --> 01:41:32.516 A:middle
Of course, it's just as
easy to just copy and paste.

01:41:32.826 --> 01:41:36.296 A:middle
I am going to do that a couple
times, and naturally it appends

01:41:36.686 --> 01:41:37.646 A:middle
after on the same track.

01:41:37.966 --> 01:41:40.066 A:middle
Let's have a look at
that, and we are going

01:41:40.066 --> 01:41:42.656 A:middle
to use the scrubber this
time, so it's a timeline

01:41:42.656 --> 01:41:45.616 A:middle
with a scrubber, and you can
basically preview what the

01:41:45.616 --> 01:41:47.396 A:middle
animation is going to
look like at any time.

01:41:49.306 --> 01:41:52.106 A:middle
That's not just a
great preview tool;

01:41:52.376 --> 01:41:53.906 A:middle
it's actually great
for editing as well.

01:41:54.416 --> 01:41:56.566 A:middle
So you noticed he didn't
jump over the chasms,

01:41:56.566 --> 01:41:59.276 A:middle
and that's a problem and
something we are going to fix.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:42:00.136 --> 01:42:02.256 A:middle
So let's figure out a
good spot for him to jump.

01:42:03.246 --> 01:42:05.066 A:middle
Looks like here is
about perfect.

01:42:05.066 --> 01:42:08.756 A:middle
And then we are going to grab
a move action, and we are going

01:42:08.756 --> 01:42:09.796 A:middle
to build the jump right here.

01:42:09.856 --> 01:42:11.536 A:middle
Now, notice how it's
snapping to the timeline.

01:42:12.246 --> 01:42:15.476 A:middle
Okay. I am going to
make it go up 100 units,

01:42:16.476 --> 01:42:18.576 A:middle
and then I am going to
use the timeline yet again

01:42:19.276 --> 01:42:20.296 A:middle
to figure out the apex.

01:42:20.296 --> 01:42:21.196 A:middle
I want it to be about there.

01:42:21.196 --> 01:42:23.446 A:middle
Now I am going to
snap the duration.

01:42:24.196 --> 01:42:25.536 A:middle
Okay? It's that easy.

01:42:26.396 --> 01:42:29.276 A:middle
Obviously, when he jumps,
I want him to ease out.

01:42:29.276 --> 01:42:31.146 A:middle
That means he is going to have
a lot of velocity at the start

01:42:31.146 --> 01:42:32.726 A:middle
and very little at the apex.

01:42:33.276 --> 01:42:35.496 A:middle
Going to copy and paste
that and reverse it.

01:42:36.886 --> 01:42:37.716 A:middle
Minus 100.

01:42:37.716 --> 01:42:39.976 A:middle
That's going to ease in so

01:42:39.976 --> 01:42:42.096 A:middle
that he has some hang
time up at the apex.

01:42:42.976 --> 01:42:44.246 A:middle
Okay. Let's scrub across that.

01:42:44.246 --> 01:42:46.206 A:middle
That's a parabolic jump.

01:42:46.346 --> 01:42:48.926 A:middle
Perfect. Now, obviously,
it looks a bit weird

01:42:48.926 --> 01:42:52.156 A:middle
if he just runs in the air,
so let's add an animation.

01:42:52.786 --> 01:42:55.496 A:middle
You notice here I am layering
animations on top of each other,

01:42:55.606 --> 01:42:57.046 A:middle
and SpriteKit handles
that for you.

01:42:57.046 --> 01:43:01.376 A:middle
Here I am going to snap
the animation to the length

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:42:57.046 --> 01:43:01.376 A:middle
Here I am going to snap
the animation to the length

01:43:01.376 --> 01:43:04.266 A:middle
of the jump, and I am going
to hop into the media library

01:43:04.746 --> 01:43:05.896 A:middle
and fetch my jump frames.

01:43:06.636 --> 01:43:10.796 A:middle
So I am filtering jump, select
that one, select all of them,

01:43:11.626 --> 01:43:13.546 A:middle
drag and drop, perfect.

01:43:14.166 --> 01:43:14.386 A:middle
All right.

01:43:14.386 --> 01:43:15.246 A:middle
Now scrub.

01:43:15.696 --> 01:43:16.856 A:middle
Okay. That's a cute jump.

01:43:18.216 --> 01:43:20.246 A:middle
Now, there are two
chasms, so I am going

01:43:20.246 --> 01:43:21.486 A:middle
to have to do this twice.

01:43:21.776 --> 01:43:24.716 A:middle
The easiest thing to do here is
to turn this into a reference,

01:43:24.816 --> 01:43:27.416 A:middle
so I am going to select
all those, right-click,

01:43:28.336 --> 01:43:31.256 A:middle
convert to reference, and I
am going to call that Jump.

01:43:31.256 --> 01:43:34.616 A:middle
That's going to store
in the actions.sks file

01:43:34.796 --> 01:43:35.986 A:middle
that I used the run from before.

01:43:35.986 --> 01:43:36.936 A:middle
All right.

01:43:36.936 --> 01:43:37.676 A:middle
Great. That's a jump.

01:43:37.676 --> 01:43:40.916 A:middle
I'm going to use the scrubber
again to lay down another jump.

01:43:41.106 --> 01:43:43.676 A:middle
The excellent thing about
references is they turn up here

01:43:43.676 --> 01:43:44.696 A:middle
in the object library
straightaway.

01:43:45.446 --> 01:43:47.406 A:middle
So I am just going to
drag and drop that in.

01:43:48.586 --> 01:43:51.996 A:middle
And here we should have
our final cut scene.

01:43:52.216 --> 01:43:53.676 A:middle
Okay. Jump and jump.

01:43:54.166 --> 01:43:54.336 A:middle
Great.

01:43:55.156 --> 01:43:55.516 A:middle
[Applause] Okay.

01:43:56.616 --> 01:43:56.936 A:middle
Thanks.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:44:02.506 --> 01:44:03.196 A:middle
The great things

01:44:03.196 --> 01:44:06.266 A:middle
about references is they also
help you structure not just your

01:44:06.266 --> 01:44:07.776 A:middle
other scenes, but
your code as well.

01:44:08.366 --> 01:44:11.956 A:middle
So here using SK action
named, I am going to load

01:44:11.956 --> 01:44:14.096 A:middle
up those very same actions,
and I am going to hook them

01:44:14.096 --> 01:44:16.876 A:middle
up to the left and right keys
and the space bar for jump.

01:44:17.486 --> 01:44:18.606 A:middle
Let's run that and
have a look at it.

01:44:20.506 --> 01:44:22.176 A:middle
So here we have the panda
doing the cut scene.

01:44:22.676 --> 01:44:23.146 A:middle
Excellent.

01:44:23.146 --> 01:44:24.306 A:middle
Now I am going to control it.

01:44:24.306 --> 01:44:25.236 A:middle
Look at that.

01:44:25.236 --> 01:44:25.746 A:middle
Left and right.

01:44:26.536 --> 01:44:27.486 A:middle
Jump, jump.

01:44:28.186 --> 01:44:29.706 A:middle
It's that easy.

01:44:31.016 --> 01:44:35.086 A:middle
[ Applause ]

01:44:35.586 --> 01:44:39.536 A:middle
Now, we've been busy,
so we took this

01:44:39.636 --> 01:44:41.156 A:middle
to the next dimension as well.

01:44:42.506 --> 01:44:45.556 A:middle
So new in Xcode 7, we have
full visual scene editing

01:44:45.816 --> 01:44:47.606 A:middle
of 3D content using
SceneKit as well.

01:44:48.956 --> 01:44:51.116 A:middle
This editor is very much like
the 2D editor for SpriteKit.

01:44:51.766 --> 01:44:52.476 A:middle
Same things work.

01:44:52.936 --> 01:44:54.316 A:middle
Drag and drop to
add new content.

01:44:55.136 --> 01:44:57.846 A:middle
You can use the manipulators
in 3D to drag it around.

01:44:58.386 --> 01:44:59.806 A:middle
You can snap to other objects.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:45:00.246 --> 01:45:01.276 A:middle
You can even duplicate.

01:45:03.006 --> 01:45:04.406 A:middle
And we have physics

01:45:04.526 --> 01:45:07.556 A:middle
and animations live
inside the editor.

01:45:07.746 --> 01:45:10.456 A:middle
So we are going to now animate.

01:45:11.946 --> 01:45:15.136 A:middle
Perfect. And let's
interact with this as well.

01:45:16.286 --> 01:45:17.406 A:middle
So I am going to play.

01:45:17.406 --> 01:45:25.386 A:middle
And we got the same cute
panda from the previous demo.

01:45:25.576 --> 01:45:25.956 A:middle
Here we go.

01:45:28.246 --> 01:45:31.806 A:middle
[Music] This is a red panda,
not a fox; a red panda.

01:45:31.806 --> 01:45:35.686 A:middle
I am going to walk up,
and I am going to interact

01:45:35.686 --> 01:45:37.606 A:middle
with that little
block I had before.

01:45:38.246 --> 01:45:40.416 A:middle
Oh, yeah, kick you down.

01:45:40.416 --> 01:45:44.046 A:middle
Great. So in this game, you
are playing a little red panda

01:45:44.046 --> 01:45:47.076 A:middle
that collecting flowers
and pearls and -- oh.

01:45:48.536 --> 01:45:49.536 A:middle
Sorry about that.

01:45:50.516 --> 01:45:56.756 A:middle
I promise, no pandas
were hurt in the making.

01:45:56.756 --> 01:45:58.746 A:middle
Okay. This is not just
a demo for stage here.

01:45:58.746 --> 01:46:02.086 A:middle
We are actually handing this
out to you, and this is a sample

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:45:58.746 --> 01:46:02.086 A:middle
We are actually handing this
out to you, and this is a sample

01:46:02.086 --> 01:46:06.676 A:middle
that you can use to build your
next 3D SceneKit game using this

01:46:06.676 --> 01:46:08.386 A:middle
editor, SceneKit, and Xcode 7.

01:46:09.176 --> 01:46:09.446 A:middle
Thank you.

01:46:09.786 --> 01:46:11.126 A:middle
I am going to hand
you back to Andreas.

01:46:11.626 --> 01:46:17.486 A:middle
[ Applause ]

01:46:17.986 --> 01:46:18.326 A:middle
&gt;&gt; ANDREAS WENDKER: All right.

01:46:18.996 --> 01:46:21.696 A:middle
Let's quickly review the
technologies we discussed

01:46:21.696 --> 01:46:22.216 A:middle
in this session.

01:46:22.216 --> 01:46:25.826 A:middle
We announced new versions of
our OSs today, and of course,

01:46:25.826 --> 01:46:27.326 A:middle
the new native watchOS SDK.

01:46:27.326 --> 01:46:32.396 A:middle
The SDKs contain many new APIs
you can take advantage of,

01:46:32.396 --> 01:46:33.746 A:middle
particularly for gaming.

01:46:34.726 --> 01:46:37.116 A:middle
The new optimization
techniques with App Thinning.

01:46:37.866 --> 01:46:40.406 A:middle
A new version of Swift that
advances your apps faster

01:46:40.406 --> 01:46:43.076 A:middle
and at the same time lets you
write more effective code.

01:46:43.076 --> 01:46:46.816 A:middle
And of course, this new
version of our Xcode now

01:46:46.816 --> 01:46:49.066 A:middle
with user interface
recording and testing.

01:46:50.336 --> 01:46:52.936 A:middle
And all these technologies
will be available for download

01:46:52.936 --> 01:46:56.106 A:middle
from the WWDC attendee
portal this afternoon.

01:46:56.106 --> 01:46:58.466 A:middle
We hope that you will
quickly adopt them all

01:46:58.466 --> 01:47:01.396 A:middle
and create even more
innovative apps for users.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:46:58.466 --> 01:47:01.396 A:middle
and create even more
innovative apps for users.

01:47:02.296 --> 01:47:04.466 A:middle
Please go ahead and
install all this stuff

01:47:04.466 --> 01:47:06.836 A:middle
and let us know what
you think about it.

01:47:07.756 --> 01:47:08.916 A:middle
Also we are doing something new

01:47:08.916 --> 01:47:10.886 A:middle
with our TestFlight
service for you this year.

01:47:11.076 --> 01:47:14.536 A:middle
Starting today, you will be
able to deploy apps written

01:47:14.536 --> 01:47:18.596 A:middle
to the iOS 9 SDK in TestFlight,
and over the next several weeks,

01:47:18.696 --> 01:47:21.476 A:middle
it's even going to add
support for App Slicing,

01:47:22.056 --> 01:47:25.316 A:middle
on-demand resources, and Bitcode
so you can test your apps even

01:47:25.316 --> 01:47:28.746 A:middle
with those new technologies
before we launch iOS 9 later

01:47:28.746 --> 01:47:29.526 A:middle
this year.

01:47:30.516 --> 01:47:36.506 A:middle
[ Applause ]

01:47:37.006 --> 01:47:39.286 A:middle
So there are, of course, many
opportunities to learn more

01:47:39.286 --> 01:47:41.076 A:middle
about these technologies
here at the conference.

01:47:41.366 --> 01:47:43.266 A:middle
There's more than a hundred
sessions you can attend,

01:47:43.806 --> 01:47:46.866 A:middle
numerous labs where you can go
and get help with your projects.

01:47:46.866 --> 01:47:49.146 A:middle
In fact, there's more than a
thousand Apple engineers here

01:47:49.146 --> 01:47:50.976 A:middle
on site to answer
your questions.

01:47:51.056 --> 01:47:53.276 A:middle
So I hope you enjoyed
this session.

01:47:53.326 --> 01:47:54.826 A:middle
I hope to hear from
you later this week.

01:47:55.676 --> 01:48:13.290 A:middle
[ Applause ]

