1
00:00:23,516 --> 00:00:31,096
花川学院-小波 翻译 www.hcxy.me

2
00:00:31,596 --> 00:00:32,076
古德猫宁

3
00:00:33,266 --> 00:00:35,096
嗨皮礼拜四，尔瑞巴蒂

4
00:00:35,746 --> 00:00:37,256
恭喜大家

5
00:00:37,256 --> 00:00:38,976
今早上9点才来听这个
（之前是太早了么。。。）

6
00:00:39,016 --> 00:00:40,086
[笑]

7
00:00:40,086 --> 00:00:41,666
去年我还坐在下面呢，

8
00:00:41,666 --> 00:00:43,036
我感同身受

9
00:00:43,036 --> 00:00:48,856
今天聊聊一些改进

10
00:00:48,856 --> 00:00:50,296
关于storyboard

11
00:00:51,136 --> 00:00:54,546
先帮大家热热身

12
00:00:54,816 --> 00:00:56,606
来个速度健身操

13
00:00:57,356 --> 00:00:58,936
有多少人开发app

14
00:00:59,456 --> 00:01:00,606
用storyboard的举手

15
00:01:01,126 --> 00:01:04,025
是个好数字

16
00:01:04,025 --> 00:01:08,996
谁试用过storyboard

17
00:01:08,996 --> 00:01:11,476
或者打算用， 即使团队

18
00:01:11,476 --> 00:01:15,136
已经定下来不用storyboard？

19
00:01:15,646 --> 00:01:16,436
可能不是马上就用

20
00:01:17,536 --> 00:01:22,816
OK， 还有谁，从来就

21
00:01:22,816 --> 00:01:23,606
不用storyboard的？

22
00:01:24,146 --> 00:01:28,186
哇哦，你们（这些代码写界面的）太屌了...

23
00:01:28,956 --> 00:01:29,586
好吧。

24
00:01:31,046 --> 00:01:33,886
我们今天聚焦3个主要领域:

25
00:01:34,306 --> 00:01:36,976
第一个先讲讲我们增加的一个新特性，

26
00:01:36,976 --> 00:01:38,456
用于帮你组织多个storyboard

27
00:01:38,456 --> 00:01:40,816
让他们易于管理，然后是

28
00:01:40,816 --> 00:01:43,816
关于定制标准转场（segue）的几种方式

29
00:01:43,816 --> 00:01:45,586
在Interface Builder可以设置。

30
00:01:46,536 --> 00:01:47,486
最后讲讲一点

31
00:01:47,486 --> 00:01:50,546
关于一个高级特性，

32
00:01:50,916 --> 00:01:54,916
（unwind segue）反向转场的方法
及如何改进其与你在iOS中

33
00:01:54,916 --> 00:01:58,186
自定义的容器视图控制器的关系。

34
00:01:58,316 --> 00:02:01,446
So 开始吧。

35
00:02:01,446 --> 00:02:05,846
这里我们有一个很简单的Demo应用。

36
00:02:05,846 --> 00:02:07,856
就是一个collection
view显示一组

37
00:02:07,856 --> 00:02:09,795
照片，在导航控制器中。

38
00:02:10,506 --> 00:02:14,566
如果我点一下这些照片，就会上屏

39
00:02:15,596 --> 00:02:16,906
然后点一下 后退 按钮，

40
00:02:16,906 --> 00:02:19,186
左上角那个，就会消失。

41
00:02:23,476 --> 00:02:28,146
这3个UI组件对应

42
00:02:28,216 --> 00:02:30,916
运行时的3个视图控制器。

43
00:02:32,306 --> 00:02:34,356
如果我把这个app

44
00:02:34,356 --> 00:02:36,186
画到纸上就像这样。

45
00:02:36,356 --> 00:02:39,996
这些方块代表视图控制器

46
00:02:40,646 --> 00:02:44,156
箭头描述app的

47
00:02:44,156 --> 00:02:45,206
流程。

48
00:02:45,726 --> 00:02:49,526
这是storyboard提供给你的信息

49
00:02:49,526 --> 00:02:51,186
让你在运行时使用。

50
00:02:51,656 --> 00:02:55,056
这里有一些关于storyboard的

51
00:02:55,056 --> 00:02:56,906
专业术语。

52
00:02:56,906 --> 00:02:58,896
这些在圆形里面的方框，

53
00:02:59,186 --> 00:03:02,286
我们称之为 场景（scene），
它们就像是视图控制器使用的模板，

54
00:03:02,356 --> 00:03:04,106
在运行时

55
00:03:04,106 --> 00:03:07,416
组成了UI。

56
00:03:07,506 --> 00:03:10,846
这些箭头代表 转场（segue），且有一组

57
00:03:10,846 --> 00:03:12,476
不同种类的 转场。

58
00:03:13,506 --> 00:03:14,776
这种关系 --

59
00:03:14,776 --> 00:03:17,096
导航控制器与

60
00:03:17,096 --> 00:03:18,946
collection view控制器之间的转场
是一种叫做

61
00:03:18,946 --> 00:03:20,516
关系（relationship）转场。

62
00:03:21,096 --> 00:03:25,226
明确地代表collection view控制器

63
00:03:25,226 --> 00:03:27,636
是导航控制器管理下的

64
00:03:27,636 --> 00:03:28,866
根视图控制器。

65
00:03:29,386 --> 00:03:33,396
另一种转场叫做
触发转场

66
00:03:33,676 --> 00:03:36,886
也就是当我点一个
collection view中的

67
00:03:36,886 --> 00:03:38,596
cell（单元格）时，我想用定义

68
00:03:38,596 --> 00:03:41,866
好的show view controller方法

69
00:03:41,866 --> 00:03:44,066
显示我的照片视图控制器。

70
00:03:46,936 --> 00:03:49,236
当我们把这些集中在
一个storyboard文件中，

71
00:03:49,296 --> 00:03:53,306
可以给它们用identifier来标识

72
00:03:54,676 --> 00:03:56,656
在Interface Builder中设置这些--

73
00:03:56,786 --> 00:03:59,496
我们工程的主storyboard的流程是：

74
00:04:01,836 --> 00:04:03,256
首先，

75
00:04:03,256 --> 00:04:05,966
实例化一个导航控制器，

76
00:04:05,966 --> 00:04:08,666
基于storyboard的初始场景
（Initial Scene）

77
00:04:09,266 --> 00:04:12,156
然后我们看到一个

78
00:04:12,156 --> 00:04:13,496
在导航控制器之上的关系。

79
00:04:14,066 --> 00:04:18,446
所以我们初始化这个转场关系
另一端的视图控制器

80
00:04:18,446 --> 00:04:22,206
与之建立关系，

81
00:04:22,826 --> 00:04:24,586
这是转场定义的

82
00:04:24,876 --> 00:04:28,176
导航栈(Stack)的根视图控制器。

83
00:04:28,386 --> 00:04:32,126
以后当用户使用我们app，他们点

84
00:04:32,126 --> 00:04:36,446
一个collection view的单元格
就会执行这里我们定义好的

85
00:04:36,446 --> 00:04:37,996
名为showPic的转场,

86
00:04:38,236 --> 00:04:39,836
就像之前演示过的那样。

87
00:04:39,836 --> 00:04:43,716
我们初始化转场另一端的

88
00:04:43,716 --> 00:04:46,816
的视图控制器建立关系，

89
00:04:46,816 --> 00:04:49,706
执行转场既定的操作（Action）

90
00:04:50,616 --> 00:04:52,946
当你设计app时，

91
00:04:52,946 --> 00:04:55,576
app界面实现

92
00:04:55,576 --> 00:04:57,566
越来越复杂
特别是用storyboard时，

93
00:04:58,156 --> 00:05:00,076
最终为了管理方便，

94
00:05:00,076 --> 00:05:02,456
你把storyboard分成好几个文件，

95
00:05:06,576 --> 00:05:09,406
但你没法跨文件画一个转场，

96
00:05:10,676 --> 00:05:13,616
不得已，我们还是回到代码

97
00:05:13,616 --> 00:05:14,896
初始化第二个storyboard的实例，

98
00:05:16,576 --> 00:05:19,326
然后根据第二个storyboard中的场景

99
00:05:19,326 --> 00:05:24,636
来初始化视图控制器，这么干的话，

100
00:05:24,716 --> 00:05:27,406
我们就失去了场景连线关系可视化的连续性。

101
00:05:27,656 --> 00:05:30,826
我们好想好想把这种箭头找回来。

102
00:05:30,826 --> 00:05:34,976
这就是 Xcode 7 中的我们改进的，

103
00:05:34,976 --> 00:05:37,336
这种新特性叫 Storyboard引用
（Storyboard References）

104
00:05:38,516 --> 00:05:43,686
[鼓掌]

105
00:05:44,186 --> 00:05:45,346
你们造吗 我只是打酱油的

106
00:05:45,346 --> 00:05:47,376
呆会给Tony鼓掌可以热烈点

107
00:05:47,376 --> 00:05:48,976
他才是出力的

108
00:05:49,016 --> 00:05:50,046
（笑）

109
00:05:50,046 --> 00:05:52,376
storyboard引用 意思就是

110
00:05:52,376 --> 00:05:54,886
到下一个场景，这个场景实际可以是

111
00:05:54,886 --> 00:05:57,656
当前storyboard，或是另一个storyboard里的

112
00:05:58,196 --> 00:06:01,856
就像任意场景一样，它可以

113
00:06:02,296 --> 00:06:05,896
是任意转场的终点

114
00:06:06,396 --> 00:06:09,946
说的够多了，我想

115
00:06:09,946 --> 00:06:12,766
请tony上来，给大家秀一下在Xcode7是多么轻松地

116
00:06:12,766 --> 00:06:15,416
管理多个storyboard，无论是OS X 10.11

117
00:06:15,916 --> 00:06:18,976
iOS 9、或者 watchOS

118
00:06:19,516 --> 00:06:23,286
[掌声]

119
00:06:23,786 --> 00:06:24,916
Thank you, Kyle.

120
00:06:25,376 --> 00:06:28,366
Good Morning, 我叫Tony
我在 Interface Builder组干活.

121
00:06:28,476 --> 00:06:30,976
这个demo，我来演示下这个新特性

122
00:06:31,056 --> 00:06:32,146
-- Storyboard 引用,

123
00:06:32,506 --> 00:06:35,106
开始之前，我们来看下app能干啥

124
00:06:36,616 --> 00:06:38,736
这个app可以帮忙整理

125
00:06:38,816 --> 00:06:40,466
和计划一次徒步行程

126
00:06:40,936 --> 00:06:44,686
我实现UI用了一个自定义

127
00:06:44,686 --> 00:06:47,896
视图控制器，管理4个Tab

128
00:06:48,546 --> 00:06:50,286
每个tab都实现了

129
00:06:50,286 --> 00:06:53,276
自己的UI导航控制器，而且你可以

130
00:06:53,276 --> 00:06:55,966
打开一个tab，点它的导航条就行。

131
00:06:56,676 --> 00:07:00,746
第一个tab显示 即将到来的计划

132
00:07:01,676 --> 00:07:05,666
这个tab显示已完成计划的日记

133
00:07:05,756 --> 00:07:07,386
这里地图上显示最近行程中的地点

134
00:07:08,406 --> 00:07:10,546
最后，我们有一组照片

135
00:07:10,546 --> 00:07:11,466
记录我们的行程。

136
00:07:12,126 --> 00:07:15,596
可以点照片格看大图

137
00:07:15,596 --> 00:07:17,696
可以点这个导航条上的按钮

138
00:07:17,846 --> 00:07:19,306
看一下操作菜单

139
00:07:19,746 --> 00:07:24,206
来看下这个app的 主storyboard

140
00:07:25,366 --> 00:07:29,206
左上这里我有自定义的容器视图控制器

141
00:07:29,206 --> 00:07:32,996
连接到每一个

142
00:07:32,996 --> 00:07:36,506
它自己的子导航控制器，这里用的是

143
00:07:36,506 --> 00:07:37,196
嵌入式转场

144
00:07:37,956 --> 00:07:39,316
一个嵌入式转场可以让你

145
00:07:39,316 --> 00:07:44,216
在母视图控制器中，嵌入一个子视图控制器

146
00:07:44,326 --> 00:07:46,616
显而易见storyboard天长日久后会变的

147
00:07:46,616 --> 00:07:47,236
非常大

148
00:07:47,616 --> 00:07:49,096
所以今天我想做的就是把它

149
00:07:49,096 --> 00:07:50,116
分割成小块

150
00:07:50,836 --> 00:07:56,866
如果你看看我storyboard下面的一部分，

151
00:07:56,866 --> 00:08:00,016
我的照片tab有3个视图控制器

152
00:08:01,436 --> 00:08:04,256
这几个视图控制器跟storyboard上其他的

153
00:08:04,256 --> 00:08:05,456
场景相对独立

154
00:08:05,816 --> 00:08:07,316
所以自然而然就想把它单独分离

155
00:08:07,316 --> 00:08:08,166
成一个文件

156
00:08:09,426 --> 00:08:13,196
要达到这一点，我选中这些视图控制器然后

157
00:08:13,196 --> 00:08:16,076
转到editor菜单，选择“refator to storyboard”
（重构成新storyboard）

158
00:08:16,356 --> 00:08:20,086
给个新文件名： photos.storyboard.

159
00:08:21,566 --> 00:08:24,796
这时呢，Xcode生成了一个新storyboard文件

160
00:08:24,916 --> 00:08:27,216
把这些视图控制器从主storyboard拉出去

161
00:08:27,406 --> 00:08:30,276
放到这个新文件里

162
00:08:30,496 --> 00:08:32,336
如果回到主storyboard文件，会发生什么呢？

163
00:08:32,336 --> 00:08:33,385
用 回退 按钮

164
00:08:34,746 --> 00:08:35,916
下拉箭头这取代原来的

165
00:08:35,976 --> 00:08:38,306
3个视图控制器的是

166
00:08:38,436 --> 00:08:39,566
storyboard 引用.

167
00:08:40,936 --> 00:08:43,076
无论你何时从一个storyboard重构场景

168
00:08:43,395 --> 00:08:46,406
而且这些场景含有各种转场，Xcode都会

169
00:08:46,406 --> 00:08:50,006
接管这些转场,
生成一个 storyboard 引用

170
00:08:50,006 --> 00:08:51,696
且重新设定这些转场的流向。

171
00:08:52,846 --> 00:08:54,826
在运行时，当这些转场发生时

172
00:08:54,916 --> 00:08:57,636
就会初始化我的新照片storyboard

173
00:08:57,636 --> 00:09:00,366
中的初始场景，作为终点。

174
00:09:02,386 --> 00:09:06,136
如果我双击这个引用，Xcode会把我带到

175
00:09:06,356 --> 00:09:08,766
这个新storyboard并显示

176
00:09:08,766 --> 00:09:09,366
我引用的那个的视图控制器

177
00:09:09,716 --> 00:09:11,716
这个例子是 初始导航

178
00:09:11,716 --> 00:09:13,156
它是这个storyboard的初始视图控制器。

179
00:09:14,526 --> 00:09:15,796
这是使用这种新特性的一种方式

180
00:09:16,106 --> 00:09:17,996
你可以把大型storyboard文件

181
00:09:17,996 --> 00:09:19,756
重构成小块的

182
00:09:20,696 --> 00:09:23,786
另一种使用新特性的方式是，
你可以跨storyboard文件

183
00:09:23,786 --> 00:09:26,256
创建转场。

184
00:09:27,566 --> 00:09:30,576
我来创建一个新转场，我想

185
00:09:30,576 --> 00:09:32,416
这个转场由这个 journal 按钮触发

186
00:09:32,806 --> 00:09:35,656
我想让自己返回

187
00:09:35,656 --> 00:09:37,776
主storyboard中管理

188
00:09:37,776 --> 00:09:39,246
创建新 日记条目 的那个视图

189
00:09:39,756 --> 00:09:44,656
那好，我拉到这里的照片视图

190
00:09:44,656 --> 00:09:48,146
然后从控件库拖一个storyboard reference

191
00:09:48,146 --> 00:09:49,956
放到它后面

192
00:09:50,446 --> 00:09:53,806
看一下这个storyboard reference的

193
00:09:53,806 --> 00:09:54,886
属性设置

194
00:09:55,016 --> 00:09:58,566
一共有3项

195
00:09:59,386 --> 00:10:01,086
第一项是

196
00:10:01,086 --> 00:10:02,476
你要引用的storyboard名

197
00:10:03,316 --> 00:10:06,536
如果留空，Xcode就会默认

198
00:10:06,536 --> 00:10:08,336
引用当前storyboard自身

199
00:10:08,736 --> 00:10:10,866
这里是照片storyboard

200
00:10:11,576 --> 00:10:14,156
这就厉害了，如果你有一个
巨大的storyboard（根本拖不动。。。）

201
00:10:14,156 --> 00:10:16,246
你就可以从西边的一个视图

202
00:10:16,246 --> 00:10:18,296
创建一个到东边视图的转场。

203
00:10:19,116 --> 00:10:21,936
我这里，就是想从菜单里

204
00:10:21,936 --> 00:10:25,396
引用到主storyboard

205
00:10:25,516 --> 00:10:27,566
下一项是

206
00:10:27,566 --> 00:10:28,846
你想引用的视图控制器的identifier

207
00:10:29,596 --> 00:10:32,546
如果大侠你留空，xcode会直接

208
00:10:32,546 --> 00:10:34,026
使用你引用的storyboard的第一个视图

209
00:10:34,876 --> 00:10:37,786
我这里其实想引用

210
00:10:37,786 --> 00:10:39,536
主storyboard里特定的一个视图控制器，

211
00:10:39,536 --> 00:10:42,776
这个控制器的
identifier 是newJournalEntry.

212
00:10:45,516 --> 00:10:47,886
最后一项是 bundle identifier.

213
00:10:49,196 --> 00:10:51,276
你引用的storyboard可能是在

214
00:10:51,276 --> 00:10:52,446
一个外部的framework里

215
00:10:52,636 --> 00:10:53,956
那样的话,就把

216
00:10:53,956 --> 00:10:55,816
那个 framework的
bundle identifier 填这里.

217
00:10:55,816 --> 00:10:59,686
我这里留空,因为我的主storyboard

218
00:10:59,686 --> 00:11:01,756
跟我的照片storyboard是在同一个bundle中的.

219
00:11:02,226 --> 00:11:08,576
再来一次,现在我的引用

220
00:11:08,576 --> 00:11:12,026
已经设置过了,双击则Xcode会

221
00:11:12,056 --> 00:11:13,606
跳到我引用的storyboard文件

222
00:11:14,006 --> 00:11:15,636
同时展示我引用的视图

223
00:11:16,566 --> 00:11:20,216
这里是导航控制器, 如果看看

224
00:11:20,216 --> 00:11:22,146
 Identity 属性,我提前已经填好了

225
00:11:22,146 --> 00:11:24,536
跟我在引用时填的一样的

226
00:11:24,536 --> 00:11:25,946
ID

227
00:11:27,236 --> 00:11:31,296
这个导航控制器的根视图

228
00:11:31,326 --> 00:11:32,976
是这个表格控制器, 它负责管理

229
00:11:32,976 --> 00:11:34,396
创建新日记条目的UI

230
00:11:34,846 --> 00:11:37,996
回到照片storyboard

231
00:11:38,276 --> 00:11:42,016
创建一个到那个引用的转场.

232
00:11:42,076 --> 00:11:44,656
之前我提到我想这个转场由

233
00:11:44,656 --> 00:11:45,506
这个journal按钮触发.

234
00:11:46,196 --> 00:11:48,406
你在我的 照片视图控制器中

235
00:11:48,406 --> 00:11:49,396
看不见这个 journal按钮.

236
00:11:50,686 --> 00:11:54,006
因为那个菜单在这里的 SceneDoc中

237
00:11:54,656 --> 00:11:59,396
SceneDoc可以让你保存跟视图控制器
秘密同居的多个对象(金屋藏多娇?)

238
00:11:59,421 --> 00:12:01,971
如果你想让照片这个"主人"视图藏女仆

239
00:12:02,236 --> 00:12:04,526
你可以考虑把某个女仆(View)加到SceneDoc这个屋里

240
00:12:04,526 --> 00:12:05,726
这样运行时,主人就可以
秀一把女仆, 愉快地装B

241
00:12:06,846 --> 00:12:08,996
Xcode 7中当你把一个女仆(View)
加进你的屋 SceneDoc

242
00:12:09,266 --> 00:12:11,986
而且选中,她会显示在自身的编辑器中,

243
00:12:11,986 --> 00:12:13,886
女仆出现的位置就是在主人的上方.
(骑行么? 额,这姿势太美我不敢看)

244
00:12:14,516 --> 00:12:20,976
[观众热烈掌声!]
[大家纷纷表示"涨姿势!"]

245
00:12:21,476 --> 00:12:23,136
TONY: 这样我们就可以看到journal按钮了,

246
00:12:23,516 --> 00:12:24,756
来创建这个转场

247
00:12:24,836 --> 00:12:28,236
我来 control + 拖动到 我的storyboard引用

248
00:12:28,806 --> 00:12:30,676
我想让这个视图以模态显示

249
00:12:30,676 --> 00:12:34,136
所以我选这个

250
00:12:34,336 --> 00:12:34,676
好了

251
00:12:34,726 --> 00:12:36,006
来运行看看这个转场吧

252
00:12:42,256 --> 00:12:43,826
首先我想指出的是

253
00:12:43,826 --> 00:12:46,536
我的照片tab跟之前一样正常显示

254
00:12:46,736 --> 00:12:48,776
即使现在已经storyboard文件分家了

255
00:12:49,716 --> 00:12:52,586
点一下单元格再点出菜单

256
00:12:52,586 --> 00:12:56,146
点journal按钮,然后就执行了转场

257
00:12:56,146 --> 00:12:58,136
转场到主storyboard且初始化了

258
00:12:58,136 --> 00:13:01,726
指定identifier的那个视图.

259
00:13:01,726 --> 00:13:03,096
就跟在同一个storyboard中一样.

260
00:13:04,306 --> 00:13:05,986
以上就是新特性- Storyboard引用

261
00:13:06,156 --> 00:13:07,306
我希望有点卵用.

262
00:13:08,026 --> 00:13:09,506
现场交回给Kyle

263
00:13:10,516 --> 00:13:16,946
[鼓掌:其中含代码写UI表示 "然并卵"的)
(怎么听出来的我会告诉你么)

264
00:13:17,446 --> 00:13:19,746
 KYLE: Thank you, Tony.

265
00:13:19,936 --> 00:13:23,436
OK,我听到每个人都觉得很兴奋

266
00:13:23,436 --> 00:13:23,986
对于有这个新特性.
 (哥你不要逗, 明明有一大帮代码写UI)

267
00:13:23,986 --> 00:13:25,066
我们真的很嗨皮能实现

268
00:13:25,066 --> 00:13:25,976
在今年带给各位

269
00:13:26,516 --> 00:13:30,746
[鼓掌,口哨]

270
00:13:31,246 --> 00:13:32,576
再聊聊不一样的

271
00:13:33,566 --> 00:13:35,876
就是关于你如何能定制

272
00:13:35,876 --> 00:13:37,416
一些Interface Builder提供给你的

273
00:13:37,416 --> 00:13:38,936
标准转场.

274
00:13:38,936 --> 00:13:43,136
看下这个demo的另一个方面,

275
00:13:43,286 --> 00:13:46,436
我们有一个journal, 是用一个表格控制器

276
00:13:46,436 --> 00:13:46,986
实现的.

277
00:13:47,576 --> 00:13:51,326
如果用户点右上的那个 加号 按钮

278
00:13:51,326 --> 00:13:54,736
我们想要一个模态展示

279
00:13:54,736 --> 00:13:56,626
就像tony刚刚点 那个菜单中的 journal 按钮一样,

280
00:13:57,076 --> 00:13:59,796
这是有一个带导航的,

281
00:14:00,246 --> 00:14:03,106
里面有 表格控制器.

282
00:14:05,356 --> 00:14:08,686
点 取消 按钮, 导航消失

283
00:14:08,786 --> 00:14:11,006
这是标准的模态展示样式:

284
00:14:11,006 --> 00:14:12,746
从底部弹出,

285
00:14:12,746 --> 00:14:14,516
再从掉到底部消失. iPhone上就是如此.

286
00:14:15,086 --> 00:14:18,236
如果想要炫酷...

287
00:14:18,236 --> 00:14:23,886
用户点了+,

288
00:14:23,936 --> 00:14:26,286
我想要...火花四溅的赶脚

289
00:14:26,736 --> 00:14:32,936
如果说进入效果炫酷

290
00:14:33,216 --> 00:14:35,796
想必退出效果同样牛b

291
00:14:36,306 --> 00:14:39,456
似曾相识哈

292
00:14:39,666 --> 00:14:43,196
如果你是个Storyboard老手

293
00:14:43,676 --> 00:14:46,036
转场是有些效果可以选的

294
00:14:46,036 --> 00:14:47,956
在转场属性中

295
00:14:49,156 --> 00:14:52,026
有几个标准的

296
00:14:52,026 --> 00:14:54,816
iOS上的模态展示过渡效果

297
00:14:55,656 --> 00:14:58,496
默认效果是从底部,垂直的

298
00:14:58,496 --> 00:15:01,716
但我们也可以做水平的
翻转或者溶解效果

299
00:15:02,456 --> 00:15:04,226
但很遗憾火花四溅这种实在没有
(你妹的,就不能直接做好加上去吗?)

300
00:15:04,686 --> 00:15:09,196
唯一能做的就是在iOS8中,
用Xcode 7之前版本的版本

301
00:15:09,196 --> 00:15:11,126
可以转用

302
00:15:11,126 --> 00:15:12,346
自定义的转场

303
00:15:12,856 --> 00:15:16,226
那样的话,我们要负责

304
00:15:16,226 --> 00:15:18,246
子类化
UIStoryboardSegue

305
00:15:18,246 --> 00:15:20,146
然后效果全部自己做

306
00:15:20,876 --> 00:15:24,976
虽说不是个大负担

307
00:15:25,016 --> 00:15:28,586
来展示视图,但如果不做

308
00:15:28,586 --> 00:15:30,816
再好不过.

309
00:15:30,816 --> 00:15:34,636
尤其是这里我们还要处理大量

310
00:15:34,636 --> 00:15:35,576
动画的苦力活.

311
00:15:36,116 --> 00:15:41,506
在Xcode 7中当部署app到 iOS 9

312
00:15:41,506 --> 00:15:45,636
或OS X 10.11你可选
任何一个标准转场类型

313
00:15:46,026 --> 00:15:48,516
且仍然可以指定一个

314
00:15:48,646 --> 00:15:49,696
转场用的子类.

315
00:15:50,196 --> 00:15:53,826
你重写可以像完全自定义转场那样

316
00:15:53,876 --> 00:15:57,146
重写perform()方法,但如今你可以

317
00:15:57,146 --> 00:15:59,886
调用super的perform

318
00:16:00,076 --> 00:16:01,386
实现默认行为.

319
00:16:02,106 --> 00:16:04,876
围绕这个super调用,你可以执行任意

320
00:16:04,876 --> 00:16:05,386
你想要的动画.

321
00:16:05,986 --> 00:16:09,366
真正关于我们这个
模态展示的重点是

322
00:16:09,366 --> 00:16:13,856
我们可以牢牢把握

323
00:16:13,856 --> 00:16:17,126
用户触发这个转场过程中

324
00:16:17,126 --> 00:16:19,876
完整的

325
00:16:19,946 --> 00:16:21,676
转场对象.

326
00:16:22,886 --> 00:16:24,826
通常转场对象是临时的,

327
00:16:25,346 --> 00:16:28,626
我们执行(perform)转场,分配一个转场

328
00:16:28,626 --> 00:16:31,496
调用perform,然后释放.
但现在可以在iOS上

329
00:16:31,496 --> 00:16:34,856
保持模态展示 或者 Popover(悬浮)展示 转场对象,

330
00:16:34,856 --> 00:16:38,076
只要在展示视图过程中

331
00:16:38,076 --> 00:16:39,326
你调用super即可.

332
00:16:40,296 --> 00:16:43,316
为何这么小题大做呢?

333
00:16:43,526 --> 00:16:45,806
其实我们需要彻底了解
我们实际如何实现

334
00:16:45,806 --> 00:16:47,136
这个火花四溅效果

335
00:16:47,136 --> 00:16:49,136
或者任何自定义模态展示效果

336
00:16:50,146 --> 00:16:52,196
还是拿这个app来说

337
00:16:52,736 --> 00:16:56,296
用户点击按钮触发转场

338
00:16:56,856 --> 00:17:00,776
如果目标视图存在,
就会被Storyboard初始化

339
00:17:00,776 --> 00:17:02,796
但还没有到屏幕上

340
00:17:03,566 --> 00:17:04,906
我们发送 perform到 转场

341
00:17:04,906 --> 00:17:08,406
第一件事是

342
00:17:08,406 --> 00:17:10,976
赋予一个过渡代理

343
00:17:10,976 --> 00:17:12,316
给目标视图控制器

344
00:17:12,665 --> 00:17:18,646
然后调用super去执行正常的模态展示

345
00:17:19,146 --> 00:17:22,016
现在轮到目标视图控制器,

346
00:17:22,465 --> 00:17:24,346
当它得到
presentViewController指令

347
00:17:24,346 --> 00:17:26,596
由super完成的 或是 perform,

348
00:17:27,425 --> 00:17:29,196
它会去问 过渡代理 ,

349
00:17:29,776 --> 00:17:31,046
好绑定其他一个对象

350
00:17:31,906 --> 00:17:34,056
由这个对象实际完成自定义动画.

351
00:17:34,506 --> 00:17:38,706
欲知这个过渡代理的详细运作

352
00:17:38,706 --> 00:17:41,076
我建议你去看看 2013年的WWDC
视图控制自定义过渡

353
00:17:41,076 --> 00:17:43,336
的那一部分.
(汗...你这锅扔的真年代久远 )

354
00:17:43,336 --> 00:17:48,066
在另一方面,但用户在视图上

355
00:17:48,226 --> 00:17:50,306
完成操作,点了取消操作

356
00:17:50,936 --> 00:17:53,496
目标视图控制器

357
00:17:53,496 --> 00:17:56,486
虽然要消失,
但因为有转场代理

358
00:17:56,486 --> 00:17:58,826
所以会问代理

359
00:17:58,826 --> 00:18:02,446
来一个退场动画.
(闪亮登场,也要华丽谢幕)

360
00:18:02,586 --> 00:18:05,466
如果我们不保持转场对象,

361
00:18:05,466 --> 00:18:06,676
而这个转场又持有代理,

362
00:18:07,066 --> 00:18:08,736
这些会被全部释放

363
00:18:08,736 --> 00:18:10,916
在 iOS 8中可能导致crash

364
00:18:10,916 --> 00:18:12,566
从而得不到漂亮的自定义动画

365
00:18:12,566 --> 00:18:14,606
-而在 iOS 9中这只是个弱引用
(被释放也不会crash)

366
00:18:16,296 --> 00:18:19,256
然后动画控制器去执行

367
00:18:19,796 --> 00:18:21,306
dismiss退场.

368
00:18:22,446 --> 00:18:24,216
另一种情况时这个也很重要

369
00:18:24,306 --> 00:18:26,316
就是当你处理屏幕适配时.

370
00:18:26,616 --> 00:18:29,326
比如,你在iPhone上运行

371
00:18:29,326 --> 00:18:32,056
用户旋转了,如果是iPhone 6 plus

372
00:18:32,056 --> 00:18:35,286
你想在水平方向展示不同的界面

373
00:18:35,286 --> 00:18:38,406
或在iPad垂直方向 ，
比如是采用了iOS 9的

374
00:18:38,406 --> 00:18:41,326
新多任务特性的在iPad Air上，

375
00:18:41,326 --> 00:18:45,166
用户在 iPad Air 2把你的 app 
按屏幕一半分割

376
00:18:45,266 --> 00:18:48,706
但你实际不想有一个

377
00:18:48,706 --> 00:18:50,666
在 紧凑型屏幕上的 悬浮效果（Popover）。

378
00:18:51,676 --> 00:18:54,646
这个特例会在周四的一个会上

379
00:18:54,646 --> 00:18:58,046
讲解iPad在iOS 9上的多任务特性，

380
00:18:58,416 --> 00:19:00,756
会说明详情

381
00:19:00,786 --> 00:19:03,816
且在这些情况下回发生的状况。

382
00:19:03,816 --> 00:19:05,656
同样我们自定义动画，

383
00:19:05,656 --> 00:19:08,536
我们需要代理来优化展现。

384
00:19:08,536 --> 00:19:13,146
我们的用户不管是从什么
转场触发的

385
00:19:13,146 --> 00:19:17,366
模态展现，我们重写的perform

386
00:19:17,366 --> 00:19:18,896
都会赋予一个适配代理

387
00:19:19,666 --> 00:19:21,866
给目标视图控制器的

388
00:19:22,216 --> 00:19:23,286
展现控制器。

389
00:19:24,086 --> 00:19:25,516
这只是个代理属性，

390
00:19:25,516 --> 00:19:28,716
但这个协议实际叫适配代理。

391
00:19:28,716 --> 00:19:29,806
然后我们调用super来

392
00:19:29,806 --> 00:19:31,176
得到标准模态展示

393
00:19:31,176 --> 00:19:33,466
来浮出（popover）一个全屏
或者一个

394
00:19:33,506 --> 00:19:36,636
适应当前屏幕类型（Size class）的尺寸。

395
00:19:36,636 --> 00:19:39,446
一会用户做了一些操作
导致屏幕类型（Size Class）变化

396
00:19:39,446 --> 00:19:42,066
比如旋转iPhone 6 plus

397
00:19:42,136 --> 00:19:46,336
在 iPad air 2上把屏幕五五分。

398
00:19:46,796 --> 00:19:51,066
展示控制器就会通知

399
00:19:51,066 --> 00:19:53,466
适配代理我们即将
更改屏幕类型（size class）

400
00:19:54,076 --> 00:19:56,166
而且转头就问适配代理

401
00:19:56,166 --> 00:19:57,596
要一个新视图控制器

402
00:19:58,776 --> 00:20:00,586
临时代替

403
00:20:00,586 --> 00:20:01,826
当前正在展示的。

404
00:20:03,126 --> 00:20:04,586
欲知此中详情

405
00:20:04,806 --> 00:20:06,456
去年我Boss给一个很牛逼的演示

406
00:20:06,456 --> 00:20:09,876
在 iOS 8上的视图控制器高级篇,
去年这时候。

407
00:20:09,926 --> 00:20:15,006
但时过境迁了，今天，

408
00:20:15,636 --> 00:20:18,376
（我让小弟）Tony 用 Xcode 7
秀秀自定义动画给你看。

409
00:20:19,516 --> 00:20:24,356
[鼓掌] （观众：1年你就当老大了？不明觉厉！）

410
00:20:24,856 --> 00:20:25,406
谢大哥给机会（嘿嘿，明年可能我就是老大了）

411
00:20:26,246 --> 00:20:31,666
在这个demo我会展示几种用代码

412
00:20:31,666 --> 00:20:33,256
添加自定义逻辑到转场的方法。

413
00:20:34,556 --> 00:20:36,626
如果你用过Storyboard，你可能写过

414
00:20:36,626 --> 00:20:39,526
传值代码，把数据从源控制器

415
00:20:39,526 --> 00:20:42,196
传到目标控制器，每当预备执行
一个转场之前这么传一次。

416
00:20:43,246 --> 00:20:45,836
你可能不知道的是
同样可以自定义

417
00:20:45,956 --> 00:20:48,096
何时触发转场或者转场动画效果。

418
00:20:48,826 --> 00:20:53,466
为了说明，我这里会创建一个转场当

419
00:20:53,826 --> 00:20:55,256
用户点删除按钮

420
00:20:55,256 --> 00:20:58,396
我想有条件地展示一个确认页，

421
00:20:58,706 --> 00:21:01,956
如果这张照片是和一个日记条目相关

422
00:21:03,056 --> 00:21:07,066
第一步是拖一个视图控制器

423
00:21:07,066 --> 00:21:09,466
来代表

424
00:21:09,466 --> 00:21:10,846
确认页

425
00:21:11,516 --> 00:21:14,056
我给这个view一个自定义类

426
00:21:14,056 --> 00:21:17,686
我已经在工程中定义好的

427
00:21:18,206 --> 00:21:20,296
这个类实现载入视图

428
00:21:20,296 --> 00:21:22,316
是以代码创建的。

429
00:21:22,316 --> 00:21:24,546
这个视图控制器不需要

430
00:21:24,546 --> 00:21:25,536
随带的视图

431
00:21:26,476 --> 00:21:29,506
我点击这个视图（view）
然后移除

432
00:21:30,276 --> 00:21:33,286
现在这个视图控制器再没
Storyboard附带的view

433
00:21:33,286 --> 00:21:36,696
所以在运行时框架会回退到

434
00:21:36,696 --> 00:21:39,006
我的视图控制器中
代码实现的载入视图中来。

435
00:21:39,566 --> 00:21:43,346
现在我们有了确认页控制器

436
00:21:43,346 --> 00:21:46,156
可以让我们创建转场了。

437
00:21:46,156 --> 00:21:48,906
我想让这个转场由代码触发

438
00:21:48,906 --> 00:21:51,756
而不是点击特定的按钮。

439
00:21:51,756 --> 00:21:54,646
比起从自身视图结构的子视图

440
00:21:54,646 --> 00:21:57,026
拖一个转场，我想从外部控制器

441
00:21:57,026 --> 00:21:58,556
拖一个转场。

442
00:21:59,376 --> 00:22:01,926
这样的话，我从我的源控制器的这个图标

443
00:22:01,926 --> 00:22:03,546
control + 拖动到

444
00:22:03,876 --> 00:22:05,016
目标。

445
00:22:05,766 --> 00:22:08,306
再一次，我想模态展示这个控制器。

446
00:22:08,306 --> 00:22:14,706
我想让转场的代码

447
00:22:15,226 --> 00:22:17,366
又触发删除按钮触发。

448
00:22:17,976 --> 00:22:20,186
现在要做的是创建一个从删除按钮

449
00:22:20,476 --> 00:22:22,886
创建一个 IB action

450
00:22:22,886 --> 00:22:25,596
我开下 辅助编辑器

451
00:22:25,596 --> 00:22:29,856
这样可以打开
照片控制器的代码

452
00:22:29,856 --> 00:22:33,056
现在我要从删除按钮 ctrl + 拖动

453
00:22:33,216 --> 00:22:36,636
到源码，然后我就得到
一个弹出可以让我

454
00:22:36,636 --> 00:22:39,226
配置新连接。

455
00:22:40,696 --> 00:22:43,456
之前说我想要一个Action，

456
00:22:43,806 --> 00:22:49,886
命名为 delete photo.

457
00:22:49,886 --> 00:22:53,916
Xcode 生成了一个 IB action
方法，

458
00:22:53,916 --> 00:22:56,386
我贴一些代码

459
00:23:01,176 --> 00:23:03,076
有了

460
00:23:03,196 --> 00:23:06,956
这个代码里面检查是否有一个关联的日记条目

461
00:23:07,626 --> 00:23:11,066
如果有则调用performSegueWithIdentifier

462
00:23:11,636 --> 00:23:17,356
这里传递是 identifier是

463
00:23:17,356 --> 00:23:19,556
我刚在Storyboard创建的 转场 的ID

464
00:23:20,076 --> 00:23:23,506
一会呢,我就给 那个转场

465
00:23:23,506 --> 00:23:24,066
跟这里相同的 identifier

466
00:23:24,476 --> 00:23:27,546
首先我想指出的是,我也在

467
00:23:27,736 --> 00:23:29,206
预备转场之前引用了这个identifier

468
00:23:30,616 --> 00:23:34,486
在这个方法里,我传递相关的日记条目

469
00:23:34,526 --> 00:23:37,456
给目标控制器,这样可以让

470
00:23:37,456 --> 00:23:39,676
日记条目的详细情况

471
00:23:39,676 --> 00:23:41,306
展示在确认页.

472
00:23:43,196 --> 00:23:45,376
现在回到Storyboard

473
00:23:45,376 --> 00:23:48,816
选择这个转场,然后看到属性栏

474
00:23:49,236 --> 00:23:54,456
我在这里输入相同的identifier, confirmDelete.

475
00:23:55,016 --> 00:23:59,546
你可能注意到之前转场属性栏

476
00:23:59,546 --> 00:24:01,896
有一个新项目可以

477
00:24:02,276 --> 00:24:04,556
让你注定自定义转场类

478
00:24:05,656 --> 00:24:08,796
在Xcode 7你可以提供一个子类

479
00:24:08,796 --> 00:24:10,336
给任意系统提供的转场类型.

480
00:24:10,916 --> 00:24:15,876
 iOS9 和 OS X 10.11上通用.

481
00:24:15,876 --> 00:24:18,216
我有一个工程中
已经定义好的自定义转场类

482
00:24:18,326 --> 00:24:19,316
我在这里选中它

483
00:24:19,406 --> 00:24:21,516
叫做ScalingAnimationSegue.

484
00:24:22,856 --> 00:24:25,416
我们看下这个类的实现

485
00:24:25,416 --> 00:24:27,696
我关闭辅助编辑器

486
00:24:28,376 --> 00:24:29,886
然后用跳转条跳到

487
00:24:29,886 --> 00:24:32,416
到我的 scaling animation segue.

488
00:24:32,916 --> 00:24:36,936
这里首先要指出的是

489
00:24:36,936 --> 00:24:40,636
这个转场继承自 UIStoryboardSegue

490
00:24:40,926 --> 00:24:41,796
然后它遵守

491
00:24:41,796 --> 00:24:44,596
协议UIViewControllerTransitioningDelegate.

492
00:24:45,456 --> 00:24:47,436
这个协议可以让你提供

493
00:24:47,686 --> 00:24:50,956
同时控制展示和

494
00:24:51,106 --> 00:24:53,066
消失的效果的对象.

495
00:24:55,626 --> 00:24:58,676
首先我重写perform方法

496
00:24:58,676 --> 00:25:00,776
在方法中我设置转场

497
00:25:00,986 --> 00:25:03,126
为目标视图控制器的过渡代理

498
00:25:03,126 --> 00:25:05,056
和调用super

499
00:25:05,206 --> 00:25:06,776
来开始正常模态展示.

500
00:25:07,206 --> 00:25:10,456
接下来我重写了2个

501
00:25:10,456 --> 00:25:12,156
从过渡代理 协议来的方法.

502
00:25:12,716 --> 00:25:14,636
Animation controller for presented controller,

503
00:25:14,886 --> 00:25:17,626
和 animation controller for dismissed controller.

504
00:25:19,476 --> 00:25:23,476
这2个方法返回的对象遵守

505
00:25:23,936 --> 00:25:27,026
 UIViewController
animated transitioning 协议.

506
00:25:28,366 --> 00:25:30,076
这个方法,实际包含了

507
00:25:30,076 --> 00:25:31,796
实际控制动画的动作.

508
00:25:32,266 --> 00:25:37,536
下拉到我的 展示动画器,
我有一个很简单的动画

509
00:25:37,536 --> 00:25:40,676
就是把目标控制器

510
00:25:40,676 --> 00:25:41,686
从屏幕中央放大出来

511
00:25:42,846 --> 00:25:43,976
让我们看看这个转场实际效果

512
00:25:48,536 --> 00:25:49,026
好

513
00:25:49,026 --> 00:25:51,706
再一次,我们再一次点击单元格,打开菜单

514
00:25:52,536 --> 00:25:58,026
当我点击delete按钮,
我们自定义的转场

515
00:25:58,026 --> 00:25:59,126
执行了我们自定义的动画

516
00:25:59,986 --> 00:26:01,656
我们有了确认页

517
00:26:02,396 --> 00:26:08,476
现在我取消这个
就会运行消失动画器中的

518
00:26:08,476 --> 00:26:09,386
动画效果.

519
00:26:09,946 --> 00:26:13,946
所以你看到了一些不同不同的自定义

520
00:26:13,946 --> 00:26:17,866
转场的代码方法,
我建议你查看

521
00:26:17,866 --> 00:26:20,826
其它的转场API  
位于UIViewController

522
00:26:20,826 --> 00:26:21,926
和 UIStoryboardSegue中.

523
00:26:23,006 --> 00:26:25,376
这些组成了我们demo中自定义的转场效果

524
00:26:25,376 --> 00:26:28,966
再次交还给kyle,进行下一段

525
00:26:29,516 --> 00:26:35,376
[掌声]

526
00:26:35,876 --> 00:26:36,226
辛苦了

527
00:26:36,226 --> 00:26:40,746
现在我知道这里很多高手

528
00:26:40,746 --> 00:26:43,416
有些是Storyboard专家了

529
00:26:43,416 --> 00:26:46,256
有多少人之前用过反向转场？（unwind segue）

530
00:26:47,916 --> 00:26:51,086
明显比用过Storyboard的还少啊

531
00:26:51,466 --> 00:26:53,776
多少人实现过一个自定义视图控制器

532
00:26:53,776 --> 00:26:54,926
在iOS中？

533
00:26:55,556 --> 00:26:57,566
恩，差不多人数

534
00:26:58,646 --> 00:27:00,096
今年很高兴能跟大家

535
00:27:00,096 --> 00:27:02,496
讲的一件事就是今年我们
已经把这2个特性

536
00:27:02,496 --> 00:27:03,116
做的更好用。

537
00:27:04,126 --> 00:27:06,306
对于不熟悉反向转场（unwind segue）
是什么的朋友，

538
00:27:06,306 --> 00:27:08,856
我能找到最形象的比喻，

539
00:27:08,856 --> 00:27:11,726
在这个地图中找到了。

540
00:27:12,556 --> 00:27:15,286
想象下我在格雷斯大教堂这闲逛，

541
00:27:15,286 --> 00:27:18,046
这是个极好的几何教会

542
00:27:18,046 --> 00:27:21,266
上了诺布山，可以鸟瞰市区

543
00:27:22,566 --> 00:27:24,196
登顶之后，

544
00:27:24,196 --> 00:27:26,326
我孤身一人漫步许久

545
00:27:26,326 --> 00:27:27,086
至轮渡。

546
00:27:27,086 --> 00:27:33,526
码头边看看海，夕阳西下，
随便吃个晚饭，

547
00:27:33,526 --> 00:27:37,056
来杯咖啡，那是我
还在 Embarcadero的岁月,

548
00:27:37,146 --> 00:27:41,586
和她一起走过的海边
我又回到那渔人码头，

549
00:27:41,586 --> 00:27:44,376
腿脚越来越勉强，

550
00:27:44,376 --> 00:27:47,736
回头望一眼，回家吧

551
00:27:48,396 --> 00:27:51,276
忘不了的是什么
我也不知道，

552
00:27:51,276 --> 00:27:53,436
不想走回头路。
我也不住在

553
00:27:53,436 --> 00:27:56,546
格雷斯大教堂附近，
回头路也不是回家

554
00:27:56,546 --> 00:27:57,326
也不是回教堂最快的。

555
00:27:57,846 --> 00:28:03,216
我要摸清头绪，
首先我要去哪

556
00:28:04,646 --> 00:28:09,516
二是找到地点，

557
00:28:09,596 --> 00:28:12,686
三要找出路径。

558
00:28:13,556 --> 00:28:15,196
这就是反向转场要做的。

559
00:28:16,316 --> 00:28:19,286
找一条路径到特定地点，

560
00:28:19,846 --> 00:28:21,746
也不必一定要

561
00:28:21,816 --> 00:28:22,746
按原路返回。

562
00:28:23,256 --> 00:28:27,596
为了给你一个更好的理解
这里用了一个实例app，

563
00:28:27,596 --> 00:28:29,486
我们回到这个demo app

564
00:28:29,486 --> 00:28:32,636
我们用了

565
00:28:32,636 --> 00:28:33,996
...

566
00:28:34,096 --> 00:28:37,366
自定义的tab控制器和表格视图

567
00:28:38,086 --> 00:28:40,576
和包含它的导航控制器。

568
00:28:41,036 --> 00:28:43,026
随着用户使用过程中

569
00:28:43,026 --> 00:28:44,786
视图层次不停变换。

570
00:28:45,326 --> 00:28:49,536
他们可能点一个
tab里面的图片，

571
00:28:49,536 --> 00:28:55,496
把一些东西推到（pop）导航里

572
00:28:55,716 --> 00:28:56,866
这是我们现在的位置

573
00:28:57,536 --> 00:29:00,416
这时候用户说，我想

574
00:29:00,416 --> 00:29:02,306
回到原先在看的那个日记列表

575
00:29:07,276 --> 00:29:10,726
当他们要这么干的时候

576
00:29:11,326 --> 00:29:12,926
我们去执行一个转场

577
00:29:13,506 --> 00:29:15,356
从我们的照片视图开始。

578
00:29:16,756 --> 00:29:19,696
这是一个反向转场 
而且有一个 identifier叫 goBackToJournal.

579
00:29:20,026 --> 00:29:23,976
反向转场首先需要的是

580
00:29:23,976 --> 00:29:25,666
标识出目的地。

581
00:29:26,176 --> 00:29:30,496
如何找到目的地

582
00:29:30,496 --> 00:29:32,216
路在何方

583
00:29:32,696 --> 00:29:33,876
需要代码

584
00:29:34,596 --> 00:29:38,836
这代码位于 UITableViewController子类中

585
00:29:39,436 --> 00:29:42,256
这个方法我命名叫 iAmTheJournal.

586
00:29:43,256 --> 00:29:44,496
这方法什么都没做

587
00:29:44,616 --> 00:29:47,056
这是个 IB action，带 UIStoryboardSegue参数

588
00:29:47,556 --> 00:29:50,166
它是个单独的参数,
所以我们可以决定

589
00:29:50,166 --> 00:29:52,376
哪一个是我们要找的控制器.

590
00:29:58,216 --> 00:30:00,496
第二步是找到目的地(路径)

591
00:30:01,006 --> 00:30:06,446
所以我们看看当前代码的父控制器

592
00:30:07,756 --> 00:30:12,196
...

593
00:30:13,296 --> 00:30:15,716
在iOS 8我们问这个控制器,

594
00:30:15,716 --> 00:30:17,886
向它请求反向转场动作

595
00:30:18,536 --> 00:30:21,206
这个爸爸就去问遍它的娃

596
00:30:21,206 --> 00:30:23,406
看看有木有能回应此请求的娃

597
00:30:23,906 --> 00:30:28,916
也就是我们指定的iAmTheJournal.

598
00:30:29,376 --> 00:30:31,646
这是我们在属性栏中

599
00:30:31,646 --> 00:30:32,576
给反向转场设置的identifier。

600
00:30:33,126 --> 00:30:39,006
这个方法对层次不多的
视图控制器层次很有效

601
00:30:39,006 --> 00:30:40,326
但是在我们这个app中
如此的层次结构

602
00:30:40,326 --> 00:30:42,246
就不是很有效。

603
00:30:43,526 --> 00:30:47,486
所在在iOS 9中，
我们作废此方法

604
00:30:47,486 --> 00:30:50,896
替换成allowedChildViewControllerFromSource

605
00:30:50,896 --> 00:30:53,666
这个方法返回值

606
00:30:53,666 --> 00:30:56,746
是一组接收请求的

607
00:30:56,746 --> 00:30:59,916
子视图控制器

608
00:30:59,916 --> 00:31:02,126
这个数组中有我们想要
找到的那个子视图控制器

609
00:31:04,316 --> 00:31:07,496
所以实际上我们想要返回
一个子集（subset）

610
00:31:07,496 --> 00:31:11,126
这个子集是从父控制器
那里衍生出来的

611
00:31:11,126 --> 00:31:12,116
看看里面能否找到
我们想要的目的地。

612
00:31:12,566 --> 00:31:13,886
我们还有一个新方法

613
00:31:14,246 --> 00:31:16,336
childViewControllerContainingSegueSource

614
00:31:16,836 --> 00:31:19,816
这是个重写的方法,
可以让子控制器用来

615
00:31:19,816 --> 00:31:21,976
找出我们从哪里来.

616
00:31:23,296 --> 00:31:26,326
导航控制器调用这个方法

617
00:31:26,326 --> 00:31:29,746
找到我们从哪里来,发现说,哦

618
00:31:29,746 --> 00:31:31,306
照片视图控制器是源头

619
00:31:31,506 --> 00:31:32,746
因为本身包含了来源,

620
00:31:33,966 --> 00:31:37,806
所以返回的子集数组忽略本身,

621
00:31:37,806 --> 00:31:39,836
这里就只有1个数组元素

622
00:31:40,396 --> 00:31:44,256
这时候Storyboard运行时
遍历这个数组

623
00:31:44,256 --> 00:31:46,586
中唯一的元素

624
00:31:47,156 --> 00:31:50,876
我们想想,这个collection控制器

625
00:31:50,876 --> 00:31:54,606
的子控制器是否包含了

626
00:31:54,606 --> 00:31:56,836
我们反向转场要找的目的地?

627
00:31:57,396 --> 00:31:59,166
它压根没娃.

628
00:32:01,086 --> 00:32:03,866
所以直接就问这个孤家寡人,

629
00:32:04,356 --> 00:32:07,226
OK,老头.老实交待,
我们要的宝藏

630
00:32:07,226 --> 00:32:07,716
到底藏哪了?

631
00:32:09,056 --> 00:32:14,216
很明显他不行.我们失望而归

632
00:32:15,276 --> 00:32:17,166
我们只好尝试

633
00:32:17,166 --> 00:32:18,536
一级一级越级上访了.

634
00:32:19,046 --> 00:32:23,706
跟之前一样,这个新方法

635
00:32:23,706 --> 00:32:25,886
allowedChildViewControllerFromSource

636
00:32:26,556 --> 00:32:31,376
这位最高层

637
00:32:31,686 --> 00:32:33,066
只能退而求其次

638
00:32:33,066 --> 00:32:34,486
垂直向下找

639
00:32:35,396 --> 00:32:38,866
他自问:我哪一个娃包含

640
00:32:38,866 --> 00:32:39,556
反向转场的源头?

641
00:32:40,056 --> 00:32:44,646
照片导航包含这个源头

642
00:32:45,716 --> 00:32:47,786
所以返回的数组忽略这个娃

643
00:32:48,756 --> 00:32:50,876
再一次,我们有一个娃

644
00:32:50,876 --> 00:32:54,456
对这个娃,遍历查找

645
00:32:55,076 --> 00:32:57,496
说:"娃,你问问我孙子们,也就是你自己的娃"

646
00:32:57,496 --> 00:32:59,196
"哪一个"

647
00:33:00,246 --> 00:33:01,386
"有目的地"

648
00:33:01,926 --> 00:33:05,526
这个导航控制器不含任何

649
00:33:05,836 --> 00:33:07,526
源头信息

650
00:33:07,526 --> 00:33:10,926
可以跳过继续遍历

651
00:33:10,926 --> 00:33:13,786
我们又问Table view controller,

652
00:33:13,786 --> 00:33:14,926
该从你的哪一个娃中

653
00:33:14,926 --> 00:33:16,026
找到目的地?

654
00:33:16,026 --> 00:33:17,636
它没娃.

655
00:33:18,396 --> 00:33:21,666
我们接着问,你能执行反向转场操作么?

656
00:33:22,206 --> 00:33:25,426
这个(小方块)方法
是我稍早实现的

657
00:33:25,426 --> 00:33:28,446
但里面没有实际的代码

658
00:33:29,056 --> 00:33:31,866
这是我们的内应,
终于找到目的地了.

659
00:33:39,056 --> 00:33:43,216
这时, 在iOS8 ,我们要问

660
00:33:43,216 --> 00:33:47,466
这个目的地的父控制器
返回一个转场,

661
00:33:47,466 --> 00:33:49,346
用这个转场去还原控制器层次

662
00:33:49,676 --> 00:33:51,116
从而让目的地控制器对用户可见.

663
00:33:52,166 --> 00:33:54,686
这对于有很多复杂视图层次结构来说

664
00:33:54,786 --> 00:33:57,756
是个极其难以回答的问题.

665
00:33:58,316 --> 00:34:02,216
所以我们废弃了这个方法替换成

666
00:34:02,216 --> 00:34:04,236
一个新特性叫 增量的反向转场

667
00:34:04,796 --> 00:34:09,085
这个新特性可以让每一个
从源头到目的地的视图控制器

668
00:34:09,085 --> 00:34:11,636
参与到反向转场

669
00:34:11,636 --> 00:34:14,656
所以只需要知道本地化的信息

670
00:34:15,456 --> 00:34:18,576
运行时会创建一个
UIStoryboardSegue对象

671
00:34:18,826 --> 00:34:22,806
给Interface Builder中指定的

672
00:34:22,806 --> 00:34:23,496
任意自定义子类.

673
00:34:24,666 --> 00:34:29,386
它会要求执行perform

674
00:34:29,516 --> 00:34:33,406
这里到了第三步,顺着路走.

675
00:34:33,606 --> 00:34:34,636
好了,既然我们已经找到

676
00:34:34,966 --> 00:34:36,706
从起点到终点的路径.

677
00:34:37,235 --> 00:34:42,505
第一件事就是去问路上的

678
00:34:42,505 --> 00:34:44,466
第一站

679
00:34:44,466 --> 00:34:46,025
找它与其他控制器的转场

680
00:34:46,025 --> 00:34:48,815
我们会问起点的爸爸

681
00:34:49,916 --> 00:34:52,505
去执行不管什么操作

682
00:34:52,505 --> 00:34:55,775
能让我们达到这个链路的下一步

683
00:34:55,996 --> 00:34:58,146
好吧,其实儿子对爸爸

684
00:34:58,146 --> 00:34:58,586
就是一无所知的.

685
00:34:58,586 --> 00:35:00,886
这个方法其实什么也不做.

686
00:35:01,236 --> 00:35:02,926
只知道让爸爸处理就行,

687
00:35:03,266 --> 00:35:04,546
这不是儿子的责任

688
00:35:05,026 --> 00:35:08,446
下一步我们达到自定义的
容器视图控制器(总Boss)

689
00:35:09,626 --> 00:35:12,536
我们请求它,ok,退回到

690
00:35:12,536 --> 00:35:13,466
日记导航控制器

691
00:35:13,966 --> 00:35:17,326
总Boss实际负责这些

692
00:35:17,326 --> 00:35:20,946
他来组织这个链路

693
00:35:20,946 --> 00:35:24,146
从而让日记导航控制器可见

694
00:35:24,396 --> 00:35:31,826
接着这个链路上,
我们让导航控制器

695
00:35:31,826 --> 00:35:32,816
回退到表格控制器

696
00:35:32,816 --> 00:35:35,996
它已经在导航栈的顶端了

697
00:35:35,996 --> 00:35:37,096
所以什么都不用做

698
00:35:38,376 --> 00:35:40,546
这样我们就返回了用户
想去的目的地.

699
00:35:41,026 --> 00:35:44,026
这就是 反向过渡的 内部机制.

700
00:35:45,346 --> 00:35:46,156
tony会给你们演示

701
00:35:46,156 --> 00:35:47,566
如何在app中实现.

702
00:35:48,516 --> 00:35:52,646
[掌声]

703
00:35:53,146 --> 00:35:54,006
老大,你简直不明觉厉啊!

704
00:35:54,176 --> 00:35:57,196
我给大家演示下怎么用 反向转场

705
00:35:57,406 --> 00:35:58,966
在一个自定义的容器视图控制器里面.

706
00:36:00,346 --> 00:36:03,716
你应该还记得在第一个demo
我们创建一个转场,

707
00:36:03,716 --> 00:36:04,616
从这个journal按钮开始的转场.

708
00:36:05,336 --> 00:36:07,606
这个模型页用来创建新日记条目

709
00:36:08,896 --> 00:36:12,096
羞耻的是, 完成(Done)按钮

710
00:36:12,096 --> 00:36:12,876
我没实现任何功能.

711
00:36:13,636 --> 00:36:16,266
我现在要将功补过,
创建一个反向转场

712
00:36:16,266 --> 00:36:17,746
从这个完成按钮开始,

713
00:36:17,746 --> 00:36:19,166
我想让这个 反向转场 有点功能,

714
00:36:20,186 --> 00:36:22,786
首先是让模态页关闭(dismiss)

715
00:36:23,856 --> 00:36:27,006
再把照片控制器从导航

716
00:36:27,006 --> 00:36:28,066
里弹出

717
00:36:28,976 --> 00:36:31,876
然后转到 日记tab

718
00:36:31,876 --> 00:36:33,956
总结就是我要沿着

719
00:36:33,956 --> 00:36:36,536
导航一路找到

720
00:36:36,536 --> 00:36:38,026
最终的表格控制器,

721
00:36:38,376 --> 00:36:40,196
可以在这里插入新单元格

722
00:36:40,196 --> 00:36:41,056
也就是加一个新日记.

723
00:36:42,016 --> 00:36:43,646
这一个转场东西够多的.

724
00:36:43,806 --> 00:36:46,346
从何开始呢?

725
00:36:46,506 --> 00:36:49,916
第一步是创建一个 反向转场,

726
00:36:49,966 --> 00:36:52,676
就是创建一个 特殊的IBAction方法

727
00:36:52,946 --> 00:36:54,796
在你想要 反向退到的 视图控制器中.

728
00:36:55,086 --> 00:36:59,036
这个例子是 日记表格控制器

729
00:36:59,086 --> 00:37:00,756
这里是实现代码,

730
00:37:00,756 --> 00:37:03,616
有一个IBAction方法

731
00:37:04,486 --> 00:37:06,046
这个IBAction之所以特殊

732
00:37:06,196 --> 00:37:08,446
是因为它接收一个UIStoryboardSegue

733
00:37:08,676 --> 00:37:09,776
作为它的唯一参数。

734
00:37:11,276 --> 00:37:14,746
无论何时当 Xcode看到
一个 IBAction方法

735
00:37:14,746 --> 00:37:17,846
接收UIStoryboardSegue作为其唯一参数时，

736
00:37:17,846 --> 00:37:21,106
可以让你创建到目标的反向转场

737
00:37:21,436 --> 00:37:26,786
在这个方法中，
我获取转场的

738
00:37:26,786 --> 00:37:30,266
源控制，这个例子里是

739
00:37:30,266 --> 00:37:31,536
创建新日记条目的控制器。

740
00:37:31,856 --> 00:37:36,046
我用了这个控制器的 
journalEntry属性（日记条目）

741
00:37:36,076 --> 00:37:39,336
添加到数据模型，然后
刷新表格插入新的一行

742
00:37:39,586 --> 00:37:41,036
并滚动新行所在位置。

743
00:37:41,486 --> 00:37:45,736
现在我们有了这个动作。

744
00:37:46,106 --> 00:37:47,466
回到Storyboard

745
00:37:47,466 --> 00:37:49,436
创建一个转场指向它

746
00:37:49,966 --> 00:37:54,176
现在我们位于

747
00:37:54,176 --> 00:37:55,376
创建新日记条目的视图控制器

748
00:37:56,356 --> 00:37:59,716
现在从完成按钮
创建一个反向转场

749
00:38:00,446 --> 00:38:02,806
只需从done按钮control+拖动

750
00:38:03,376 --> 00:38:05,766
到场景的 出口（exit）处

751
00:38:06,916 --> 00:38:10,336
出口处保持着所有

752
00:38:10,336 --> 00:38:11,816
有效的反向转场动作

753
00:38:11,816 --> 00:38:13,576
就是Xcode能找到的都列在这了。

754
00:38:14,366 --> 00:38:17,226
是否会被列在这里

755
00:38:17,426 --> 00:38:19,726
取决于一个IBAction是否

756
00:38:19,726 --> 00:38:21,206
只有一个UIStoryboardSegue参数

757
00:38:22,086 --> 00:38:27,516
我们看了已经列出来了
直接选择

758
00:38:27,726 --> 00:38:29,976
正常情况下，你创建一个反向转场后

759
00:38:29,976 --> 00:38:30,386
就全部完事了。

760
00:38:30,576 --> 00:38:33,596
你定义好标识，
创建反向转场

761
00:38:34,286 --> 00:38:37,256
在我的例子里
我想执行一些自定义逻辑

762
00:38:38,016 --> 00:38:40,496
可以让我的自定义容器控制器

763
00:38:40,766 --> 00:38:42,186
在个tab直接切换

764
00:38:43,186 --> 00:38:46,406
这个逻辑位于我的自定义容器控制器文件

765
00:38:46,406 --> 00:38:51,626
来看一看

766
00:38:51,836 --> 00:38:54,186
你看到了，在这个控制器里
我已经

767
00:38:54,186 --> 00:38:56,886
重写了 反向转场

768
00:38:57,986 --> 00:38:59,336
这个方向里做了2件事

769
00:39:00,826 --> 00:39:03,516
首先，我得到当前选择的导航控制器，

770
00:39:03,516 --> 00:39:06,206
弹出到根视图

771
00:39:07,526 --> 00:39:10,276
然后把当前选中的导航控制器

772
00:39:10,626 --> 00:39:13,366
设置为随后的视图控制器

773
00:39:14,696 --> 00:39:16,986
（随后的）Subsequent视图控制器
是反向转场的

774
00:39:17,056 --> 00:39:17,836
下一环。

775
00:39:17,836 --> 00:39:20,406
它不必是反向转场的

776
00:39:20,406 --> 00:39:23,106
目的地终点，它是我们

777
00:39:23,106 --> 00:39:25,566
自定义容器控制器要走的下一环。

778
00:39:26,216 --> 00:39:30,946
这个didSet属性监视器,

779
00:39:31,176 --> 00:39:34,036
用于更新自动布局
相关的约束，

780
00:39:34,036 --> 00:39:35,716
执行之前看过的动画效果。

781
00:39:35,716 --> 00:39:40,566
现在我们已经看到了
自定义容器视图控制器

782
00:39:40,566 --> 00:39:42,436
实现了增量的反向转场。

783
00:39:42,916 --> 00:39:48,656
实际来看看效果

784
00:39:48,816 --> 00:39:50,086
点击一个单元格

785
00:39:50,086 --> 00:39:50,856
点开菜单

786
00:39:51,256 --> 00:39:53,696
点 journal 按钮

787
00:39:53,696 --> 00:39:54,926
现在点 Done 按钮

788
00:39:55,696 --> 00:39:57,636
你可以看到 我们切换了 tab

789
00:39:58,546 --> 00:40:00,166
终点在日记控制器

790
00:40:00,416 --> 00:40:03,156
而且已经插入了
一条新日记条目

791
00:40:03,636 --> 00:40:07,736
至此你可以看到，
得益于iOS 9的强大，反向转场

792
00:40:07,736 --> 00:40:09,426
在自定义容器控制器中

793
00:40:09,426 --> 00:40:10,966
运作的很好。

794
00:40:11,516 --> 00:40:18,166
[掌声]

795
00:40:18,666 --> 00:40:21,186
现在结束这个反向转场demo

796
00:40:21,466 --> 00:40:24,766
最后交还给Kyle

797
00:40:26,376 --> 00:40:28,376
KYLE : 辛苦了, Tony.

798
00:40:28,376 --> 00:40:30,896
这是反向相关的

799
00:40:30,896 --> 00:40:32,666
新API的快速总结。

800
00:40:33,436 --> 00:40:35,046
我们废弃了

801
00:40:35,046 --> 00:40:37,546
ViewControllerForUnwindSegueAction
取代它的是

802
00:40:37,546 --> 00:40:39,106
allowedChildViewControllers-

803
00:40:39,106 --> 00:40:40,266
ForUnwindingFromSource

804
00:40:40,946 --> 00:40:42,406
如果你重写了旧方法,

805
00:40:42,406 --> 00:40:43,896
但别重写新方法.

806
00:40:44,136 --> 00:40:46,896
即使在iOS 9上我们也会调用旧方法

807
00:40:46,896 --> 00:40:49,686
这样的代码部署到iOS8上

808
00:40:50,136 --> 00:40:51,466
会跟在iOS 9上运行是一样的效果.

809
00:40:52,626 --> 00:40:54,536
这个重写的具体实现
我们把它

810
00:40:54,536 --> 00:40:56,796
叫childViewControllerContaing-

811
00:40:56,796 --> 00:41:00,746
SegueSource新方法
它可以从返回的

812
00:41:00,746 --> 00:41:04,066
子视图控制器中进行筛选.

813
00:41:04,176 --> 00:41:06,726
如果你需要一些自定义的校验

814
00:41:06,726 --> 00:41:09,696
为特定的反向转场加校验,
可以重写

815
00:41:09,766 --> 00:41:12,446
CanPerformUnwindSegue方法
这个方法已经存在一段时间了

816
00:41:12,446 --> 00:41:15,206
但方法的默认行为是

817
00:41:15,206 --> 00:41:17,176
检查接受方是否响应 
相关的反向转场。

818
00:41:17,826 --> 00:41:21,216
通常情况下已经足够。

819
00:41:21,296 --> 00:41:23,556
同时, 我们作废了segueFor-

820
00:41:23,556 --> 00:41:26,486
-UnwindingToViewController方法

821
00:41:27,006 --> 00:41:30,016
替换为unwindForSegue
这个方法在

822
00:41:30,016 --> 00:41:31,606
每一个链路上的视图控制器被调用

823
00:41:32,056 --> 00:41:33,396
以实现增量的反向转场

824
00:41:36,676 --> 00:41:39,126
总结一下,今天我们学习了

825
00:41:39,126 --> 00:41:41,266
如何用引用来组织Storyboard

826
00:41:41,266 --> 00:41:45,276
学了如何通过子类化转场来自定义

827
00:41:45,786 --> 00:41:47,446
即使我们同时也想要默认行为.

828
00:41:48,946 --> 00:41:52,996
我们学习了在iOS尤其是iOS9 
模态展示

829
00:41:52,996 --> 00:41:56,956
以及悬浮展示转场

830
00:41:56,956 --> 00:41:59,196
视图控制器过程中

831
00:41:59,256 --> 00:42:02,526
可以通过

832
00:42:02,526 --> 00:42:05,316
把握整个转场相关的对象,

833
00:42:05,736 --> 00:42:07,026
可以让他们能通过代理

834
00:42:07,026 --> 00:42:09,416
展示动画和达到屏幕适配.

835
00:42:09,816 --> 00:42:12,806
我们学习到反向转场的机制

836
00:42:13,166 --> 00:42:15,366
可以让我们app流程反向流动

837
00:42:15,366 --> 00:42:18,416
这样可以轻松在自定义容器中运作

838
00:42:19,446 --> 00:42:21,426
这其中移除了作废的旧API,

839
00:42:21,426 --> 00:42:22,726
以便用上 iOS 9的版本.

840
00:42:23,276 --> 00:42:26,226
如果你需要storyboard的更多信息

841
00:42:26,226 --> 00:42:28,486
Storyboard帮助文档
已经在 Xcode 7中重写了

842
00:42:28,486 --> 00:42:30,016
你可以先看看那个

843
00:42:30,016 --> 00:42:33,766
我们同时有一个sample工程
Segue Catalog

844
00:42:34,746 --> 00:42:37,506
开发者网站上有

845
00:42:37,506 --> 00:42:39,866
实际工程名中没有

846
00:42:39,866 --> 00:42:40,926
没有空格哈

847
00:42:40,926 --> 00:42:43,486
别找错了

848
00:42:44,076 --> 00:42:46,766
如果你需要技术支持，
看看开发者论坛

849
00:42:46,766 --> 00:42:49,246
那有很多苦逼的开发者
就像你一样

850
00:42:49,246 --> 00:42:52,476
面临过同样的难题
这些发过的帖子

851
00:42:52,696 --> 00:42:54,436
可以帮你解决问题

852
00:42:54,436 --> 00:42:57,166
你还可以联系开发者技术支持

853
00:42:57,236 --> 00:42:58,436
或者你有一些请求

854
00:42:58,496 --> 00:43:00,546
联系Curt Rothert,
我们的大神.

855
00:43:01,186 --> 00:43:02,966
实在不行，结束你可以到我房里来。

856
00:43:03,516 --> 00:43:06,500
[鼓掌：这个可以有]

