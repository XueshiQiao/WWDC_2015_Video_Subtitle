WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:26.536 --> 00:00:27.056 A:middle
&gt;&gt; Ken Orr: Good morning.

00:00:28.516 --> 00:00:34.616 A:middle
[applause]

00:00:35.116 --> 00:00:38.076 A:middle
&gt;&gt; Ken Orr: Xcode 7 is our
next major release of tools

00:00:38.366 --> 00:00:42.206 A:middle
for building Mac, iPhone,
iPad and Apple Watch apps.

00:00:43.096 --> 00:00:44.826 A:middle
Let's get started this
morning and take a look

00:00:44.826 --> 00:00:47.166 A:middle
at what's new in Xcode.

00:00:48.896 --> 00:00:52.516 A:middle
The biggest news this year
is that we've added support

00:00:52.836 --> 00:00:56.886 A:middle
for a third platform,
Watch OS, and of course,

00:00:57.336 --> 00:00:59.386 A:middle
you can build Apple
Watch apps right

00:00:59.386 --> 00:01:02.656 A:middle
in the same great Xcode
tools that you already know.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.386 --> 00:01:02.656 A:middle
in the same great Xcode
tools that you already know.

00:01:03.616 --> 00:01:07.356 A:middle
Xcode 7 also includes Swift 2,

00:01:08.366 --> 00:01:10.536 A:middle
building on the new programming
language we introduced

00:01:10.536 --> 00:01:10.986 A:middle
last year.

00:01:12.256 --> 00:01:14.926 A:middle
Swift 2 is faster
across the board,

00:01:15.536 --> 00:01:18.156 A:middle
not only will your apps run
faster when you're running

00:01:18.156 --> 00:01:20.776 A:middle
and debugging in
Xcode, more importantly,

00:01:21.236 --> 00:01:23.376 A:middle
they'll run faster
on customer devices.

00:01:23.706 --> 00:01:28.626 A:middle
Swift 2 also includes a number
of new language features,

00:01:29.076 --> 00:01:33.156 A:middle
like Error Handling which
introduces an explicit syntax

00:01:33.556 --> 00:01:36.476 A:middle
that makes it much more natural
to deal with errors in Swift.

00:01:37.826 --> 00:01:40.686 A:middle
Availability, Swift
now has insight

00:01:40.686 --> 00:01:45.496 A:middle
into the minimum OS required for
particular API, making it easier

00:01:45.496 --> 00:01:46.726 A:middle
for you to adopt new API

00:01:47.096 --> 00:01:50.536 A:middle
and also maintaining
support for existing OSs.

00:01:51.996 --> 00:01:53.056 A:middle
Testability.

00:01:53.636 --> 00:01:57.306 A:middle
Test bundles can now
see internal API,

00:01:57.836 --> 00:02:01.276 A:middle
letting you get broader
test coverage without having

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.836 --> 00:02:01.276 A:middle
letting you get broader
test coverage without having

00:02:01.276 --> 00:02:03.716 A:middle
to expose anything
additional in your sources.

00:02:04.856 --> 00:02:09.336 A:middle
Protocol Extensions lets
you add methods to any type

00:02:09.336 --> 00:02:11.276 A:middle
that implements a
particular protocol.

00:02:11.876 --> 00:02:16.266 A:middle
You can convert all
of your Swift code

00:02:16.266 --> 00:02:19.386 A:middle
to Swift 2 using
Xcode 7's Migrator.

00:02:20.036 --> 00:02:23.766 A:middle
It works great for projects
as well as playgrounds.

00:02:27.436 --> 00:02:29.996 A:middle
We have also added a couple
of new language features

00:02:30.096 --> 00:02:33.886 A:middle
to Objective-C to make it
work even better with Swift.

00:02:34.856 --> 00:02:37.926 A:middle
Like Generics which let you
specify type information

00:02:38.406 --> 00:02:40.276 A:middle
for collections.

00:02:40.786 --> 00:02:45.116 A:middle
Also Nullability Annotations
which let you specify

00:02:45.116 --> 00:02:47.696 A:middle
when you expect something
it to be nil or non-nil.

00:02:48.236 --> 00:02:51.056 A:middle
In Objective-C which makes it
really seamless when you want

00:02:51.056 --> 00:02:54.406 A:middle
to interact with options
in Swift, really nice.

00:02:55.106 --> 00:02:57.496 A:middle
We have gone ahead, we have
adopted all these language

00:02:57.526 --> 00:02:58.636 A:middle
features in our own SDKs.

00:02:58.636 --> 00:03:04.706 A:middle
So you will start seeing
the benefits today.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.636 --> 00:03:04.706 A:middle
So you will start seeing
the benefits today.

00:03:04.896 --> 00:03:08.606 A:middle
Now, if you want to get started
with Swift 2 or maybe some

00:03:08.606 --> 00:03:10.826 A:middle
of those new APIs
you saw yesterday,

00:03:11.416 --> 00:03:14.646 A:middle
well there's no better place to
do that than in the playground.

00:03:15.746 --> 00:03:17.686 A:middle
We introduced playgrounds
last year

00:03:18.356 --> 00:03:20.956 A:middle
and they have come a
long way since then.

00:03:21.756 --> 00:03:25.076 A:middle
Not only can you explore
and play with code,

00:03:25.846 --> 00:03:29.746 A:middle
but now you can explain
an idea or a concept all

00:03:29.746 --> 00:03:31.096 A:middle
from within a playground.

00:03:32.586 --> 00:03:35.926 A:middle
We have introduced
features like Rich Comments

00:03:36.066 --> 00:03:37.556 A:middle
which let you explain
what's going

00:03:37.556 --> 00:03:41.396 A:middle
on in the surrounding code
using a simple mark-up syntax.

00:03:42.256 --> 00:03:44.206 A:middle
They have beautiful
formatting and fonts

00:03:44.556 --> 00:03:46.506 A:middle
which really help
them stand out.

00:03:47.766 --> 00:03:52.006 A:middle
Within these comments you can
include things like web links

00:03:52.176 --> 00:03:54.066 A:middle
or lists or even images.

00:03:54.556 --> 00:03:59.456 A:middle
We have also made it possible
to pull results which were shown

00:03:59.456 --> 00:04:02.166 A:middle
in quick-look popovers,
you can pull them right

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.456 --> 00:04:02.166 A:middle
in quick-look popovers,
you can pull them right

00:04:02.216 --> 00:04:04.436 A:middle
into the source code
under the line

00:04:04.436 --> 00:04:05.916 A:middle
of source that generated them.

00:04:07.236 --> 00:04:09.456 A:middle
This really helps tie the cause

00:04:09.456 --> 00:04:11.856 A:middle
and the effect much
more closely together.

00:04:12.356 --> 00:04:13.396 A:middle
This is really nice.

00:04:13.846 --> 00:04:18.326 A:middle
You can add almost unlimited
functionality to a playground

00:04:19.036 --> 00:04:22.106 A:middle
by adding Swift code to the
new supporting sources folder.

00:04:23.146 --> 00:04:25.076 A:middle
This helps you keep
your playground clean

00:04:25.436 --> 00:04:28.486 A:middle
and focused while also
giving you a place

00:04:28.656 --> 00:04:30.186 A:middle
to put the supporting
functionality.

00:04:31.426 --> 00:04:32.846 A:middle
There is also a performance
one here

00:04:33.346 --> 00:04:36.286 A:middle
because the supporting
sources, they can be compiled

00:04:36.286 --> 00:04:38.676 A:middle
down because they're
not run interactively.

00:04:38.996 --> 00:04:41.376 A:middle
They're only there to
support your playground

00:04:41.816 --> 00:04:46.056 A:middle
and that helps them run
really, really fast.

00:04:46.056 --> 00:04:51.986 A:middle
Our newest playground
feature is Pages

00:04:52.616 --> 00:04:57.226 A:middle
which lets you create content
that progresses through a topic.

00:04:58.386 --> 00:05:00.886 A:middle
For example, if you wanted
to author a playground

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.386 --> 00:05:00.886 A:middle
For example, if you wanted
to author a playground

00:05:00.886 --> 00:05:05.416 A:middle
about sorting, you could add
an introductory page that went

00:05:05.416 --> 00:05:07.316 A:middle
into the fundamentals of sorting

00:05:07.316 --> 00:05:09.836 A:middle
and then you could
add subsequent pages

00:05:10.166 --> 00:05:10.956 A:middle
that covered things

00:05:10.956 --> 00:05:14.536 A:middle
like specific sorting algorithms
quick sort, bubble sort.

00:05:15.646 --> 00:05:18.346 A:middle
Then, when you wanted to provide
navigation through the pages,

00:05:18.906 --> 00:05:21.456 A:middle
you can add some of the
new mark-up syntax we

00:05:21.456 --> 00:05:22.706 A:middle
have introduced.

00:05:23.336 --> 00:05:26.856 A:middle
Playgrounds are a
powerful way to teach.

00:05:28.896 --> 00:05:31.916 A:middle
Last year we introduced the
guided tour as a playground.

00:05:32.526 --> 00:05:35.716 A:middle
This year we have
updated it to use Pages.

00:05:38.676 --> 00:05:42.036 A:middle
That's Swift 2 and
the new playgrounds.

00:05:43.476 --> 00:05:50.186 A:middle
In addition to iOS 9 and OS 10
El Capitan we have added sport

00:05:50.186 --> 00:05:51.636 A:middle
for Watch OS 2.

00:05:52.706 --> 00:05:56.776 A:middle
The new WatchKit will help
make your apps more responsive,

00:05:57.806 --> 00:05:59.566 A:middle
but it also gives
you more control

00:05:59.566 --> 00:06:01.006 A:middle
and flexibility as a developer.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.566 --> 00:06:01.006 A:middle
and flexibility as a developer.

00:06:02.186 --> 00:06:03.896 A:middle
If you haven't already,
I encourage you to check

00:06:03.896 --> 00:06:05.686 A:middle
out What's New in Watch OS 2.

00:06:05.776 --> 00:06:09.086 A:middle
Some really nice stuff.

00:06:10.696 --> 00:06:12.916 A:middle
You can build your entire
watch app, of course,

00:06:13.346 --> 00:06:17.336 A:middle
right in Xcode using storyboards
where you can quickly lay

00:06:17.336 --> 00:06:19.756 A:middle
out how your app will flow
from screen to screen.

00:06:20.886 --> 00:06:23.176 A:middle
You can design and
implement glances

00:06:24.126 --> 00:06:26.126 A:middle
or even the new WatchKit
complications.

00:06:27.086 --> 00:06:31.476 A:middle
For iOS, using things like
the new StackView it never was

00:06:31.476 --> 00:06:34.336 A:middle
easier to create a universal
app that deals with things

00:06:34.336 --> 00:06:36.666 A:middle
such as changing
screen orientation

00:06:36.666 --> 00:06:38.656 A:middle
or different screen sizes.

00:06:39.906 --> 00:06:43.766 A:middle
With the new iPad multitasking,
size classes which you define

00:06:43.766 --> 00:06:46.796 A:middle
in interface builder, they
have never been more important.

00:06:47.236 --> 00:06:53.416 A:middle
Along with iOS 9 we're
introducing a new crosscutting

00:06:53.416 --> 00:06:55.266 A:middle
feature called App Thinning.

00:06:56.546 --> 00:07:01.256 A:middle
The App Store can tailor
your app to deliver the best,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:56.546 --> 00:07:01.256 A:middle
The App Store can tailor
your app to deliver the best,

00:07:01.386 --> 00:07:05.646 A:middle
smallest possible version to
each unique customer device.

00:07:07.426 --> 00:07:10.176 A:middle
This will let you focus
more on building a great app

00:07:10.176 --> 00:07:14.136 A:middle
and worry less about size
because you will know

00:07:14.356 --> 00:07:18.346 A:middle
that customers, they'll never
download bits they won't use.

00:07:18.746 --> 00:07:21.356 A:middle
Xcode of course has
great support

00:07:21.356 --> 00:07:24.486 A:middle
to help you configure how
your app will be thinned.

00:07:25.816 --> 00:07:28.776 A:middle
There are three separate
parts to App Thinning,

00:07:30.296 --> 00:07:31.796 A:middle
starting with Bitcode.

00:07:32.706 --> 00:07:36.896 A:middle
When you archive for submission,
Xcode compiles your app

00:07:36.896 --> 00:07:40.046 A:middle
down into an intermediate
representation called Bitcode

00:07:40.456 --> 00:07:42.056 A:middle
which gets sent to the store.

00:07:43.326 --> 00:07:47.336 A:middle
The App Store can later
re-optimize your binary,

00:07:47.616 --> 00:07:51.876 A:middle
helping you future-proof for
things like compiler updates

00:07:52.066 --> 00:07:54.076 A:middle
or even new processer
capabilities.

00:07:55.156 --> 00:07:57.846 A:middle
To take advantage of Bitcode
you don't actually have

00:07:57.846 --> 00:07:58.426 A:middle
to do anything.

00:07:58.676 --> 00:08:02.436 A:middle
Xcode will do all
the hard work here.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.676 --> 00:08:02.436 A:middle
Xcode will do all
the hard work here.

00:08:02.646 --> 00:08:04.476 A:middle
The second, there is Slicing.

00:08:05.046 --> 00:08:08.776 A:middle
When the App Store
goes to send your app

00:08:08.776 --> 00:08:12.996 A:middle
to a customer device it will
only include artwork that's

00:08:12.996 --> 00:08:14.626 A:middle
needed for that particular
device.

00:08:15.046 --> 00:08:19.486 A:middle
For example, if you have both
2x and 3x artwork in your app

00:08:19.556 --> 00:08:24.676 A:middle
for an iPhone6 and a 6+ the
iPhone6 will only get the 2x

00:08:24.676 --> 00:08:28.676 A:middle
artwork and the iPhone6+
will only get the 3x artwork.

00:08:29.916 --> 00:08:32.785 A:middle
To take advantage of
Slicing, all you need

00:08:32.785 --> 00:08:38.546 A:middle
to do is use Asset
Catalogs in Xcode.

00:08:38.546 --> 00:08:42.916 A:middle
Third, on-demand resources,
which let you control

00:08:43.265 --> 00:08:45.046 A:middle
when assets are downloaded.

00:08:45.796 --> 00:08:48.386 A:middle
For example, you can
start downloading level 5

00:08:48.386 --> 00:08:52.536 A:middle
of your game just as the
user is finishing up level 4.

00:08:53.456 --> 00:08:55.206 A:middle
It gives you a ton of control.

00:08:55.506 --> 00:08:56.146 A:middle
Really nice.

00:08:57.426 --> 00:09:01.776 A:middle
Here to give us a demo of Watch
OS 2 and App Thinning is Jon.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.426 --> 00:09:01.776 A:middle
Here to give us a demo of Watch
OS 2 and App Thinning is Jon.

00:09:02.896 --> 00:09:10.476 A:middle
&gt;&gt; Jon Hess: Good morning.

00:09:10.476 --> 00:09:13.776 A:middle
Today I would like to show you
two of my favorite new features

00:09:13.776 --> 00:09:16.206 A:middle
in Xcode 7; native-watch
extensions

00:09:16.446 --> 00:09:17.416 A:middle
and application thinning.

00:09:21.076 --> 00:09:23.276 A:middle
Let's get started with
our trivia game project.

00:09:24.256 --> 00:09:26.526 A:middle
Now in our trivia game we
already have things set

00:09:26.526 --> 00:09:30.296 A:middle
up for WatchKit 1,
and right now I want

00:09:30.296 --> 00:09:31.746 A:middle
to update it to Watch OS 2.

00:09:32.556 --> 00:09:34.076 A:middle
It looks like Xcode
has the same idea.

00:09:34.626 --> 00:09:37.666 A:middle
Here in the navigator, I can see
a project modernization sequence

00:09:37.726 --> 00:09:38.656 A:middle
already queued up for me.

00:09:38.656 --> 00:09:40.656 A:middle
I going to go ahead
and select it

00:09:40.656 --> 00:09:43.546 A:middle
and begin migrating my
project settings to Watch OS 2.

00:09:44.426 --> 00:09:46.976 A:middle
Here in the panel, Xcode
gives me a brief overview

00:09:46.976 --> 00:09:49.006 A:middle
of everything that's
going to happen.

00:09:49.166 --> 00:09:51.386 A:middle
I would like to go into it
with more detail for you.

00:09:52.406 --> 00:09:56.316 A:middle
Just like Watch OS 1, Watch
OS 2 applications are composed

00:09:56.316 --> 00:09:58.296 A:middle
of an app extension
and application.

00:09:59.076 --> 00:10:00.696 A:middle
Your code goes in
the app extension

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.076 --> 00:10:00.696 A:middle
Your code goes in
the app extension

00:10:00.696 --> 00:10:02.406 A:middle
and drives the app remotely.

00:10:03.236 --> 00:10:05.856 A:middle
New in Watch OS 2,
both the app extension

00:10:06.126 --> 00:10:08.356 A:middle
and the app run directly
on the watch.

00:10:08.776 --> 00:10:09.906 A:middle
This allows our applications

00:10:09.906 --> 00:10:12.116 A:middle
to be more responsive
and independent.

00:10:12.866 --> 00:10:13.696 A:middle
Sounds great.

00:10:13.696 --> 00:10:15.406 A:middle
I want to perform these changes.

00:10:16.296 --> 00:10:17.176 A:middle
What just happened?

00:10:17.756 --> 00:10:19.356 A:middle
Xcode took care of the details

00:10:19.356 --> 00:10:21.916 A:middle
of migrating my project
settings to Watch OS 2.

00:10:21.916 --> 00:10:24.216 A:middle
It configured my
Watch targets to build

00:10:24.216 --> 00:10:26.776 A:middle
against the new Watch OS SDK
that we released yesterday,

00:10:26.776 --> 00:10:29.646 A:middle
it set their minimum
deployment target to Watch OS 2

00:10:29.646 --> 00:10:33.606 A:middle
and it configured my Watch app
extension to be copied inside

00:10:33.606 --> 00:10:36.106 A:middle
of my Watch app so that
when they're installed

00:10:36.106 --> 00:10:38.266 A:middle
on the Watch itself they
both go over together.

00:10:38.266 --> 00:10:39.236 A:middle
All right.

00:10:39.236 --> 00:10:41.196 A:middle
That's everything with
upgrading my project settings

00:10:41.196 --> 00:10:42.136 A:middle
to Watch OS 2.

00:10:43.406 --> 00:10:45.326 A:middle
Our Watch application
is nice and light,

00:10:46.296 --> 00:10:48.976 A:middle
but our iOS application
is a quite bit bigger.

00:10:48.976 --> 00:10:52.446 A:middle
It is mostly due to all of these
images in my asset catalog.

00:10:53.186 --> 00:10:55.516 A:middle
I want to make it
smaller but don't want

00:10:55.516 --> 00:10:56.626 A:middle
to remove any content.

00:10:57.326 --> 00:10:59.906 A:middle
This is where the new App
Slicing feature comes in play.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.556 --> 00:11:02.566 A:middle
You see every one ever
these images has a 1,

00:11:02.916 --> 00:11:05.196 A:middle
2, 3x representation?

00:11:05.846 --> 00:11:08.996 A:middle
Well with App Slicing, Xcode
7 and the App Store are going

00:11:08.996 --> 00:11:10.076 A:middle
to work together to make sure

00:11:10.076 --> 00:11:13.266 A:middle
that each device just gets this
single image that best suits it.

00:11:13.696 --> 00:11:16.496 A:middle
This cuts 30- to 40 percent
off the size of our application

00:11:16.496 --> 00:11:18.956 A:middle
and the best part is it's
pretty much automatic.

00:11:19.436 --> 00:11:22.306 A:middle
All I need to do is use
Xcode 7 in an asset catalog

00:11:22.456 --> 00:11:23.376 A:middle
which I'm already doing.

00:11:23.376 --> 00:11:25.616 A:middle
What about the other
assets you would

00:11:25.616 --> 00:11:28.426 A:middle
like to target for each device.

00:11:28.896 --> 00:11:32.116 A:middle
We have extended the
asset catalog in Xcode 7

00:11:32.376 --> 00:11:33.706 A:middle
to support arbitrary data.

00:11:33.806 --> 00:11:35.666 A:middle
You can put whatever
you want in here.

00:11:36.776 --> 00:11:38.126 A:middle
Down here further
in the catalog,

00:11:38.226 --> 00:11:39.656 A:middle
I have this skylines folder.

00:11:40.246 --> 00:11:43.716 A:middle
It's filled with 3D models of
cities from around the world.

00:11:43.776 --> 00:11:45.746 A:middle
We present them to the
user and they guess

00:11:45.746 --> 00:11:48.266 A:middle
which city they are looking at.

00:11:48.266 --> 00:11:52.596 A:middle
San Francisco, I have a really
high-quality model of the city

00:11:52.596 --> 00:11:54.246 A:middle
of San Francisco I would
like to include in our game,

00:11:54.606 --> 00:11:57.026 A:middle
but I only want to send it
to the most high-end devices.

00:11:57.596 --> 00:11:58.256 A:middle
No problem.

00:11:58.696 --> 00:12:01.846 A:middle
Just like images can vary by
scale factor and size class,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.696 --> 00:12:01.846 A:middle
Just like images can vary by
scale factor and size class,

00:12:02.156 --> 00:12:05.006 A:middle
data assets can vary by device
performance characteristics,

00:12:05.446 --> 00:12:07.376 A:middle
things like the amount
of memory on the device,

00:12:07.566 --> 00:12:08.916 A:middle
or the GPU capabilities.

00:12:09.136 --> 00:12:11.826 A:middle
I want to add a specialization
for machines

00:12:11.826 --> 00:12:12.946 A:middle
with 2 gigabytes of memory.

00:12:13.016 --> 00:12:15.306 A:middle
Then I will just
go ahead and drag

00:12:15.306 --> 00:12:18.336 A:middle
in my high-end resource
and I'm good to go.

00:12:18.546 --> 00:12:21.286 A:middle
Each device will get the
resource that best suits it

00:12:21.286 --> 00:12:22.296 A:middle
without double-paying.

00:12:22.736 --> 00:12:23.046 A:middle
All right.

00:12:24.196 --> 00:12:27.126 A:middle
Now I would like to show
you on-demand resources.

00:12:28.246 --> 00:12:30.706 A:middle
On-demand resources allow
us to host the content

00:12:30.706 --> 00:12:34.426 A:middle
for application remotely
on the App Store.

00:12:34.626 --> 00:12:37.536 A:middle
We opt our resources
in to on-demand hosting

00:12:37.536 --> 00:12:39.216 A:middle
by tagging them with strings.

00:12:39.786 --> 00:12:41.556 A:middle
The strings can be
anything we want.

00:12:42.186 --> 00:12:45.376 A:middle
For example, if we're making
a game, we might tag each

00:12:45.376 --> 00:12:46.706 A:middle
of the assets that comprise one

00:12:46.706 --> 00:12:48.536 A:middle
of the levels by
that level's name.

00:12:49.186 --> 00:12:52.176 A:middle
Then, at run time, we use the
new NS Bundle Resource Request

00:12:52.176 --> 00:12:55.256 A:middle
class to fetch and pull down
whole tags worth of content

00:12:55.586 --> 00:12:57.566 A:middle
into our game for
fast, local access.

00:12:58.006 --> 00:12:59.426 A:middle
Let me show you how
to get started

00:12:59.426 --> 00:13:00.606 A:middle
with on-demand resources.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.426 --> 00:13:00.606 A:middle
with on-demand resources.

00:13:01.826 --> 00:13:03.656 A:middle
Here I've selected a
folder in the catalog.

00:13:03.976 --> 00:13:05.556 A:middle
It represents all
of the questions

00:13:05.596 --> 00:13:07.016 A:middle
in the world genre of the game.

00:13:08.056 --> 00:13:09.116 A:middle
In the inspector I'm going

00:13:09.116 --> 00:13:11.386 A:middle
to use the new on-demand
resource tag section

00:13:11.916 --> 00:13:15.616 A:middle
and tag this content,
world questions.

00:13:15.766 --> 00:13:17.936 A:middle
I've just opted all of it
in to on-demand hosting.

00:13:19.126 --> 00:13:21.136 A:middle
Now, what kind of things
can you tag in a catalog?

00:13:21.916 --> 00:13:23.966 A:middle
You can tag entire
folders like I just did.

00:13:24.496 --> 00:13:26.636 A:middle
You can tag images and
data assets directly,

00:13:26.676 --> 00:13:29.526 A:middle
you can also tag Sprite
Atlases in the Asset catalog.

00:13:29.896 --> 00:13:31.416 A:middle
Sprite Atlases are
a new component

00:13:31.416 --> 00:13:32.916 A:middle
of the Asset catalog in Xcode 7.

00:13:33.556 --> 00:13:35.616 A:middle
By putting your Sprite
Atlases in the catalog,

00:13:35.686 --> 00:13:37.756 A:middle
it makes them eligible
for the Splicing feature I

00:13:37.756 --> 00:13:38.416 A:middle
mentioned earlier.

00:13:39.696 --> 00:13:42.566 A:middle
You can also tag loose
files in your Xcode project.

00:13:43.926 --> 00:13:46.956 A:middle
This inspector gives me
a great overview of all

00:13:46.956 --> 00:13:48.646 A:middle
of the tags on a
particular file.

00:13:49.186 --> 00:13:51.846 A:middle
What if I want to see
all the files in a tag,

00:13:51.846 --> 00:13:53.046 A:middle
or just all the tags period.

00:13:53.676 --> 00:13:55.746 A:middle
For that, I can head over
to the Project Editor,

00:13:56.456 --> 00:13:58.746 A:middle
by selecting our
Application Target and going

00:13:58.746 --> 00:14:01.786 A:middle
to the New Resource tag section
I can see all of my tags.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.746 --> 00:14:01.786 A:middle
to the New Resource tag section
I can see all of my tags.

00:14:02.386 --> 00:14:04.776 A:middle
As you see, I tagged a
lot of content earlier.

00:14:04.776 --> 00:14:07.396 A:middle
It is a great place
to get an overview

00:14:07.396 --> 00:14:09.686 A:middle
and make sure things are
consistent like I expect.

00:14:11.106 --> 00:14:13.936 A:middle
For example, I see this books
tag doesn't match the format

00:14:13.936 --> 00:14:16.326 A:middle
of the others, they all
have this question suffix.

00:14:17.006 --> 00:14:17.606 A:middle
No problem.

00:14:17.606 --> 00:14:21.986 A:middle
I'll edit this, and update
all the content in one go.

00:14:21.986 --> 00:14:27.296 A:middle
Now with tag to all of our
content for on-demand resources,

00:14:27.486 --> 00:14:30.576 A:middle
and I would like to show you how
to started using it from code.

00:14:30.846 --> 00:14:33.496 A:middle
That's where the new NS Bundle
resource request class comes

00:14:33.496 --> 00:14:33.856 A:middle
into play.

00:14:34.776 --> 00:14:37.356 A:middle
Here in our game class,
we have two callbacks

00:14:37.356 --> 00:14:38.306 A:middle
that will be perfect for this,

00:14:38.736 --> 00:14:40.736 A:middle
start using genre
and stop using genre.

00:14:41.826 --> 00:14:44.366 A:middle
Two reasons they are great for
using on-demand resources first,

00:14:44.366 --> 00:14:46.416 A:middle
they are bracketed
in time, and second,

00:14:46.626 --> 00:14:49.036 A:middle
they happen a just a bit before
the user actually initiates the

00:14:49.036 --> 00:14:51.056 A:middle
game but as soon as when we
know what they're going to play

00:14:51.056 --> 00:14:53.496 A:middle
in the game, It lets us
pre-fetch the on-demand content.

00:14:54.756 --> 00:14:56.886 A:middle
I'll get started with
an instance variable

00:14:56.886 --> 00:14:58.896 A:middle
to hold an NS Bundle
resource request.

00:14:59.536 --> 00:15:02.536 A:middle
NS Bundle resource requests
are substantiated from tags,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.536 --> 00:15:02.536 A:middle
NS Bundle resource requests
are substantiated from tags,

00:15:02.536 --> 00:15:04.946 A:middle
and remember, tags are
just simple strings.

00:15:05.576 --> 00:15:08.766 A:middle
I'll use our genre's name
with batch questions appended

00:15:08.766 --> 00:15:09.796 A:middle
to the end to form our tag.

00:15:11.266 --> 00:15:16.456 A:middle
Then I can create the bundle
resource request from that tag.

00:15:16.456 --> 00:15:19.006 A:middle
Finally, I can invoke
the request

00:15:19.426 --> 00:15:21.376 A:middle
with the new begin
accessing resources

00:15:21.376 --> 00:15:22.586 A:middle
with completion handler method.

00:15:23.106 --> 00:15:25.326 A:middle
This is an asynchronous method
that runs in the background.

00:15:25.936 --> 00:15:27.626 A:middle
It downloads all the
content from the store,

00:15:27.626 --> 00:15:30.176 A:middle
and when it's done, it
fires my completion handler.

00:15:31.016 --> 00:15:33.926 A:middle
Once my completion handler
runs, and until I say I'm done

00:15:33.926 --> 00:15:34.896 A:middle
with the resource request,

00:15:34.896 --> 00:15:37.626 A:middle
I have fast local access
to all the content.

00:15:38.166 --> 00:15:39.196 A:middle
This is my favorite part.

00:15:39.196 --> 00:15:42.736 A:middle
I get it all, that content with
the same APIs I'm already using.

00:15:43.016 --> 00:15:46.566 A:middle
Methods like NS Bundle, Path of
Resource, UI Image, Image Name,

00:15:46.566 --> 00:15:48.916 A:middle
Texture, Texture
Name, all continue

00:15:48.916 --> 00:15:50.716 A:middle
to work exactly as
they did before.

00:15:50.716 --> 00:15:53.206 A:middle
I'm not making any
changes to the rest

00:15:53.206 --> 00:15:55.266 A:middle
of the resource lookout code
throughout my application.

00:15:57.056 --> 00:16:00.366 A:middle
Now, I set all that content as
available until I say I'm done

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.056 --> 00:16:00.366 A:middle
Now, I set all that content as
available until I say I'm done

00:16:00.366 --> 00:16:01.596 A:middle
with the NS Bundle
resource request.

00:16:01.966 --> 00:16:02.656 A:middle
How do I do that?

00:16:03.246 --> 00:16:05.386 A:middle
In our stop using genre method,

00:16:05.886 --> 00:16:08.256 A:middle
I'll invoke end accessing
resource

00:16:08.256 --> 00:16:09.716 A:middle
on the NS Bundle
resource request.

00:16:10.366 --> 00:16:13.046 A:middle
This moves all the content
that I fetched into the cache

00:16:13.426 --> 00:16:16.636 A:middle
so it is available for future
access but it also marks it

00:16:16.786 --> 00:16:18.446 A:middle
as available for
purging in the even

00:16:18.446 --> 00:16:19.956 A:middle
that the system runs
out of space.

00:16:20.896 --> 00:16:23.106 A:middle
With that, we have written
all of the code we need

00:16:23.106 --> 00:16:24.196 A:middle
for on-demand resources.

00:16:24.496 --> 00:16:25.906 A:middle
I want to build and
run our game.

00:16:26.996 --> 00:16:27.866 A:middle
We'll start a new game.

00:16:28.836 --> 00:16:30.846 A:middle
I'll show you some of the
debugging functionality

00:16:31.186 --> 00:16:32.586 A:middle
for working with
on-demand resources.

00:16:33.726 --> 00:16:36.896 A:middle
Here in the debug navigator, I'm
going to select the disk gage

00:16:37.586 --> 00:16:39.976 A:middle
to bring up the disk
report to get an overview

00:16:39.976 --> 00:16:41.846 A:middle
of all the ways the
application is using the disk.

00:16:42.576 --> 00:16:44.456 A:middle
We've added a new
section here in Xcode 7,

00:16:44.636 --> 00:16:45.856 A:middle
on-demand resource tags.

00:16:46.286 --> 00:16:49.416 A:middle
You see can see my tags, their
size, and their current status.

00:16:50.196 --> 00:16:52.146 A:middle
All that are currently
marked not downloaded,

00:16:52.886 --> 00:16:55.076 A:middle
Xcode is mimicking the role
of the app store right now.

00:16:55.536 --> 00:16:58.986 A:middle
All of my resources are in
Xcode, not on the simulator yet.

00:16:59.396 --> 00:17:01.216 A:middle
But, when I click
one of these genres,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.396 --> 00:17:01.216 A:middle
But, when I click
one of these genres,

00:17:02.636 --> 00:17:04.796 A:middle
the code that we just wrote
runs in the background,

00:17:05.006 --> 00:17:07.886 A:middle
downloads the content and now
you see my tag is marked in use.

00:17:08.526 --> 00:17:10.086 A:middle
If I switch to a second genre,

00:17:10.746 --> 00:17:12.896 A:middle
you can see the first
content is moved to the cache,

00:17:13.175 --> 00:17:16.026 A:middle
just marked downloaded, and
now engineering questions are

00:17:16.026 --> 00:17:16.536 A:middle
in use.

00:17:17.156 --> 00:17:19.006 A:middle
That's Slicing and
on-demand resources.

00:17:19.606 --> 00:17:22.756 A:middle
With Application Slicing,
we're able to lower the size

00:17:22.756 --> 00:17:26.205 A:middle
of our iPhone 6 application
from more than 140 megabytes

00:17:26.445 --> 00:17:27.826 A:middle
to less than 100 megabytes.

00:17:28.516 --> 00:17:30.086 A:middle
With on-demand resources
we were able

00:17:30.086 --> 00:17:32.166 A:middle
to further lower the
initial install size

00:17:32.446 --> 00:17:33.896 A:middle
down to just 30 megabytes.

00:17:34.356 --> 00:17:36.976 A:middle
Now users can get started with
our game faster than ever.

00:17:37.406 --> 00:17:38.116 A:middle
Back to you, Ken.

00:17:39.516 --> 00:17:45.436 A:middle
[applause]

00:17:45.936 --> 00:17:46.976 A:middle
&gt;&gt; Ken Orr: Thank you, Jon.

00:17:49.696 --> 00:17:51.766 A:middle
This year we have
introduced a number

00:17:51.766 --> 00:17:54.046 A:middle
of new features targeted
squarely

00:17:54.046 --> 00:17:57.266 A:middle
at helping you enhance
the quality of your app.

00:17:58.446 --> 00:18:00.466 A:middle
Let's start by talking about
debugging and profiling.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.446 --> 00:18:00.466 A:middle
Let's start by talking about
debugging and profiling.

00:18:01.056 --> 00:18:06.796 A:middle
In Xcode 7 we have brought
the energy gage to iOS apps.

00:18:07.536 --> 00:18:11.466 A:middle
IOS 9 contracts energy
on a per process basis.

00:18:11.676 --> 00:18:14.126 A:middle
That's reflected right
here in the energy report.

00:18:15.606 --> 00:18:18.186 A:middle
The gages in Xcode are
a great way for you

00:18:18.236 --> 00:18:21.126 A:middle
to match what you
expect to be happening

00:18:21.476 --> 00:18:24.866 A:middle
against what's actually
happening.

00:18:24.866 --> 00:18:27.906 A:middle
If you see a spike in energy
usage and you're sitting

00:18:27.906 --> 00:18:31.416 A:middle
in your app apparently
idle, that's a first clue

00:18:31.416 --> 00:18:33.266 A:middle
that maybe you have a problem.

00:18:34.006 --> 00:18:36.146 A:middle
Sometimes when you have
a problem like that,

00:18:36.246 --> 00:18:38.316 A:middle
you know exactly where to
go looking in your code.

00:18:38.316 --> 00:18:43.826 A:middle
But when you don't, you can jump
right into Instruments from all

00:18:43.826 --> 00:18:45.346 A:middle
of the reports in Xcode.

00:18:46.056 --> 00:18:48.226 A:middle
From the Energy report
we can jump

00:18:48.226 --> 00:18:52.596 A:middle
into the New Location instrument
which lets us make sure

00:18:52.596 --> 00:18:55.536 A:middle
that we're efficiently
using core location APIs.

00:18:56.706 --> 00:18:59.456 A:middle
We can answer questions
like are we asking

00:18:59.456 --> 00:19:03.276 A:middle
for the user's location
too often, are we asking

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.456 --> 00:19:03.276 A:middle
for the user's location
too often, are we asking

00:19:03.276 --> 00:19:05.926 A:middle
for the user's location
with too high a precision?

00:19:07.156 --> 00:19:09.516 A:middle
Things like that are
going to cost energy

00:19:09.756 --> 00:19:12.346 A:middle
and we can investigate
those right here.

00:19:12.346 --> 00:19:18.476 A:middle
For iOS, this is also the new
Metal System Trace instrument

00:19:18.476 --> 00:19:21.626 A:middle
letting you see how the
frame rate is being effected

00:19:21.876 --> 00:19:24.006 A:middle
by things like your own code.

00:19:24.666 --> 00:19:29.026 A:middle
The graphics driver, hardware
rendering, it gives you insight

00:19:29.426 --> 00:19:33.276 A:middle
into the entire Graphic
Stack, really powerful.

00:19:34.736 --> 00:19:36.816 A:middle
You may also notice
here in Instruments

00:19:36.926 --> 00:19:39.276 A:middle
that there is a redesigned
track view.

00:19:40.326 --> 00:19:41.516 A:middle
It has a cleaner look,

00:19:42.566 --> 00:19:45.726 A:middle
more importantly it is
more natural to use.

00:19:46.326 --> 00:19:47.956 A:middle
With gestures like
pinch to zoom,

00:19:48.236 --> 00:19:51.656 A:middle
navigating through your
data is really, really easy.

00:19:52.156 --> 00:19:55.726 A:middle
That's a quick peak at
the new Instruments.

00:19:57.806 --> 00:20:03.186 A:middle
I'm willing to bet that every
developer in this room has been

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.806 --> 00:20:03.186 A:middle
I'm willing to bet that every
developer in this room has been

00:20:03.186 --> 00:20:08.576 A:middle
in a situation where a
customer reports a crash

00:20:08.766 --> 00:20:10.356 A:middle
and you just can't reproduce it.

00:20:11.326 --> 00:20:11.586 A:middle
All right.

00:20:12.416 --> 00:20:13.616 A:middle
That happened once
or twice maybe?

00:20:15.066 --> 00:20:19.046 A:middle
The new in Address
Sanitizer in Xcode 7 can help.

00:20:20.176 --> 00:20:25.356 A:middle
Address Sanitizer compiles your
Objective-C in C code in a way

00:20:25.356 --> 00:20:28.116 A:middle
that catch things
like buffer overflows

00:20:28.346 --> 00:20:32.116 A:middle
and it can catch them
immediately when they happen.

00:20:32.576 --> 00:20:35.686 A:middle
Xcode will stop you
right on the line of code

00:20:35.926 --> 00:20:36.956 A:middle
that caused the problem.

00:20:37.886 --> 00:20:40.286 A:middle
This is a powerful
new debugging feature.

00:20:40.676 --> 00:20:43.746 A:middle
Here to give us a demo of
Address Sanitizer is Kate.

00:20:49.236 --> 00:20:49.716 A:middle
&gt;&gt; Kate Stone: Thank you, Ken.

00:20:50.306 --> 00:20:53.796 A:middle
Our trivia game is a great
diversion with friends

00:20:54.306 --> 00:20:56.806 A:middle
but some are experiencing
crashes

00:20:56.806 --> 00:20:57.866 A:middle
when they're setting up a game.

00:20:58.996 --> 00:21:01.216 A:middle
It is unpredictable
enough that it is the kind

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.996 --> 00:21:01.216 A:middle
It is unpredictable
enough that it is the kind

00:21:01.216 --> 00:21:04.496 A:middle
of bug that's hard to reproduce
and make heads or tails of.

00:21:05.626 --> 00:21:07.436 A:middle
I'm sure you experienced
something similar

00:21:07.436 --> 00:21:10.106 A:middle
as I've heard anywhere
you have used pointers

00:21:10.136 --> 00:21:11.556 A:middle
to explicitly managed memory.

00:21:12.126 --> 00:21:15.916 A:middle
Our game is looking beautiful.

00:21:16.786 --> 00:21:20.576 A:middle
We can dive on in, start
a new game, pick a genre,

00:21:21.816 --> 00:21:25.526 A:middle
pick a few users to work
with and we're ready to play.

00:21:26.206 --> 00:21:28.886 A:middle
So it seems to work
just fine -- oh.

00:21:30.696 --> 00:21:33.296 A:middle
Being on stage is
perfect to reproduce this.

00:21:33.426 --> 00:21:34.516 A:middle
Hard to find bugs.

00:21:35.986 --> 00:21:37.326 A:middle
So let's have a look at this.

00:21:37.326 --> 00:21:39.196 A:middle
It's crashed, where
is it crashed?

00:21:39.196 --> 00:21:40.056 A:middle
What can I debug?

00:21:40.856 --> 00:21:43.316 A:middle
It's crashed in my main class.

00:21:43.556 --> 00:21:46.756 A:middle
So there's not even I line
of code I've written there.

00:21:46.996 --> 00:21:48.246 A:middle
There's nothing in
the Stack Trace

00:21:48.276 --> 00:21:49.406 A:middle
to give me a place to start.

00:21:49.766 --> 00:21:51.936 A:middle
That's typical of
this kind of bug.

00:21:52.296 --> 00:21:54.356 A:middle
Luckily, Address
Sanitizer can help there.

00:21:55.116 --> 00:21:57.376 A:middle
We have a variety of
these diagnostic tools

00:21:57.376 --> 00:21:58.736 A:middle
that you can get to from Xcode.

00:21:59.076 --> 00:21:59.916 A:middle
All you need to do is go

00:21:59.916 --> 00:22:01.596 A:middle
to the Scheme editor
for running your app.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.916 --> 00:22:01.596 A:middle
to the Scheme editor
for running your app.

00:22:02.136 --> 00:22:04.996 A:middle
As that handy shortcut, I'll
hold down Option while I click

00:22:04.996 --> 00:22:06.546 A:middle
on Run to get to
the Scheme Editor.

00:22:07.656 --> 00:22:09.816 A:middle
I can configure how I
run my application here,

00:22:10.136 --> 00:22:11.846 A:middle
including the Diagnostics tab

00:22:12.176 --> 00:22:14.766 A:middle
which lets me select some
potentially familiar tools

00:22:15.006 --> 00:22:17.346 A:middle
as well as the new
tool, Address Sanitizer.

00:22:18.066 --> 00:22:20.716 A:middle
Enabling Address Sanitizer
does something different

00:22:20.996 --> 00:22:24.366 A:middle
in that it recompiles the
application adding a bunch more

00:22:24.366 --> 00:22:27.526 A:middle
Instrumentation showing
me not just where I failed

00:22:27.886 --> 00:22:29.366 A:middle
but why I failed as well.

00:22:30.526 --> 00:22:33.616 A:middle
Let's rerun that application
and see how this works.

00:22:34.936 --> 00:22:37.256 A:middle
Now I'll find when I
select a genre and move

00:22:37.256 --> 00:22:40.416 A:middle
to the next page it
immediately stops my application

00:22:40.656 --> 00:22:43.826 A:middle
because this is where the memory
corruption actually occurred.

00:22:44.356 --> 00:22:47.306 A:middle
Far before the application
finally comes

00:22:47.306 --> 00:22:49.656 A:middle
to a screeching halt I can
find out what went wrong.

00:22:50.456 --> 00:22:53.376 A:middle
In this case I get the exact
Stack of where it stopped

00:22:53.876 --> 00:22:56.406 A:middle
and it turns out that it
is some Objective-C code

00:22:56.406 --> 00:22:57.116 A:middle
that I'm calling.

00:22:57.866 --> 00:23:01.296 A:middle
Not everybody has the luxury
of writing everything in Swift.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.866 --> 00:23:01.296 A:middle
Not everybody has the luxury
of writing everything in Swift.

00:23:01.566 --> 00:23:04.786 A:middle
In fact, in our case, we have
this C code that's been wrapped

00:23:04.866 --> 00:23:06.356 A:middle
in an Objective-C framework.

00:23:06.356 --> 00:23:08.446 A:middle
That's the source
of our problem.

00:23:09.036 --> 00:23:10.476 A:middle
I'm not familiar with this code.

00:23:10.476 --> 00:23:13.266 A:middle
I'll have a look at the
code that I'm calling it

00:23:13.266 --> 00:23:14.276 A:middle
from written in Swift.

00:23:15.036 --> 00:23:17.536 A:middle
Here I am calling
some logging API.

00:23:18.226 --> 00:23:21.526 A:middle
That tells me where exactly
I'm triggering the failure

00:23:21.856 --> 00:23:23.416 A:middle
but still not yet why.

00:23:24.506 --> 00:23:26.816 A:middle
If I look further down the
Debug navigator though,

00:23:27.216 --> 00:23:30.716 A:middle
I can see that in addition to
Address Sanitizer telling me

00:23:30.916 --> 00:23:32.886 A:middle
that I'm using deallocated
memory

00:23:32.886 --> 00:23:35.366 A:middle
and that that's the actual
source of my problem.

00:23:36.316 --> 00:23:39.956 A:middle
I can also see in the Debug
navigator what memory that is.

00:23:40.306 --> 00:23:43.046 A:middle
I'm accessing the first bite
in a 50-bite heat region

00:23:43.046 --> 00:23:44.436 A:middle
that was previously allocated.

00:23:45.186 --> 00:23:48.796 A:middle
I can go a step further, click
on and actually see the memory,

00:23:48.796 --> 00:23:51.796 A:middle
and see it has been previously
used to store a log message.

00:23:52.356 --> 00:23:55.906 A:middle
Because it is gray, Address
Sanitizer is telling me

00:23:56.136 --> 00:23:58.746 A:middle
that it knows that it is
no longer valid memory,

00:23:58.836 --> 00:24:00.706 A:middle
no longer memory I
should be accessing.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.836 --> 00:24:00.706 A:middle
no longer memory I
should be accessing.

00:24:01.476 --> 00:24:02.796 A:middle
It also gives me the call Stack,

00:24:02.926 --> 00:24:05.666 A:middle
where that memory was originally
allocated and I can see

00:24:05.666 --> 00:24:09.106 A:middle
that it is when I'm creating
a usage log that makes sense,

00:24:09.836 --> 00:24:11.316 A:middle
and more importantly
in this case,

00:24:11.636 --> 00:24:13.646 A:middle
where that memory
was deallocated.

00:24:14.486 --> 00:24:17.716 A:middle
I can tell here that it is
when I call end logging,

00:24:18.356 --> 00:24:20.346 A:middle
the particularly
badly designed API.

00:24:20.806 --> 00:24:23.906 A:middle
I thought it was just to
flush the log but it turns

00:24:23.906 --> 00:24:26.286 A:middle
out it takes down
critical resources.

00:24:26.916 --> 00:24:28.416 A:middle
Let's solve that
problem quickly.

00:24:29.306 --> 00:24:30.736 A:middle
I can take that line of code,

00:24:30.896 --> 00:24:33.106 A:middle
instead of calling it
every time I log a message,

00:24:33.516 --> 00:24:37.386 A:middle
I'm going to call it only
once during tear down.

00:24:37.626 --> 00:24:40.386 A:middle
Now Address Sanitizer rebuilds
the application complete

00:24:40.386 --> 00:24:43.676 A:middle
with Instrumentation, still
very snappy, still possible

00:24:43.676 --> 00:24:46.946 A:middle
to use it interactively, and
I can get a step further.

00:24:47.026 --> 00:24:50.526 A:middle
It all looks good until
it finds my next problem.

00:24:52.226 --> 00:24:56.456 A:middle
Because Address Sanitizer is not
just about deallocated memory.

00:24:56.726 --> 00:24:57.586 A:middle
In this case it is telling me

00:24:57.586 --> 00:25:00.646 A:middle
about a heap buffer
overflow similarly telling me

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.586 --> 00:25:00.646 A:middle
about a heap buffer
overflow similarly telling me

00:25:00.646 --> 00:25:04.536 A:middle
about under flows and Stack
memory that I'm overflowing

00:25:04.536 --> 00:25:07.746 A:middle
or under flowing, it is an
extraordinarily powerful tool.

00:25:08.326 --> 00:25:10.326 A:middle
It's the kind of
tool you should use

00:25:10.326 --> 00:25:11.526 A:middle
on your applications right now

00:25:11.886 --> 00:25:14.386 A:middle
to find all those
lurking memory issues.

00:25:15.206 --> 00:25:17.566 A:middle
We tried to make that
as easy as possible

00:25:18.146 --> 00:25:21.626 A:middle
because Address Sanitizer
cannot only run

00:25:21.626 --> 00:25:24.206 A:middle
in this interactive
form, but you can use it

00:25:24.206 --> 00:25:26.726 A:middle
with Xcode Servers so you
can set up a suite of tests

00:25:27.396 --> 00:25:30.106 A:middle
with Address Sanitizer
enabled and find those problems

00:25:30.106 --> 00:25:32.126 A:middle
when they creep in your code.

00:25:33.436 --> 00:25:35.866 A:middle
Because you want to minimize
the number of crashes

00:25:35.906 --> 00:25:38.736 A:middle
but let's be realistic, you
can't eliminate them entirely.

00:25:39.306 --> 00:25:42.046 A:middle
So I'm proud to bring
up Itai to talk

00:25:42.046 --> 00:25:45.436 A:middle
about how Xcode helps you
analyze those crash logs you

00:25:45.436 --> 00:25:45.856 A:middle
will get.

00:25:47.516 --> 00:25:56.876 A:middle
[applause]

00:25:57.376 --> 00:25:58.526 A:middle
&gt;&gt; Itai Rom: Thanks, Kate.

00:25:58.526 --> 00:25:59.416 A:middle
Good morning, everyone.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.056 --> 00:26:02.956 A:middle
As Apple developer program
members you have access

00:26:03.036 --> 00:26:04.556 A:middle
to the new crash logs in Xcode.

00:26:05.386 --> 00:26:07.086 A:middle
When you distribute your
app through the App Store

00:26:07.086 --> 00:26:11.216 A:middle
or TestFlight and include symbol
information we'll collect crash

00:26:11.216 --> 00:26:12.176 A:middle
logs from your users.

00:26:13.056 --> 00:26:17.286 A:middle
Those crash logs will be fully
aggregated into crash reports

00:26:17.286 --> 00:26:19.346 A:middle
and downloaded into
Xcode wher you can view

00:26:19.346 --> 00:26:21.946 A:middle
and analyze them right
in the organizer window.

00:26:22.866 --> 00:26:25.456 A:middle
The integration here is
seamless making it easier

00:26:25.456 --> 00:26:28.306 A:middle
than ever before to find and
fix your most critical issues.

00:26:28.506 --> 00:26:33.586 A:middle
I would like to show
you how to use it.

00:26:33.856 --> 00:26:35.406 A:middle
Last year we introduced
TestFlight.

00:26:36.376 --> 00:26:38.086 A:middle
TestFlight is a convenient
service

00:26:38.086 --> 00:26:41.156 A:middle
for distributing beta builds
of your apps and works great

00:26:41.156 --> 00:26:42.646 A:middle
with crash logs in Xcode.

00:26:43.486 --> 00:26:46.486 A:middle
We just distributed a beta build
of our trivia game yesterday.

00:26:46.876 --> 00:26:49.306 A:middle
I'll like to find and
fix some of the crashes

00:26:49.376 --> 00:26:50.756 A:middle
that our testers reported.

00:26:52.196 --> 00:26:53.626 A:middle
I'll launch Xcode.

00:26:54.066 --> 00:26:56.706 A:middle
I have already entered
my Apple ID information

00:26:56.706 --> 00:26:59.646 A:middle
into Xcode's Account Preferences
panel, so all I have to do

00:26:59.646 --> 00:27:02.306 A:middle
to view crashes is open
the Organizer window.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.646 --> 00:27:02.306 A:middle
to view crashes is open
the Organizer window.

00:27:02.886 --> 00:27:07.576 A:middle
On the left side of the window,
Xcode will download information

00:27:07.576 --> 00:27:10.736 A:middle
about all of the apps that my
development team has uploaded

00:27:10.856 --> 00:27:13.606 A:middle
to iTunes Connect for the
App Store or TestFlight.

00:27:14.426 --> 00:27:15.236 A:middle
I'll choose trivia.

00:27:15.236 --> 00:27:18.676 A:middle
On the right, I can
choose which build

00:27:18.676 --> 00:27:19.936 A:middle
of trivia I'm interested in.

00:27:20.536 --> 00:27:23.366 A:middle
This build 55 at the top
of the list is the one

00:27:23.366 --> 00:27:25.306 A:middle
that we distributed through
TestFlight yesterday.

00:27:25.356 --> 00:27:27.586 A:middle
I'll click that.

00:27:27.766 --> 00:27:29.836 A:middle
Underneath Xcode will
download information

00:27:29.836 --> 00:27:31.196 A:middle
about all of the top crashes.

00:27:31.976 --> 00:27:34.966 A:middle
These are sorted by frequency of
occurrence, the one at the top

00:27:34.966 --> 00:27:36.736 A:middle
of the list is naturally the one

00:27:36.736 --> 00:27:38.846 A:middle
that our testers
experienced the most often.

00:27:39.236 --> 00:27:44.016 A:middle
To the right I can see the
back trace for this crash.

00:27:44.146 --> 00:27:46.316 A:middle
Xcode helpfully highlights
one of the Stack frames

00:27:46.316 --> 00:27:48.256 A:middle
in a beautiful orangey
salmon color,

00:27:49.066 --> 00:27:51.256 A:middle
that tells me something
fishy is happening in my app.

00:27:52.946 --> 00:27:55.536 A:middle
In particular that's where
my app crashed inside

00:27:55.536 --> 00:27:58.106 A:middle
of this usage log
and log in method.

00:27:58.366 --> 00:28:01.276 A:middle
That looks similar to the
crash that Kate just found

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.366 --> 00:28:01.276 A:middle
That looks similar to the
crash that Kate just found

00:28:01.276 --> 00:28:02.916 A:middle
and fixed using the
Address Sanitizer.

00:28:03.546 --> 00:28:05.206 A:middle
That's my favorite type of
bug report, I don't have

00:28:05.246 --> 00:28:07.666 A:middle
to do anything since
I watched her fix it.

00:28:08.366 --> 00:28:10.706 A:middle
I'm going to go ahead
and mark it as resolved

00:28:10.706 --> 00:28:13.836 A:middle
by clicking this button
on top of the window.

00:28:13.836 --> 00:28:17.106 A:middle
I can have Xcode filter out the
crashes I have already resolved

00:28:17.606 --> 00:28:21.366 A:middle
by clicking the filter in
the bottom of the window.

00:28:21.516 --> 00:28:24.026 A:middle
Now I can focus on the crashes
that I still need to fix.

00:28:25.156 --> 00:28:26.536 A:middle
We have warmed up with
a pretty easy one.

00:28:26.536 --> 00:28:27.876 A:middle
Let's take a look
at the next crash.

00:28:28.656 --> 00:28:29.796 A:middle
This time we're crashing inside

00:28:29.796 --> 00:28:31.486 A:middle
of our splash screen
view controller,

00:28:31.826 --> 00:28:34.526 A:middle
the beautiful landing page in
the app where you see a grid

00:28:34.526 --> 00:28:35.646 A:middle
of your friends' images.

00:28:36.186 --> 00:28:37.906 A:middle
It looks like we're
indexing into an array

00:28:38.006 --> 00:28:40.116 A:middle
and we might have indexed
beyond the array's bounds.

00:28:40.116 --> 00:28:41.676 A:middle
I would like to try
fixing this crash.

00:28:42.386 --> 00:28:44.766 A:middle
I can jump right into my source
code by clicking the Open

00:28:44.766 --> 00:28:48.386 A:middle
and Project button, selecting my
project, and then clicking Open.

00:28:48.916 --> 00:28:52.546 A:middle
Now, Xcode has not
only opened my project,

00:28:52.646 --> 00:28:54.886 A:middle
it has also magically
transported the crash log

00:28:54.886 --> 00:28:57.196 A:middle
that I was just viewing
in the organizer right

00:28:57.196 --> 00:29:00.356 A:middle
into the Debug navigator where
I can click through Stack Frames

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.196 --> 00:29:00.356 A:middle
into the Debug navigator where
I can click through Stack Frames

00:29:00.816 --> 00:29:02.696 A:middle
and navigate through
my crash log

00:29:02.696 --> 00:29:04.946 A:middle
and source code side-by-side.

00:29:05.926 --> 00:29:08.626 A:middle
It looks like we're crashing
into the next image method.

00:29:09.376 --> 00:29:12.186 A:middle
This looks similar to a
crash I think Jon came

00:29:12.186 --> 00:29:14.066 A:middle
to my office yesterday to
tell me he was hitting.

00:29:15.036 --> 00:29:17.886 A:middle
What we're doing is indexing
through an array of images

00:29:17.886 --> 00:29:20.496 A:middle
of our friends and
incrementing a counter as we go.

00:29:21.496 --> 00:29:22.776 A:middle
When we get to the end
of the end of the array,

00:29:22.776 --> 00:29:25.256 A:middle
we set the counter back to zero.

00:29:25.256 --> 00:29:28.086 A:middle
We have an easy to miss
off by one error here.

00:29:28.366 --> 00:29:30.356 A:middle
This should be a greater
than or equal to check.

00:29:30.406 --> 00:29:31.446 A:middle
I'll fix that.

00:29:32.346 --> 00:29:34.266 A:middle
It looks like you could hit
this crash really easily

00:29:34.266 --> 00:29:35.476 A:middle
if you don't have
very many friends,

00:29:35.816 --> 00:29:37.556 A:middle
which probably explains
why Jon found it.

00:29:39.796 --> 00:29:42.176 A:middle
Now I can go back to the
organizer and fix more crashes.

00:29:43.016 --> 00:29:44.576 A:middle
The new crash logs
feature in Xcode

00:29:44.576 --> 00:29:47.166 A:middle
and TestFlight work great
together to help you find

00:29:47.166 --> 00:29:49.376 A:middle
and fix your most critical
issues before you ship

00:29:49.376 --> 00:29:50.196 A:middle
to your customers.

00:29:50.926 --> 00:29:51.806 A:middle
Now back to Ken.

00:29:53.516 --> 00:29:59.976 A:middle
[applause]

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.476 --> 00:30:02.056 A:middle
&gt;&gt; Ken Orr: Thank you, Itai.

00:30:03.536 --> 00:30:09.046 A:middle
Testing. Over the past few
years we have continually added

00:30:09.356 --> 00:30:11.166 A:middle
to the testing support in Xcode.

00:30:11.536 --> 00:30:13.796 A:middle
Making it possible
for you to test more

00:30:13.796 --> 00:30:15.936 A:middle
and more parts of
your application.

00:30:16.776 --> 00:30:19.476 A:middle
In Xcode 5 we added
a Test navigator.

00:30:19.846 --> 00:30:23.246 A:middle
When you combine that with the
assistant editor we have a nice

00:30:23.246 --> 00:30:25.216 A:middle
workflow for test-driven
development.

00:30:25.726 --> 00:30:29.166 A:middle
We have introduced XC Test
our unit-testing framework,

00:30:30.076 --> 00:30:33.666 A:middle
along with Bots which let you
automatically run the unit tests

00:30:34.016 --> 00:30:36.466 A:middle
on Xcode Server for
continuous integration.

00:30:37.296 --> 00:30:40.616 A:middle
In Xcode 6, we introduced
performance testing

00:30:40.616 --> 00:30:43.446 A:middle
to quickly let you identify
performance regressions

00:30:43.576 --> 00:30:46.406 A:middle
and added testing for
asynchronous APIs.

00:30:46.406 --> 00:30:52.526 A:middle
In Xcode 7, we're introducing
User Interface testing.

00:30:53.766 --> 00:30:57.266 A:middle
The UI testing lets you
test the part of the app

00:30:57.386 --> 00:31:00.226 A:middle
that users actually
see and touch.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.386 --> 00:31:00.226 A:middle
that users actually
see and touch.

00:31:01.326 --> 00:31:02.766 A:middle
The tests like this
are so important

00:31:03.206 --> 00:31:06.116 A:middle
because they help you ensure
that your app continues

00:31:06.116 --> 00:31:08.676 A:middle
to function the way you
originally intended.

00:31:09.256 --> 00:31:14.986 A:middle
Even as you make changes
and enhancements over time.

00:31:15.396 --> 00:31:17.906 A:middle
Like all the testing features
we have added to Xcode,

00:31:18.286 --> 00:31:20.486 A:middle
UI Tests work grade
with Xcode Server.

00:31:21.896 --> 00:31:23.736 A:middle
This is particularly
important for UI Test

00:31:24.116 --> 00:31:26.446 A:middle
because they may take
a bit longer to run.

00:31:27.286 --> 00:31:29.936 A:middle
Also on Xcode Server you
will oftentimes have access

00:31:29.936 --> 00:31:32.336 A:middle
to many more devices than
you would at your desk.

00:31:33.196 --> 00:31:35.606 A:middle
This will let you get a
broader range of coverage

00:31:36.316 --> 00:31:38.886 A:middle
and let you get that
coverage more often.

00:31:39.656 --> 00:31:44.066 A:middle
Speaking of coverage, to
round things out in Xcode 7,

00:31:44.776 --> 00:31:46.566 A:middle
we have added Code
Coverage for testing.

00:31:47.786 --> 00:31:51.186 A:middle
You can turn on Code Coverage
here in the Schemes Test action,

00:31:51.726 --> 00:31:54.426 A:middle
and when you do, Xcode
will build your app

00:31:54.586 --> 00:31:58.026 A:middle
with special instrumentation
that lets it track exactly

00:31:58.026 --> 00:32:00.096 A:middle
which lines of code
are being executed.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.026 --> 00:32:00.096 A:middle
which lines of code
are being executed.

00:32:00.706 --> 00:32:02.706 A:middle
After you run a suite of tests,

00:32:03.186 --> 00:32:05.856 A:middle
you will notice the New
Code Coverage bar here

00:32:05.856 --> 00:32:07.546 A:middle
on the right side of
the source code editor.

00:32:08.566 --> 00:32:10.426 A:middle
This gives you a quick
visual indication

00:32:10.426 --> 00:32:13.996 A:middle
that shows you exactly which
lines of code were called,

00:32:13.996 --> 00:32:17.626 A:middle
more importantly it shows
you which ones were not.

00:32:18.806 --> 00:32:22.466 A:middle
Here to give us a demo of UI
testing in Xcode 7 is Joar.

00:32:23.516 --> 00:32:29.056 A:middle
[applause]

00:32:29.556 --> 00:32:30.066 A:middle
&gt;&gt; Joar Wingfors:
Thank you, Ken.

00:32:30.616 --> 00:32:36.806 A:middle
It is really easy to get started
with UI Testing in Xcode.

00:32:36.956 --> 00:32:41.666 A:middle
You add a new UI Testing
target, like I have done here.

00:32:42.366 --> 00:32:44.636 A:middle
If you have used
unit testing before,

00:32:44.796 --> 00:32:46.726 A:middle
you recognize getting
a test case sub class

00:32:46.726 --> 00:32:49.106 A:middle
and the method created for you.

00:32:50.076 --> 00:32:52.466 A:middle
Had this been a unit
test, you would now have

00:32:52.566 --> 00:32:55.236 A:middle
to write the test method
using your bare hands.

00:32:56.126 --> 00:33:01.916 A:middle
Now we can write this for you
recording the application.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:56.126 --> 00:33:01.916 A:middle
Now we can write this for you
recording the application.

00:33:02.426 --> 00:33:08.156 A:middle
Let's take a look.

00:33:08.416 --> 00:33:12.146 A:middle
I put my curser in the Test
Method and start recording

00:33:12.336 --> 00:33:18.176 A:middle
by clicking the Record button
at the bottom of the window.

00:33:18.326 --> 00:33:20.826 A:middle
While recording any
event received

00:33:21.106 --> 00:33:22.356 A:middle
by my application will result

00:33:22.356 --> 00:33:24.376 A:middle
in source code being
emitted into my Test Method.

00:33:24.956 --> 00:33:27.566 A:middle
For this test I want to
configure a new game.

00:33:27.796 --> 00:33:30.216 A:middle
I'll go ahead, tap the
Start a New Game button.

00:33:30.746 --> 00:33:37.076 A:middle
Note that as I tap the
button, the corresponding line

00:33:37.076 --> 00:33:39.376 A:middle
of code showed up in the
Source Editor right away.

00:33:40.936 --> 00:33:42.726 A:middle
Here I'm asked to pick a genre,

00:33:42.966 --> 00:33:45.346 A:middle
I'll go with sci-fi
for this test.

00:33:46.076 --> 00:33:53.226 A:middle
Tap next. I'll invite a couple
of players, Alice, Brandon,

00:33:53.326 --> 00:33:54.926 A:middle
I'll search for Stacy.

00:33:56.036 --> 00:33:57.546 A:middle
There she is.

00:33:58.296 --> 00:34:00.056 A:middle
I'll tap done.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.296 --> 00:34:00.056 A:middle
I'll tap done.

00:34:00.866 --> 00:34:05.916 A:middle
Tap next. Finally tap the switch
to mark the game as ready.

00:34:07.366 --> 00:34:10.176 A:middle
With this I'm done with -- with
what I wanted to record here.

00:34:10.306 --> 00:34:15.436 A:middle
Let's take a look with
what we ended up with.

00:34:15.626 --> 00:34:17.456 A:middle
This first line of
code contains a query

00:34:17.646 --> 00:34:20.016 A:middle
to find a button label
start a new game,

00:34:20.585 --> 00:34:23.716 A:middle
and it returns what we call an
element, an element is a proxy

00:34:24.266 --> 00:34:26.076 A:middle
of the actual button
in the application.

00:34:27.085 --> 00:34:29.936 A:middle
Using this element I can now
access properties of the button

00:34:29.985 --> 00:34:33.266 A:middle
and also send events,
in this case, a tap.

00:34:35.456 --> 00:34:38.176 A:middle
These next couple of lines
contains the source code

00:34:38.176 --> 00:34:44.065 A:middle
for selecting the sci-fi genre
and for tapping the Next button.

00:34:44.156 --> 00:34:46.856 A:middle
We designed the UI Testing
APIs to be easy to read here,

00:34:47.255 --> 00:34:49.666 A:middle
as you see here,
to be easy to write

00:34:49.666 --> 00:34:53.436 A:middle
and to help you produce
robust tests.

00:34:54.576 --> 00:34:57.146 A:middle
Now for this to be
a test it would have

00:34:57.146 --> 00:34:59.506 A:middle
to actually test something,
and it already does.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.776 --> 00:35:02.636 A:middle
If I were to run
this test as-is,

00:35:02.916 --> 00:35:05.456 A:middle
it would implicitly validate
that all the controls

00:35:05.886 --> 00:35:09.806 A:middle
that I interacted with while
recording are still available

00:35:09.806 --> 00:35:12.236 A:middle
to me and fail a
test if they're not.

00:35:14.116 --> 00:35:16.086 A:middle
In addition to this
implicit validation,

00:35:16.086 --> 00:35:17.366 A:middle
I would typically also want

00:35:17.366 --> 00:35:20.716 A:middle
to explicitly validate other
aspects of my application state

00:35:21.016 --> 00:35:22.856 A:middle
at different points
throughout the test.

00:35:24.156 --> 00:35:27.086 A:middle
In this test, I selected
a specific genre

00:35:27.536 --> 00:35:29.436 A:middle
and invited a specific
set of players.

00:35:30.936 --> 00:35:33.456 A:middle
Let's add a couple of
assertions to the test

00:35:33.586 --> 00:35:40.036 A:middle
to make sure that's
what we ended up with.

00:35:40.246 --> 00:35:44.526 A:middle
These assertions validate that
there are elements in the UI

00:35:44.526 --> 00:35:45.966 A:middle
of the last screen
of the application

00:35:46.326 --> 00:35:48.106 A:middle
that contains the
name of the genre

00:35:48.336 --> 00:35:49.666 A:middle
and names of these players.

00:35:51.076 --> 00:35:53.276 A:middle
With these assertions in
place, I will be allowed

00:35:53.386 --> 00:35:55.916 A:middle
to run the test to make sure
it performs as expected.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:05.166 --> 00:36:05.546 A:middle
No hands.

00:36:18.156 --> 00:36:19.626 A:middle
The test passed.

00:36:20.516 --> 00:36:27.006 A:middle
[applause]

00:36:27.506 --> 00:36:28.756 A:middle
&gt;&gt; Joar Wingfors: This
is a quick overview

00:36:28.756 --> 00:36:30.126 A:middle
of testing in Xcode 7.

00:36:31.616 --> 00:36:33.056 A:middle
I think you should all try it.

00:36:33.056 --> 00:36:35.666 A:middle
I think you'll love it.

00:36:35.666 --> 00:36:37.476 A:middle
More importantly, I think
your customers will.

00:36:38.266 --> 00:36:38.806 A:middle
Back to you, Ken.

00:36:39.516 --> 00:36:46.506 A:middle
[applause]

00:36:47.006 --> 00:36:47.206 A:middle
&gt;&gt; Ken Orr: Great.

00:36:47.306 --> 00:36:47.966 A:middle
Thank you, Joar.

00:36:50.906 --> 00:36:52.446 A:middle
We have looked at just a few

00:36:52.446 --> 00:36:54.396 A:middle
of the many new features
this morning.

00:36:55.666 --> 00:36:57.696 A:middle
I hope you're excited
by what you've seen,

00:36:58.116 --> 00:37:00.166 A:middle
and you can see even
more throughout this week

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.116 --> 00:37:00.166 A:middle
and you can see even
more throughout this week

00:37:00.166 --> 00:37:01.626 A:middle
at the many great
sessions which will go

00:37:01.626 --> 00:37:03.706 A:middle
into much more detail
on Xcode 7.

00:37:04.676 --> 00:37:05.946 A:middle
If you haven't already,
I encourage you

00:37:05.946 --> 00:37:08.466 A:middle
to download the new Xcode and
let us know what you think.

00:37:08.466 --> 00:37:09.836 A:middle
Thank you very much.

00:37:10.508 --> 00:37:12.508 A:middle
[applause]

